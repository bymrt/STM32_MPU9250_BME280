
005_MPU9250_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007db8  08007db8  00017db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe0  08007fe0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe8  08007fe8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08008060  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08008060  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdd1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193b  00000000  00000000  0002be71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218e7  00000000  00000000  0002ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d543  00000000  00000000  00050347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4c6  00000000  00000000  0005d88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa8  00000000  00000000  00128da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007d9c 	.word	0x08007d9c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08007d9c 	.word	0x08007d9c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_ldivmod>:
 8000bd0:	b97b      	cbnz	r3, 8000bf2 <__aeabi_ldivmod+0x22>
 8000bd2:	b972      	cbnz	r2, 8000bf2 <__aeabi_ldivmod+0x22>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bfbe      	ittt	lt
 8000bd8:	2000      	movlt	r0, #0
 8000bda:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bde:	e006      	blt.n	8000bee <__aeabi_ldivmod+0x1e>
 8000be0:	bf08      	it	eq
 8000be2:	2800      	cmpeq	r0, #0
 8000be4:	bf1c      	itt	ne
 8000be6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bea:	f04f 30ff 	movne.w	r0, #4294967295
 8000bee:	f000 b9bf 	b.w	8000f70 <__aeabi_idiv0>
 8000bf2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	db09      	blt.n	8000c12 <__aeabi_ldivmod+0x42>
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db1a      	blt.n	8000c38 <__aeabi_ldivmod+0x68>
 8000c02:	f000 f84d 	bl	8000ca0 <__udivmoddi4>
 8000c06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0e:	b004      	add	sp, #16
 8000c10:	4770      	bx	lr
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db1b      	blt.n	8000c54 <__aeabi_ldivmod+0x84>
 8000c1c:	f000 f840 	bl	8000ca0 <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr
 8000c38:	4252      	negs	r2, r2
 8000c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3e:	f000 f82f 	bl	8000ca0 <__udivmoddi4>
 8000c42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4240      	negs	r0, r0
 8000c4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f821 	bl	8000ca0 <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b974 	b.w	8000f70 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9d08      	ldr	r5, [sp, #32]
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	468e      	mov	lr, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <__udivmoddi4+0xaa>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	d969      	bls.n	8000d88 <__udivmoddi4+0xe8>
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b152      	cbz	r2, 8000cd0 <__udivmoddi4+0x30>
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	f1c2 0120 	rsb	r1, r2, #32
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cca:	ea41 0e03 	orr.w	lr, r1, r3
 8000cce:	4094      	lsls	r4, r2
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	0c21      	lsrs	r1, r4, #16
 8000cd6:	fbbe f6f8 	udiv	r6, lr, r8
 8000cda:	fa1f f78c 	uxth.w	r7, ip
 8000cde:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce6:	fb06 f107 	mul.w	r1, r6, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d90a      	bls.n	8000d04 <__udivmoddi4+0x64>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 811f 	bcs.w	8000f38 <__udivmoddi4+0x298>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 811c 	bls.w	8000f38 <__udivmoddi4+0x298>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 f707 	mul.w	r7, r0, r7
 8000d18:	42a7      	cmp	r7, r4
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x92>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	f080 810a 	bcs.w	8000f3c <__udivmoddi4+0x29c>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f240 8107 	bls.w	8000f3c <__udivmoddi4+0x29c>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	1be4      	subs	r4, r4, r7
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa4>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0xc2>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	f000 80ef 	beq.w	8000f32 <__udivmoddi4+0x292>
 8000d54:	2600      	movs	r6, #0
 8000d56:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	fab3 f683 	clz	r6, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d14a      	bne.n	8000e00 <__udivmoddi4+0x160>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xd4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f200 80f9 	bhi.w	8000f66 <__udivmoddi4+0x2c6>
 8000d74:	1a84      	subs	r4, r0, r2
 8000d76:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d0e0      	beq.n	8000d44 <__udivmoddi4+0xa4>
 8000d82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d86:	e7dd      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000d88:	b902      	cbnz	r2, 8000d8c <__udivmoddi4+0xec>
 8000d8a:	deff      	udf	#255	; 0xff
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	f040 8092 	bne.w	8000eba <__udivmoddi4+0x21a>
 8000d96:	eba1 010c 	sub.w	r1, r1, ip
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2601      	movs	r6, #1
 8000da4:	0c20      	lsrs	r0, r4, #16
 8000da6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000daa:	fb07 1113 	mls	r1, r7, r3, r1
 8000dae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db2:	fb0e f003 	mul.w	r0, lr, r3
 8000db6:	4288      	cmp	r0, r1
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x12c>
 8000dba:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x12a>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2c0>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a09      	subs	r1, r1, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd4:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x156>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x154>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000df4:	4608      	mov	r0, r1
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfe:	e79c      	b.n	8000d3a <__udivmoddi4+0x9a>
 8000e00:	f1c6 0720 	rsb	r7, r6, #32
 8000e04:	40b3      	lsls	r3, r6
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e12:	fa01 f306 	lsl.w	r3, r1, r6
 8000e16:	431c      	orrs	r4, r3
 8000e18:	40f9      	lsrs	r1, r7
 8000e1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e26:	0c20      	lsrs	r0, r4, #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e34:	fb08 f00e 	mul.w	r0, r8, lr
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b8>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2bc>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2bc>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1a09      	subs	r1, r1, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e60:	fb09 1110 	mls	r1, r9, r0, r1
 8000e64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e6c:	458e      	cmp	lr, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1e2>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7a:	458e      	cmp	lr, r1
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2b4>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e86:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8a:	eba1 010e 	sub.w	r1, r1, lr
 8000e8e:	42a1      	cmp	r1, r4
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46a6      	mov	lr, r4
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x2a4>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x2a0>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x212>
 8000e9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eaa:	40f1      	lsrs	r1, r6
 8000eac:	431f      	orrs	r7, r3
 8000eae:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	f1c2 0320 	rsb	r3, r2, #32
 8000ebe:	40d8      	lsrs	r0, r3
 8000ec0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed8:	fb07 3610 	mls	r6, r7, r0, r3
 8000edc:	0c0b      	lsrs	r3, r1, #16
 8000ede:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee6:	429e      	cmp	r6, r3
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x260>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b8>
 8000ef8:	429e      	cmp	r6, r3
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b8>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	1b9b      	subs	r3, r3, r6
 8000f02:	b289      	uxth	r1, r1
 8000f04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f08:	fb07 3316 	mls	r3, r7, r6, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb06 f30e 	mul.w	r3, r6, lr
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x28a>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000f26:	3e02      	subs	r6, #2
 8000f28:	4461      	add	r1, ip
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0x104>
 8000f32:	462e      	mov	r6, r5
 8000f34:	4628      	mov	r0, r5
 8000f36:	e705      	b.n	8000d44 <__udivmoddi4+0xa4>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	e6e3      	b.n	8000d04 <__udivmoddi4+0x64>
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	e6f8      	b.n	8000d32 <__udivmoddi4+0x92>
 8000f40:	454b      	cmp	r3, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f8>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f8>
 8000f50:	4646      	mov	r6, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x28a>
 8000f54:	4620      	mov	r0, r4
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1e2>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x260>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b8>
 8000f60:	3b02      	subs	r3, #2
 8000f62:	4461      	add	r1, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x12c>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e709      	b.n	8000d7e <__udivmoddi4+0xde>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x156>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2319      	movs	r3, #25
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	463b      	mov	r3, r7
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2288      	movs	r2, #136	; 0x88
 8000f8c:	21ec      	movs	r1, #236	; 0xec
 8000f8e:	4857      	ldr	r0, [pc, #348]	; (80010ec <TrimRead+0x178>)
 8000f90:	f002 fe00 	bl	8003b94 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000f94:	463b      	mov	r3, r7
 8000f96:	3319      	adds	r3, #25
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	9202      	str	r2, [sp, #8]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	9201      	str	r2, [sp, #4]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	22e1      	movs	r2, #225	; 0xe1
 8000fa8:	21ec      	movs	r1, #236	; 0xec
 8000faa:	4850      	ldr	r0, [pc, #320]	; (80010ec <TrimRead+0x178>)
 8000fac:	f002 fdf2 	bl	8003b94 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	783b      	ldrb	r3, [r7, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <TrimRead+0x17c>)
 8000fc2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	78bb      	ldrb	r3, [r7, #2]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b48      	ldr	r3, [pc, #288]	; (80010f4 <TrimRead+0x180>)
 8000fd4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	793b      	ldrb	r3, [r7, #4]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <TrimRead+0x184>)
 8000fe6:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <TrimRead+0x188>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <TrimRead+0x18c>)
 800100c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <TrimRead+0x190>)
 800101e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001020:	7b7b      	ldrb	r3, [r7, #13]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <TrimRead+0x194>)
 8001030:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21a      	sxth	r2, r3
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <TrimRead+0x198>)
 8001042:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001044:	7c7b      	ldrb	r3, [r7, #17]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	7c3b      	ldrb	r3, [r7, #16]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <TrimRead+0x19c>)
 8001054:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7cbb      	ldrb	r3, [r7, #18]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <TrimRead+0x1a0>)
 8001066:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001068:	7d7b      	ldrb	r3, [r7, #21]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	7d3b      	ldrb	r3, [r7, #20]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <TrimRead+0x1a4>)
 8001078:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7dbb      	ldrb	r3, [r7, #22]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <TrimRead+0x1a8>)
 800108a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800108c:	7e3b      	ldrb	r3, [r7, #24]
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <TrimRead+0x1ac>)
 8001092:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001094:	7ebb      	ldrb	r3, [r7, #26]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7e7b      	ldrb	r3, [r7, #25]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <TrimRead+0x1b0>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80010a6:	7efb      	ldrb	r3, [r7, #27]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <TrimRead+0x1b4>)
 80010ac:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80010ae:	7f3b      	ldrb	r3, [r7, #28]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	7f7b      	ldrb	r3, [r7, #29]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <TrimRead+0x1b8>)
 80010c4:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80010c6:	7fbb      	ldrb	r3, [r7, #30]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7f7b      	ldrb	r3, [r7, #29]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <TrimRead+0x1bc>)
 80010da:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80010dc:	7ffb      	ldrb	r3, [r7, #31]
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <TrimRead+0x1c0>)
 80010e2:	801a      	strh	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000114 	.word	0x20000114
 80010f0:	20000098 	.word	0x20000098
 80010f4:	200000a0 	.word	0x200000a0
 80010f8:	200000a2 	.word	0x200000a2
 80010fc:	2000009a 	.word	0x2000009a
 8001100:	200000a4 	.word	0x200000a4
 8001104:	200000a6 	.word	0x200000a6
 8001108:	200000a8 	.word	0x200000a8
 800110c:	200000aa 	.word	0x200000aa
 8001110:	200000ac 	.word	0x200000ac
 8001114:	200000ae 	.word	0x200000ae
 8001118:	200000b0 	.word	0x200000b0
 800111c:	200000b2 	.word	0x200000b2
 8001120:	2000009c 	.word	0x2000009c
 8001124:	200000b4 	.word	0x200000b4
 8001128:	2000009e 	.word	0x2000009e
 800112c:	200000b6 	.word	0x200000b6
 8001130:	200000b8 	.word	0x200000b8
 8001134:	200000ba 	.word	0x200000ba

08001138 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af04      	add	r7, sp, #16
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001156:	f7ff ff0d 	bl	8000f74 <TrimRead>


	uint8_t datatowrite = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001162:	23b6      	movs	r3, #182	; 0xb6
 8001164:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	22e0      	movs	r2, #224	; 0xe0
 800117a:	21ec      	movs	r1, #236	; 0xec
 800117c:	4858      	ldr	r0, [pc, #352]	; (80012e0 <BME280_Config+0x1a8>)
 800117e:	f002 fc0f 	bl	80039a0 <HAL_I2C_Mem_Write>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <BME280_Config+0x56>
	{
		return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	e0a3      	b.n	80012d6 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f001 fccc 	bl	8002b2c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 030f 	add.w	r3, r7, #15
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f2      	movs	r2, #242	; 0xf2
 80011ac:	21ec      	movs	r1, #236	; 0xec
 80011ae:	484c      	ldr	r0, [pc, #304]	; (80012e0 <BME280_Config+0x1a8>)
 80011b0:	f002 fbf6 	bl	80039a0 <HAL_I2C_Mem_Write>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <BME280_Config+0x88>
	{
		return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e08a      	b.n	80012d6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80011c0:	2064      	movs	r0, #100	; 0x64
 80011c2:	f001 fcb3 	bl	8002b2c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f107 030e 	add.w	r3, r7, #14
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	22f2      	movs	r2, #242	; 0xf2
 80011da:	21ec      	movs	r1, #236	; 0xec
 80011dc:	4840      	ldr	r0, [pc, #256]	; (80012e0 <BME280_Config+0x1a8>)
 80011de:	f002 fcd9 	bl	8003b94 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80011e2:	7bba      	ldrb	r2, [r7, #14]
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d002      	beq.n	80011f0 <BME280_Config+0xb8>
	{
		return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e072      	b.n	80012d6 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80011f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f4:	015b      	lsls	r3, r3, #5
 80011f6:	b25a      	sxtb	r2, r3
 80011f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b25b      	sxtb	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f107 030f 	add.w	r3, r7, #15
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	22f5      	movs	r2, #245	; 0xf5
 800121c:	21ec      	movs	r1, #236	; 0xec
 800121e:	4830      	ldr	r0, [pc, #192]	; (80012e0 <BME280_Config+0x1a8>)
 8001220:	f002 fbbe 	bl	80039a0 <HAL_I2C_Mem_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <BME280_Config+0xf8>
	{
		return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e052      	b.n	80012d6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f001 fc7b 	bl	8002b2c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030e 	add.w	r3, r7, #14
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	22f5      	movs	r2, #245	; 0xf5
 800124a:	21ec      	movs	r1, #236	; 0xec
 800124c:	4824      	ldr	r0, [pc, #144]	; (80012e0 <BME280_Config+0x1a8>)
 800124e:	f002 fca1 	bl	8003b94 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001252:	7bba      	ldrb	r2, [r7, #14]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d002      	beq.n	8001260 <BME280_Config+0x128>
	{
		return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e03a      	b.n	80012d6 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	015b      	lsls	r3, r3, #5
 8001264:	b25a      	sxtb	r2, r3
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2301      	movs	r3, #1
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	f107 030f 	add.w	r3, r7, #15
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	22f4      	movs	r2, #244	; 0xf4
 8001290:	21ec      	movs	r1, #236	; 0xec
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <BME280_Config+0x1a8>)
 8001294:	f002 fb84 	bl	80039a0 <HAL_I2C_Mem_Write>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <BME280_Config+0x16c>
	{
		return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e018      	b.n	80012d6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f001 fc41 	bl	8002b2c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f107 030e 	add.w	r3, r7, #14
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	22f4      	movs	r2, #244	; 0xf4
 80012be:	21ec      	movs	r1, #236	; 0xec
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <BME280_Config+0x1a8>)
 80012c2:	f002 fc67 	bl	8003b94 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d002      	beq.n	80012d4 <BME280_Config+0x19c>
	{
		return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e000      	b.n	80012d6 <BME280_Config+0x19e>
	}

	return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000114 	.word	0x20000114

080012e4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
	uint8_t RawData[8];
	int8_t ChipID[1];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, (0x76<<1), 0xD0, 1, ChipID, 1, 1000);
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22d0      	movs	r2, #208	; 0xd0
 80012fc:	21ec      	movs	r1, #236	; 0xec
 80012fe:	481b      	ldr	r0, [pc, #108]	; (800136c <BMEReadRaw+0x88>)
 8001300:	f002 fc48 	bl	8003b94 <HAL_I2C_Mem_Read>

	if (ChipID[0] == 0x60)
 8001304:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001308:	2b60      	cmp	r3, #96	; 0x60
 800130a:	d12b      	bne.n	8001364 <BMEReadRaw+0x80>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2308      	movs	r3, #8
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	22f7      	movs	r2, #247	; 0xf7
 8001320:	21ec      	movs	r1, #236	; 0xec
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <BMEReadRaw+0x88>)
 8001324:	f002 fc36 	bl	8003b94 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001328:	7a3b      	ldrb	r3, [r7, #8]
 800132a:	031a      	lsls	r2, r3, #12
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4313      	orrs	r3, r2
 8001332:	7aba      	ldrb	r2, [r7, #10]
 8001334:	0912      	lsrs	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	4313      	orrs	r3, r2
 800133a:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <BMEReadRaw+0x8c>)
 800133c:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	031a      	lsls	r2, r3, #12
 8001342:	7b3b      	ldrb	r3, [r7, #12]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4313      	orrs	r3, r2
 8001348:	7b7a      	ldrb	r2, [r7, #13]
 800134a:	0912      	lsrs	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	4313      	orrs	r3, r2
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <BMEReadRaw+0x90>)
 8001352:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4313      	orrs	r3, r2
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <BMEReadRaw+0x94>)
 800135e:	6013      	str	r3, [r2, #0]

		return 0;
 8001360:	2300      	movs	r3, #0
 8001362:	e7ff      	b.n	8001364 <BMEReadRaw+0x80>
	}

	//else return -1;
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000114 	.word	0x20000114
 8001370:	20000090 	.word	0x20000090
 8001374:	2000008c 	.word	0x2000008c
 8001378:	20000094 	.word	0x20000094

0800137c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	10da      	asrs	r2, r3, #3
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <BME280_compensate_T_int32+0x74>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <BME280_compensate_T_int32+0x78>)
 8001392:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	12db      	asrs	r3, r3, #11
 800139c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <BME280_compensate_T_int32+0x74>)
 80013a4:	8812      	ldrh	r2, [r2, #0]
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	1112      	asrs	r2, r2, #4
 80013ac:	4910      	ldr	r1, [pc, #64]	; (80013f0 <BME280_compensate_T_int32+0x74>)
 80013ae:	8809      	ldrh	r1, [r1, #0]
 80013b0:	1a52      	subs	r2, r2, r1
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	131b      	asrs	r3, r3, #12
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <BME280_compensate_T_int32+0x7c>)
 80013ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	139b      	asrs	r3, r3, #14
 80013c4:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <BME280_compensate_T_int32+0x80>)
 80013ce:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <BME280_compensate_T_int32+0x80>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3380      	adds	r3, #128	; 0x80
 80013dc:	121b      	asrs	r3, r3, #8
 80013de:	60fb      	str	r3, [r7, #12]
	return T;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000098 	.word	0x20000098
 80013f4:	200000a0 	.word	0x200000a0
 80013f8:	200000a2 	.word	0x200000a2
 80013fc:	200000bc 	.word	0x200000bc

08001400 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001404:	b0ca      	sub	sp, #296	; 0x128
 8001406:	af00      	add	r7, sp, #0
 8001408:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800140c:	4baf      	ldr	r3, [pc, #700]	; (80016cc <BME280_compensate_P_int64+0x2cc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	461c      	mov	r4, r3
 8001414:	4615      	mov	r5, r2
 8001416:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800141a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800141e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001422:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001426:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800142a:	fb03 f102 	mul.w	r1, r3, r2
 800142e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001432:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	18ca      	adds	r2, r1, r3
 800143c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001440:	fba3 8903 	umull	r8, r9, r3, r3
 8001444:	eb02 0309 	add.w	r3, r2, r9
 8001448:	4699      	mov	r9, r3
 800144a:	4ba1      	ldr	r3, [pc, #644]	; (80016d0 <BME280_compensate_P_int64+0x2d0>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	b21b      	sxth	r3, r3
 8001452:	17da      	asrs	r2, r3, #31
 8001454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001458:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800145c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001460:	4603      	mov	r3, r0
 8001462:	fb03 f209 	mul.w	r2, r3, r9
 8001466:	460b      	mov	r3, r1
 8001468:	fb08 f303 	mul.w	r3, r8, r3
 800146c:	4413      	add	r3, r2
 800146e:	4602      	mov	r2, r0
 8001470:	fba8 1202 	umull	r1, r2, r8, r2
 8001474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001478:	460a      	mov	r2, r1
 800147a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800147e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001482:	4413      	add	r3, r2
 8001484:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001488:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800148c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001490:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001494:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <BME280_compensate_P_int64+0x2d4>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	b21b      	sxth	r3, r3
 800149c:	17da      	asrs	r2, r3, #31
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014a2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80014a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014aa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014ae:	462a      	mov	r2, r5
 80014b0:	fb02 f203 	mul.w	r2, r2, r3
 80014b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014b8:	4621      	mov	r1, r4
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	441a      	add	r2, r3
 80014c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c4:	4621      	mov	r1, r4
 80014c6:	fba3 1301 	umull	r1, r3, r3, r1
 80014ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ce:	460b      	mov	r3, r1
 80014d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	f04f 0100 	mov.w	r1, #0
 80014e6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80014ea:	462b      	mov	r3, r5
 80014ec:	0459      	lsls	r1, r3, #17
 80014ee:	4623      	mov	r3, r4
 80014f0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80014f4:	4623      	mov	r3, r4
 80014f6:	0458      	lsls	r0, r3, #17
 80014f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014fc:	1814      	adds	r4, r2, r0
 80014fe:	643c      	str	r4, [r7, #64]	; 0x40
 8001500:	414b      	adcs	r3, r1
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
 8001504:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001508:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <BME280_compensate_P_int64+0x2d8>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b21b      	sxth	r3, r3
 8001514:	17da      	asrs	r2, r3, #31
 8001516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800151a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800151e:	f04f 0000 	mov.w	r0, #0
 8001522:	f04f 0100 	mov.w	r1, #0
 8001526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800152a:	00d9      	lsls	r1, r3, #3
 800152c:	2000      	movs	r0, #0
 800152e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001532:	1814      	adds	r4, r2, r0
 8001534:	63bc      	str	r4, [r7, #56]	; 0x38
 8001536:	414b      	adcs	r3, r1
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800153a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800153e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001542:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001546:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154a:	fb03 f102 	mul.w	r1, r3, r2
 800154e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	18ca      	adds	r2, r1, r3
 800155c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001560:	fba3 1303 	umull	r1, r3, r3, r3
 8001564:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001568:	460b      	mov	r3, r1
 800156a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800156e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001572:	18d3      	adds	r3, r2, r3
 8001574:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001578:	4b58      	ldr	r3, [pc, #352]	; (80016dc <BME280_compensate_P_int64+0x2dc>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800158a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800158e:	462b      	mov	r3, r5
 8001590:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001594:	4642      	mov	r2, r8
 8001596:	fb02 f203 	mul.w	r2, r2, r3
 800159a:	464b      	mov	r3, r9
 800159c:	4621      	mov	r1, r4
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	4622      	mov	r2, r4
 80015a6:	4641      	mov	r1, r8
 80015a8:	fba2 1201 	umull	r1, r2, r2, r1
 80015ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80015b0:	460a      	mov	r2, r1
 80015b2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015ba:	4413      	add	r3, r2
 80015bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015cc:	4623      	mov	r3, r4
 80015ce:	0a18      	lsrs	r0, r3, #8
 80015d0:	462b      	mov	r3, r5
 80015d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015d6:	462b      	mov	r3, r5
 80015d8:	1219      	asrs	r1, r3, #8
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <BME280_compensate_P_int64+0x2e0>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	17da      	asrs	r2, r3, #31
 80015e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80015f4:	464a      	mov	r2, r9
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015fe:	4644      	mov	r4, r8
 8001600:	fb04 f303 	mul.w	r3, r4, r3
 8001604:	441a      	add	r2, r3
 8001606:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160a:	4644      	mov	r4, r8
 800160c:	fba3 4304 	umull	r4, r3, r3, r4
 8001610:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001614:	4623      	mov	r3, r4
 8001616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800161a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800161e:	18d3      	adds	r3, r2, r3
 8001620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001630:	464c      	mov	r4, r9
 8001632:	0323      	lsls	r3, r4, #12
 8001634:	4644      	mov	r4, r8
 8001636:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800163a:	4644      	mov	r4, r8
 800163c:	0322      	lsls	r2, r4, #12
 800163e:	1884      	adds	r4, r0, r2
 8001640:	633c      	str	r4, [r7, #48]	; 0x30
 8001642:	eb41 0303 	adc.w	r3, r1, r3
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
 8001648:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800164c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001650:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001654:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001658:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800165c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <BME280_compensate_P_int64+0x2e4>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800166c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001670:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001674:	462b      	mov	r3, r5
 8001676:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800167a:	4642      	mov	r2, r8
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	464b      	mov	r3, r9
 8001682:	4621      	mov	r1, r4
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	4622      	mov	r2, r4
 800168c:	4641      	mov	r1, r8
 800168e:	fba2 1201 	umull	r1, r2, r2, r1
 8001692:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001696:	460a      	mov	r2, r1
 8001698:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800169c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80016b2:	4629      	mov	r1, r5
 80016b4:	104a      	asrs	r2, r1, #1
 80016b6:	4629      	mov	r1, r5
 80016b8:	17cb      	asrs	r3, r1, #31
 80016ba:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80016be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016c2:	4313      	orrs	r3, r2
 80016c4:	d110      	bne.n	80016e8 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80016c6:	2300      	movs	r3, #0
 80016c8:	e154      	b.n	8001974 <BME280_compensate_P_int64+0x574>
 80016ca:	bf00      	nop
 80016cc:	200000bc 	.word	0x200000bc
 80016d0:	200000ac 	.word	0x200000ac
 80016d4:	200000aa 	.word	0x200000aa
 80016d8:	200000a8 	.word	0x200000a8
 80016dc:	200000a6 	.word	0x200000a6
 80016e0:	200000a4 	.word	0x200000a4
 80016e4:	2000009a 	.word	0x2000009a
	}
	p = 1048576-adc_P;
 80016e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016ec:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016f0:	17da      	asrs	r2, r3, #31
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80016fa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80016fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001702:	105b      	asrs	r3, r3, #1
 8001704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001708:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800170c:	07db      	lsls	r3, r3, #31
 800170e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001712:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001716:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800171a:	4621      	mov	r1, r4
 800171c:	1a89      	subs	r1, r1, r2
 800171e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001720:	4629      	mov	r1, r5
 8001722:	eb61 0303 	sbc.w	r3, r1, r3
 8001726:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001728:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800172c:	4622      	mov	r2, r4
 800172e:	462b      	mov	r3, r5
 8001730:	1891      	adds	r1, r2, r2
 8001732:	6239      	str	r1, [r7, #32]
 8001734:	415b      	adcs	r3, r3
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800173c:	4621      	mov	r1, r4
 800173e:	1851      	adds	r1, r2, r1
 8001740:	61b9      	str	r1, [r7, #24]
 8001742:	4629      	mov	r1, r5
 8001744:	414b      	adcs	r3, r1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001754:	4649      	mov	r1, r9
 8001756:	018b      	lsls	r3, r1, #6
 8001758:	4641      	mov	r1, r8
 800175a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175e:	4641      	mov	r1, r8
 8001760:	018a      	lsls	r2, r1, #6
 8001762:	4641      	mov	r1, r8
 8001764:	1889      	adds	r1, r1, r2
 8001766:	6139      	str	r1, [r7, #16]
 8001768:	4649      	mov	r1, r9
 800176a:	eb43 0101 	adc.w	r1, r3, r1
 800176e:	6179      	str	r1, [r7, #20]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800177c:	4649      	mov	r1, r9
 800177e:	008b      	lsls	r3, r1, #2
 8001780:	4641      	mov	r1, r8
 8001782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001786:	4641      	mov	r1, r8
 8001788:	008a      	lsls	r2, r1, #2
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	4603      	mov	r3, r0
 8001790:	4622      	mov	r2, r4
 8001792:	189b      	adds	r3, r3, r2
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	460b      	mov	r3, r1
 8001798:	462a      	mov	r2, r5
 800179a:	eb42 0303 	adc.w	r3, r2, r3
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017ac:	4649      	mov	r1, r9
 80017ae:	008b      	lsls	r3, r1, #2
 80017b0:	4641      	mov	r1, r8
 80017b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017b6:	4641      	mov	r1, r8
 80017b8:	008a      	lsls	r2, r1, #2
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	4622      	mov	r2, r4
 80017c2:	189b      	adds	r3, r3, r2
 80017c4:	673b      	str	r3, [r7, #112]	; 0x70
 80017c6:	462b      	mov	r3, r5
 80017c8:	460a      	mov	r2, r1
 80017ca:	eb42 0303 	adc.w	r3, r2, r3
 80017ce:	677b      	str	r3, [r7, #116]	; 0x74
 80017d0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017d8:	f7ff f9fa 	bl	8000bd0 <__aeabi_ldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80017e4:	4b66      	ldr	r3, [pc, #408]	; (8001980 <BME280_compensate_P_int64+0x580>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	17da      	asrs	r2, r3, #31
 80017ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80017f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017f2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0b50      	lsrs	r0, r2, #13
 8001800:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001804:	1359      	asrs	r1, r3, #13
 8001806:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800180a:	462b      	mov	r3, r5
 800180c:	fb00 f203 	mul.w	r2, r0, r3
 8001810:	4623      	mov	r3, r4
 8001812:	fb03 f301 	mul.w	r3, r3, r1
 8001816:	4413      	add	r3, r2
 8001818:	4622      	mov	r2, r4
 800181a:	fba2 1200 	umull	r1, r2, r2, r0
 800181e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001822:	460a      	mov	r2, r1
 8001824:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001828:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800182c:	4413      	add	r3, r2
 800182e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001832:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0b50      	lsrs	r0, r2, #13
 8001840:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001844:	1359      	asrs	r1, r3, #13
 8001846:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800184a:	462b      	mov	r3, r5
 800184c:	fb00 f203 	mul.w	r2, r0, r3
 8001850:	4623      	mov	r3, r4
 8001852:	fb03 f301 	mul.w	r3, r3, r1
 8001856:	4413      	add	r3, r2
 8001858:	4622      	mov	r2, r4
 800185a:	fba2 1200 	umull	r1, r2, r2, r0
 800185e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001862:	460a      	mov	r2, r1
 8001864:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001868:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800186c:	4413      	add	r3, r2
 800186e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800187e:	4621      	mov	r1, r4
 8001880:	0e4a      	lsrs	r2, r1, #25
 8001882:	4629      	mov	r1, r5
 8001884:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001888:	4629      	mov	r1, r5
 800188a:	164b      	asrs	r3, r1, #25
 800188c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001890:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <BME280_compensate_P_int64+0x584>)
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	b21b      	sxth	r3, r3
 8001898:	17da      	asrs	r2, r3, #31
 800189a:	663b      	str	r3, [r7, #96]	; 0x60
 800189c:	667a      	str	r2, [r7, #100]	; 0x64
 800189e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018a6:	462a      	mov	r2, r5
 80018a8:	fb02 f203 	mul.w	r2, r2, r3
 80018ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018b0:	4621      	mov	r1, r4
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018bc:	4621      	mov	r1, r4
 80018be:	fba2 1201 	umull	r1, r2, r2, r1
 80018c2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80018c6:	460a      	mov	r2, r1
 80018c8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80018cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018d0:	4413      	add	r3, r2
 80018d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018e2:	4621      	mov	r1, r4
 80018e4:	0cca      	lsrs	r2, r1, #19
 80018e6:	4629      	mov	r1, r5
 80018e8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018ec:	4629      	mov	r1, r5
 80018ee:	14cb      	asrs	r3, r1, #19
 80018f0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80018f4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80018f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018fc:	1884      	adds	r4, r0, r2
 80018fe:	65bc      	str	r4, [r7, #88]	; 0x58
 8001900:	eb41 0303 	adc.w	r3, r1, r3
 8001904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001906:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800190a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800190e:	4621      	mov	r1, r4
 8001910:	1889      	adds	r1, r1, r2
 8001912:	6539      	str	r1, [r7, #80]	; 0x50
 8001914:	4629      	mov	r1, r5
 8001916:	eb43 0101 	adc.w	r1, r3, r1
 800191a:	6579      	str	r1, [r7, #84]	; 0x54
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001928:	4623      	mov	r3, r4
 800192a:	0a18      	lsrs	r0, r3, #8
 800192c:	462b      	mov	r3, r5
 800192e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001932:	462b      	mov	r3, r5
 8001934:	1219      	asrs	r1, r3, #8
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <BME280_compensate_P_int64+0x588>)
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	b21b      	sxth	r3, r3
 800193e:	17da      	asrs	r2, r3, #31
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
 8001942:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001950:	464c      	mov	r4, r9
 8001952:	0123      	lsls	r3, r4, #4
 8001954:	4644      	mov	r4, r8
 8001956:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800195a:	4644      	mov	r4, r8
 800195c:	0122      	lsls	r2, r4, #4
 800195e:	1884      	adds	r4, r0, r2
 8001960:	603c      	str	r4, [r7, #0]
 8001962:	eb41 0303 	adc.w	r3, r1, r3
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	e9d7 3400 	ldrd	r3, r4, [r7]
 800196c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001970:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001974:	4618      	mov	r0, r3
 8001976:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800197a:	46bd      	mov	sp, r7
 800197c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001980:	200000b2 	.word	0x200000b2
 8001984:	200000b0 	.word	0x200000b0
 8001988:	200000ae 	.word	0x200000ae

0800198c <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <bme280_compensate_H_int32+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800199c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	039a      	lsls	r2, r3, #14
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <bme280_compensate_H_int32+0xc0>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	051b      	lsls	r3, r3, #20
 80019aa:	1ad2      	subs	r2, r2, r3
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <bme280_compensate_H_int32+0xc4>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	4619      	mov	r1, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80019bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019c0:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <bme280_compensate_H_int32+0xc8>)
 80019c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019c8:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80019d0:	1292      	asrs	r2, r2, #10
 80019d2:	4921      	ldr	r1, [pc, #132]	; (8001a58 <bme280_compensate_H_int32+0xcc>)
 80019d4:	8809      	ldrh	r1, [r1, #0]
 80019d6:	4608      	mov	r0, r1
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	fb00 f101 	mul.w	r1, r0, r1
 80019de:	12c9      	asrs	r1, r1, #11
 80019e0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80019e4:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80019e8:	1292      	asrs	r2, r2, #10
 80019ea:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <bme280_compensate_H_int32+0xd0>)
 80019f0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80019f4:	fb01 f202 	mul.w	r2, r1, r2
 80019f8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 80019fc:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	13db      	asrs	r3, r3, #15
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	13d2      	asrs	r2, r2, #15
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <bme280_compensate_H_int32+0xd4>)
 8001a14:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a1a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a28:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a30:	bfa8      	it	ge
 8001a32:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a36:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	131b      	asrs	r3, r3, #12
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	200000bc 	.word	0x200000bc
 8001a4c:	200000b6 	.word	0x200000b6
 8001a50:	200000b8 	.word	0x200000b8
 8001a54:	200000ba 	.word	0x200000ba
 8001a58:	2000009e 	.word	0x2000009e
 8001a5c:	200000b4 	.word	0x200000b4
 8001a60:	2000009c 	.word	0x2000009c
 8001a64:	00000000 	.word	0x00000000

08001a68 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001a6c:	f7ff fc3a 	bl	80012e4 <BMEReadRaw>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d16c      	bne.n	8001b50 <BME280_Measure+0xe8>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001a76:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <BME280_Measure+0x110>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a7e:	d104      	bne.n	8001a8a <BME280_Measure+0x22>
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <BME280_Measure+0x114>)
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e016      	b.n	8001ab8 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <BME280_Measure+0x110>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fc74 	bl	800137c <BME280_compensate_T_int32>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd08 	bl	80004ac <__aeabi_i2d>
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <BME280_Measure+0x118>)
 8001aa2:	f7fe fe97 	bl	80007d4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f83f 	bl	8000b30 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <BME280_Measure+0x114>)
 8001ab6:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <BME280_Measure+0x11c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ac0:	d104      	bne.n	8001acc <BME280_Measure+0x64>
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <BME280_Measure+0x120>)
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e01f      	b.n	8001b0c <BME280_Measure+0xa4>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0 *0.01;  // as per datasheet, the pressure is x256
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <BME280_Measure+0x11c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fc95 	bl	8001400 <BME280_compensate_P_int64>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fcd7 	bl	800048c <__aeabi_ui2d>
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <BME280_Measure+0x124>)
 8001ae4:	f7fe fe76 	bl	80007d4 <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	a31f      	add	r3, pc, #124	; (adr r3, 8001b70 <BME280_Measure+0x108>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fd43 	bl	8000580 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f815 	bl	8000b30 <__aeabi_d2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <BME280_Measure+0x120>)
 8001b0a:	6013      	str	r3, [r2, #0]


#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <BME280_Measure+0x128>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b14:	d104      	bne.n	8001b20 <BME280_Measure+0xb8>
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <BME280_Measure+0x12c>)
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b1e:	e023      	b.n	8001b68 <BME280_Measure+0x100>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <BME280_Measure+0x128>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <bme280_compensate_H_int32>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcad 	bl	800048c <__aeabi_ui2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <BME280_Measure+0x130>)
 8001b38:	f7fe fe4c 	bl	80007d4 <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7fe fff4 	bl	8000b30 <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <BME280_Measure+0x12c>)
 8001b4c:	6013      	str	r3, [r2, #0]
}
 8001b4e:	e00b      	b.n	8001b68 <BME280_Measure+0x100>
		Temperature = Pressure = Humidity = 0;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <BME280_Measure+0x12c>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <BME280_Measure+0x12c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <BME280_Measure+0x120>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <BME280_Measure+0x120>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <BME280_Measure+0x114>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	f3af 8000 	nop.w
 8001b70:	47ae147b 	.word	0x47ae147b
 8001b74:	3f847ae1 	.word	0x3f847ae1
 8001b78:	2000008c 	.word	0x2000008c
 8001b7c:	20000228 	.word	0x20000228
 8001b80:	40590000 	.word	0x40590000
 8001b84:	20000090 	.word	0x20000090
 8001b88:	2000022c 	.word	0x2000022c
 8001b8c:	40700000 	.word	0x40700000
 8001b90:	20000094 	.word	0x20000094
 8001b94:	20000230 	.word	0x20000230
 8001b98:	40900000 	.word	0x40900000
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba8:	f000 ff4e 	bl	8002a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bac:	f000 fc82 	bl	80024b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb0:	f000 fd72 	bl	8002698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bb4:	f000 fcea 	bl	800258c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001bb8:	f000 fd44 	bl	8002644 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001bbc:	f000 fd14 	bl	80025e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  data = 0x00;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <main+0x88>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG,1, &data,1,HAL_MAX_DELAY);
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <main+0x88>)
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	226b      	movs	r2, #107	; 0x6b
 8001bd8:	21d0      	movs	r1, #208	; 0xd0
 8001bda:	4814      	ldr	r0, [pc, #80]	; (8001c2c <main+0x8c>)
 8001bdc:	f001 fee0 	bl	80039a0 <HAL_I2C_Mem_Write>
  data = 0x08;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <main+0x88>)
 8001be2:	2208      	movs	r2, #8
 8001be4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data,1,HAL_MAX_DELAY);
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <main+0x88>)
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	221b      	movs	r2, #27
 8001bf8:	21d0      	movs	r1, #208	; 0xd0
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <main+0x8c>)
 8001bfc:	f001 fed0 	bl	80039a0 <HAL_I2C_Mem_Write>
  data =0x10;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <main+0x88>)
 8001c02:	2210      	movs	r2, #16
 8001c04:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data,1, HAL_MAX_DELAY);
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <main+0x88>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	221c      	movs	r2, #28
 8001c18:	21d0      	movs	r1, #208	; 0xd0
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <main+0x8c>)
 8001c1c:	f001 fec0 	bl	80039a0 <HAL_I2C_Mem_Write>

  for(i=0;i<2000;i++)
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <main+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e07f      	b.n	8001d28 <main+0x188>
 8001c28:	200001ac 	.word	0x200001ac
 8001c2c:	200000c0 	.word	0x200000c0
 8001c30:	20000204 	.word	0x20000204
  {

	  elapsedtime2=(time2-prevtime2)*1000;
 8001c34:	4bba      	ldr	r3, [pc, #744]	; (8001f20 <main+0x380>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	4bba      	ldr	r3, [pc, #744]	; (8001f24 <main+0x384>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001f28 <main+0x388>
 8001c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4c:	4bb7      	ldr	r3, [pc, #732]	; (8001f2c <main+0x38c>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]

	  cuffer[0]=0x43;
 8001c52:	4bb7      	ldr	r3, [pc, #732]	; (8001f30 <main+0x390>)
 8001c54:	2243      	movs	r2, #67	; 0x43
 8001c56:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1,HAL_MAX_DELAY);
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4ab3      	ldr	r2, [pc, #716]	; (8001f30 <main+0x390>)
 8001c62:	21d0      	movs	r1, #208	; 0xd0
 8001c64:	48b3      	ldr	r0, [pc, #716]	; (8001f34 <main+0x394>)
 8001c66:	f001 fb77 	bl	8003358 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6,HAL_MAX_DELAY);
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2306      	movs	r3, #6
 8001c72:	4aaf      	ldr	r2, [pc, #700]	; (8001f30 <main+0x390>)
 8001c74:	21d0      	movs	r1, #208	; 0xd0
 8001c76:	48af      	ldr	r0, [pc, #700]	; (8001f34 <main+0x394>)
 8001c78:	f001 fc6c 	bl	8003554 <HAL_I2C_Master_Receive>

	  gyro_raw[0] = (cuffer[0]<<8 |cuffer[1]);
 8001c7c:	4bac      	ldr	r3, [pc, #688]	; (8001f30 <main+0x390>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4baa      	ldr	r3, [pc, #680]	; (8001f30 <main+0x390>)
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	4baa      	ldr	r3, [pc, #680]	; (8001f38 <main+0x398>)
 8001c90:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (cuffer[2]<<8 |cuffer[3]);
 8001c92:	4ba7      	ldr	r3, [pc, #668]	; (8001f30 <main+0x390>)
 8001c94:	789b      	ldrb	r3, [r3, #2]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4ba5      	ldr	r3, [pc, #660]	; (8001f30 <main+0x390>)
 8001c9c:	78db      	ldrb	r3, [r3, #3]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	4ba4      	ldr	r3, [pc, #656]	; (8001f38 <main+0x398>)
 8001ca6:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (cuffer[4]<<8 |cuffer[5]);
 8001ca8:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <main+0x390>)
 8001caa:	791b      	ldrb	r3, [r3, #4]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	4b9f      	ldr	r3, [pc, #636]	; (8001f30 <main+0x390>)
 8001cb2:	795b      	ldrb	r3, [r3, #5]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b9f      	ldr	r3, [pc, #636]	; (8001f38 <main+0x398>)
 8001cbc:	809a      	strh	r2, [r3, #4]

	  gyro_cal[0]  += gyro_raw[0];
 8001cbe:	4b9f      	ldr	r3, [pc, #636]	; (8001f3c <main+0x39c>)
 8001cc0:	ed93 7a00 	vldr	s14, [r3]
 8001cc4:	4b9c      	ldr	r3, [pc, #624]	; (8001f38 <main+0x398>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	4b99      	ldr	r3, [pc, #612]	; (8001f3c <main+0x39c>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
	  gyro_cal[1]  += gyro_raw[1];
 8001cdc:	4b97      	ldr	r3, [pc, #604]	; (8001f3c <main+0x39c>)
 8001cde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ce2:	4b95      	ldr	r3, [pc, #596]	; (8001f38 <main+0x398>)
 8001ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <main+0x39c>)
 8001cf6:	edc3 7a01 	vstr	s15, [r3, #4]
	  gyro_cal[2]  += gyro_raw[2];
 8001cfa:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <main+0x39c>)
 8001cfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d00:	4b8d      	ldr	r3, [pc, #564]	; (8001f38 <main+0x398>)
 8001d02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <main+0x39c>)
 8001d14:	edc3 7a02 	vstr	s15, [r3, #8]

	  HAL_Delay(3);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 ff07 	bl	8002b2c <HAL_Delay>
  for(i=0;i<2000;i++)
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <main+0x3a0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a86      	ldr	r2, [pc, #536]	; (8001f40 <main+0x3a0>)
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <main+0x3a0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d30:	db80      	blt.n	8001c34 <main+0x94>


  }

  gyro_cal[0] /=2000;
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <main+0x39c>)
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001f44 <main+0x3a4>
 8001d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d40:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <main+0x39c>)
 8001d42:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /=2000;
 8001d46:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <main+0x39c>)
 8001d48:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4c:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001f44 <main+0x3a4>
 8001d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <main+0x39c>)
 8001d56:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /=2000;
 8001d5a:	4b78      	ldr	r3, [pc, #480]	; (8001f3c <main+0x39c>)
 8001d5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d60:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001f44 <main+0x3a4>
 8001d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d68:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <main+0x39c>)
 8001d6a:	edc3 7a02 	vstr	s15, [r3, #8]

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d6e:	2120      	movs	r1, #32
 8001d70:	4875      	ldr	r0, [pc, #468]	; (8001f48 <main+0x3a8>)
 8001d72:	f001 f992 	bl	800309a <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8001d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d7a:	f000 fed7 	bl	8002b2c <HAL_Delay>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001d7e:	2304      	movs	r3, #4
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2303      	movs	r3, #3
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2105      	movs	r1, #5
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f7ff f9d3 	bl	8001138 <BME280_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BME280_Measure();
 8001d92:	f7ff fe69 	bl	8001a68 <BME280_Measure>
	 	  	  Altitude = 44330 * (1 - pow(Pressure/1013.25, (1/5.255)));
 8001d96:	4b6d      	ldr	r3, [pc, #436]	; (8001f4c <main+0x3ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb98 	bl	80004d0 <__aeabi_f2d>
 8001da0:	a357      	add	r3, pc, #348	; (adr r3, 8001f00 <main+0x360>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fd15 	bl	80007d4 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b17 	vmov	d7, r2, r3
 8001db2:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8001f08 <main+0x368>
 8001db6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dba:	eef0 0a67 	vmov.f32	s1, s15
 8001dbe:	f003 ff23 	bl	8005c08 <pow>
 8001dc2:	ec53 2b10 	vmov	r2, r3, d0
 8001dc6:	f04f 0000 	mov.w	r0, #0
 8001dca:	4961      	ldr	r1, [pc, #388]	; (8001f50 <main+0x3b0>)
 8001dcc:	f7fe fa20 	bl	8000210 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	a34d      	add	r3, pc, #308	; (adr r3, 8001f10 <main+0x370>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fbcf 	bl	8000580 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fea1 	bl	8000b30 <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <main+0x3b4>)
 8001df2:	6013      	str	r3, [r2, #0]
	 	  	  HAL_Delay (500);
 8001df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df8:	f000 fe98 	bl	8002b2c <HAL_Delay>

	  prevtime1 = time1;
 8001dfc:	4b56      	ldr	r3, [pc, #344]	; (8001f58 <main+0x3b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a56      	ldr	r2, [pc, #344]	; (8001f5c <main+0x3bc>)
 8001e02:	6013      	str	r3, [r2, #0]
	  time1 = HAL_GetTick();
 8001e04:	f000 fe86 	bl	8002b14 <HAL_GetTick>
 8001e08:	ee07 0a90 	vmov	s15, r0
 8001e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e10:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <main+0x3b8>)
 8001e12:	edc3 7a00 	vstr	s15, [r3]


	  tuffer[0]=0x3B;
 8001e16:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <main+0x3c0>)
 8001e18:	223b      	movs	r2, #59	; 0x3b
 8001e1a:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, tuffer, 1, HAL_MAX_DELAY);
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <main+0x3c0>)
 8001e26:	21d0      	movs	r1, #208	; 0xd0
 8001e28:	4842      	ldr	r0, [pc, #264]	; (8001f34 <main+0x394>)
 8001e2a:	f001 fa95 	bl	8003358 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, tuffer, 6, HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2306      	movs	r3, #6
 8001e36:	4a4a      	ldr	r2, [pc, #296]	; (8001f60 <main+0x3c0>)
 8001e38:	21d0      	movs	r1, #208	; 0xd0
 8001e3a:	483e      	ldr	r0, [pc, #248]	; (8001f34 <main+0x394>)
 8001e3c:	f001 fb8a 	bl	8003554 <HAL_I2C_Master_Receive>

	  acc_raw[0] =(tuffer[0]<<8 |tuffer[1]);
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <main+0x3c0>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	4b45      	ldr	r3, [pc, #276]	; (8001f60 <main+0x3c0>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <main+0x3c4>)
 8001e54:	801a      	strh	r2, [r3, #0]
	  acc_raw[1] =(tuffer[2]<<8 |tuffer[3]);
 8001e56:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <main+0x3c0>)
 8001e58:	789b      	ldrb	r3, [r3, #2]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <main+0x3c0>)
 8001e60:	78db      	ldrb	r3, [r3, #3]
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <main+0x3c4>)
 8001e6a:	805a      	strh	r2, [r3, #2]
	  acc_raw[2] =(tuffer[4]<<8 |tuffer[5]);
 8001e6c:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <main+0x3c0>)
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <main+0x3c0>)
 8001e76:	795b      	ldrb	r3, [r3, #5]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <main+0x3c4>)
 8001e80:	809a      	strh	r2, [r3, #4]

	  buffer[0] = 0x41;
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <main+0x3c8>)
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 1, HAL_MAX_DELAY);
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4a35      	ldr	r2, [pc, #212]	; (8001f68 <main+0x3c8>)
 8001e92:	21d0      	movs	r1, #208	; 0xd0
 8001e94:	4827      	ldr	r0, [pc, #156]	; (8001f34 <main+0x394>)
 8001e96:	f001 fa5f 	bl	8003358 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buffer, 2, HAL_MAX_DELAY);
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	4a31      	ldr	r2, [pc, #196]	; (8001f68 <main+0x3c8>)
 8001ea4:	21d0      	movs	r1, #208	; 0xd0
 8001ea6:	4823      	ldr	r0, [pc, #140]	; (8001f34 <main+0x394>)
 8001ea8:	f001 fb54 	bl	8003554 <HAL_I2C_Master_Receive>

	  raw_temp = (buffer[0] << 8 | buffer[1]);
 8001eac:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <main+0x3c8>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <main+0x3c8>)
 8001eb6:	785b      	ldrb	r3, [r3, #1]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <main+0x3cc>)
 8001ec0:	801a      	strh	r2, [r3, #0]
	  temp = (raw_temp /340.0) + 36.53;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <main+0x3cc>)
 8001ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe faef 	bl	80004ac <__aeabi_i2d>
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <main+0x3d0>)
 8001ed4:	f7fe fc7e 	bl	80007d4 <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	a30d      	add	r3, pc, #52	; (adr r3, 8001f18 <main+0x378>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe f995 	bl	8000214 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fe1d 	bl	8000b30 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <main+0x3d4>)
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e03c      	b.n	8001f78 <main+0x3d8>
 8001efe:	bf00      	nop
 8001f00:	00000000 	.word	0x00000000
 8001f04:	408faa00 	.word	0x408faa00
 8001f08:	ccd9456c 	.word	0xccd9456c
 8001f0c:	3fc85b95 	.word	0x3fc85b95
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40e5a540 	.word	0x40e5a540
 8001f18:	0a3d70a4 	.word	0x0a3d70a4
 8001f1c:	404243d7 	.word	0x404243d7
 8001f20:	2000021c 	.word	0x2000021c
 8001f24:	20000218 	.word	0x20000218
 8001f28:	447a0000 	.word	0x447a0000
 8001f2c:	20000220 	.word	0x20000220
 8001f30:	200001bc 	.word	0x200001bc
 8001f34:	200000c0 	.word	0x200000c0
 8001f38:	200001c4 	.word	0x200001c4
 8001f3c:	200001d4 	.word	0x200001d4
 8001f40:	20000204 	.word	0x20000204
 8001f44:	44fa0000 	.word	0x44fa0000
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	2000022c 	.word	0x2000022c
 8001f50:	3ff00000 	.word	0x3ff00000
 8001f54:	20000234 	.word	0x20000234
 8001f58:	20000210 	.word	0x20000210
 8001f5c:	2000020c 	.word	0x2000020c
 8001f60:	200001b4 	.word	0x200001b4
 8001f64:	200001cc 	.word	0x200001cc
 8001f68:	200001b0 	.word	0x200001b0
 8001f6c:	200001fc 	.word	0x200001fc
 8001f70:	40754000 	.word	0x40754000
 8001f74:	20000200 	.word	0x20000200



	  cuffer[0] = 0x43;
 8001f78:	4bc9      	ldr	r3, [pc, #804]	; (80022a0 <main+0x700>)
 8001f7a:	2243      	movs	r2, #67	; 0x43
 8001f7c:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY);
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	4ac6      	ldr	r2, [pc, #792]	; (80022a0 <main+0x700>)
 8001f88:	21d0      	movs	r1, #208	; 0xd0
 8001f8a:	48c6      	ldr	r0, [pc, #792]	; (80022a4 <main+0x704>)
 8001f8c:	f001 f9e4 	bl	8003358 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY);
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2306      	movs	r3, #6
 8001f98:	4ac1      	ldr	r2, [pc, #772]	; (80022a0 <main+0x700>)
 8001f9a:	21d0      	movs	r1, #208	; 0xd0
 8001f9c:	48c1      	ldr	r0, [pc, #772]	; (80022a4 <main+0x704>)
 8001f9e:	f001 fad9 	bl	8003554 <HAL_I2C_Master_Receive>
	  gyro_raw[0] =(cuffer[0]<<8 |cuffer[1]);
 8001fa2:	4bbf      	ldr	r3, [pc, #764]	; (80022a0 <main+0x700>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	4bbd      	ldr	r3, [pc, #756]	; (80022a0 <main+0x700>)
 8001fac:	785b      	ldrb	r3, [r3, #1]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	4bbc      	ldr	r3, [pc, #752]	; (80022a8 <main+0x708>)
 8001fb6:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] =(cuffer[2]<<8 |cuffer[3]);
 8001fb8:	4bb9      	ldr	r3, [pc, #740]	; (80022a0 <main+0x700>)
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	4bb7      	ldr	r3, [pc, #732]	; (80022a0 <main+0x700>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4bb7      	ldr	r3, [pc, #732]	; (80022a8 <main+0x708>)
 8001fcc:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] =(cuffer[4]<<8 |cuffer[5]);
 8001fce:	4bb4      	ldr	r3, [pc, #720]	; (80022a0 <main+0x700>)
 8001fd0:	791b      	ldrb	r3, [r3, #4]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	4bb2      	ldr	r3, [pc, #712]	; (80022a0 <main+0x700>)
 8001fd8:	795b      	ldrb	r3, [r3, #5]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	4bb1      	ldr	r3, [pc, #708]	; (80022a8 <main+0x708>)
 8001fe2:	809a      	strh	r2, [r3, #4]

	  gyro_raw[0] -= gyro_cal[0];
 8001fe4:	4bb0      	ldr	r3, [pc, #704]	; (80022a8 <main+0x708>)
 8001fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff2:	4bae      	ldr	r3, [pc, #696]	; (80022ac <main+0x70c>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	b21a      	sxth	r2, r3
 8002006:	4ba8      	ldr	r3, [pc, #672]	; (80022a8 <main+0x708>)
 8002008:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] -= gyro_cal[1];
 800200a:	4ba7      	ldr	r3, [pc, #668]	; (80022a8 <main+0x708>)
 800200c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	4ba4      	ldr	r3, [pc, #656]	; (80022ac <main+0x70c>)
 800201a:	edd3 7a01 	vldr	s15, [r3, #4]
 800201e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002026:	ee17 3a90 	vmov	r3, s15
 800202a:	b21a      	sxth	r2, r3
 800202c:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <main+0x708>)
 800202e:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] -= gyro_cal[2];
 8002030:	4b9d      	ldr	r3, [pc, #628]	; (80022a8 <main+0x708>)
 8002032:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203e:	4b9b      	ldr	r3, [pc, #620]	; (80022ac <main+0x70c>)
 8002040:	edd3 7a02 	vldr	s15, [r3, #8]
 8002044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	ee17 3a90 	vmov	r3, s15
 8002050:	b21a      	sxth	r2, r3
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <main+0x708>)
 8002054:	809a      	strh	r2, [r3, #4]
	  prevtime = HAL_GetTick();
 8002056:	f000 fd5d 	bl	8002b14 <HAL_GetTick>
 800205a:	ee07 0a90 	vmov	s15, r0
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <main+0x710>)
 8002064:	edc3 7a00 	vstr	s15, [r3]


	  angle_pitch_gyro += gyro_raw[0]* 0.0000611;//x ekseni
 8002068:	4b92      	ldr	r3, [pc, #584]	; (80022b4 <main+0x714>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa2f 	bl	80004d0 <__aeabi_f2d>
 8002072:	4604      	mov	r4, r0
 8002074:	460d      	mov	r5, r1
 8002076:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <main+0x708>)
 8002078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa15 	bl	80004ac <__aeabi_i2d>
 8002082:	a381      	add	r3, pc, #516	; (adr r3, 8002288 <main+0x6e8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fa7a 	bl	8000580 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe f8be 	bl	8000214 <__adddf3>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd46 	bl	8000b30 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <main+0x714>)
 80020a8:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro += gyro_raw[1]* 0.0000611;//y ekseni
 80020aa:	4b83      	ldr	r3, [pc, #524]	; (80022b8 <main+0x718>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa0e 	bl	80004d0 <__aeabi_f2d>
 80020b4:	4604      	mov	r4, r0
 80020b6:	460d      	mov	r5, r1
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <main+0x708>)
 80020ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9f4 	bl	80004ac <__aeabi_i2d>
 80020c4:	a370      	add	r3, pc, #448	; (adr r3, 8002288 <main+0x6e8>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe fa59 	bl	8000580 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4620      	mov	r0, r4
 80020d4:	4629      	mov	r1, r5
 80020d6:	f7fe f89d 	bl	8000214 <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd25 	bl	8000b30 <__aeabi_d2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a73      	ldr	r2, [pc, #460]	; (80022b8 <main+0x718>)
 80020ea:	6013      	str	r3, [r2, #0]

	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2]* 0.000001066);
 80020ec:	4b71      	ldr	r3, [pc, #452]	; (80022b4 <main+0x714>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f9ed 	bl	80004d0 <__aeabi_f2d>
 80020f6:	4604      	mov	r4, r0
 80020f8:	460d      	mov	r5, r1
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <main+0x718>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe f9e6 	bl	80004d0 <__aeabi_f2d>
 8002104:	4680      	mov	r8, r0
 8002106:	4689      	mov	r9, r1
 8002108:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <main+0x708>)
 800210a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f9cc 	bl	80004ac <__aeabi_i2d>
 8002114:	a35e      	add	r3, pc, #376	; (adr r3, 8002290 <main+0x6f0>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fa31 	bl	8000580 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	ec43 2b17 	vmov	d7, r2, r3
 8002126:	eeb0 0a47 	vmov.f32	s0, s14
 800212a:	eef0 0a67 	vmov.f32	s1, s15
 800212e:	f003 fcdf 	bl	8005af0 <sin>
 8002132:	ec53 2b10 	vmov	r2, r3, d0
 8002136:	4640      	mov	r0, r8
 8002138:	4649      	mov	r1, r9
 800213a:	f7fe fa21 	bl	8000580 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe f865 	bl	8000214 <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fced 	bl	8000b30 <__aeabi_d2f>
 8002156:	4603      	mov	r3, r0
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <main+0x714>)
 800215a:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2]* 0.000001066);
 800215c:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <main+0x718>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f9b5 	bl	80004d0 <__aeabi_f2d>
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
 800216a:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <main+0x714>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f9ae 	bl	80004d0 <__aeabi_f2d>
 8002174:	4680      	mov	r8, r0
 8002176:	4689      	mov	r9, r1
 8002178:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <main+0x708>)
 800217a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f994 	bl	80004ac <__aeabi_i2d>
 8002184:	a342      	add	r3, pc, #264	; (adr r3, 8002290 <main+0x6f0>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe f9f9 	bl	8000580 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	ec43 2b17 	vmov	d7, r2, r3
 8002196:	eeb0 0a47 	vmov.f32	s0, s14
 800219a:	eef0 0a67 	vmov.f32	s1, s15
 800219e:	f003 fca7 	bl	8005af0 <sin>
 80021a2:	ec53 2b10 	vmov	r2, r3, d0
 80021a6:	4640      	mov	r0, r8
 80021a8:	4649      	mov	r1, r9
 80021aa:	f7fe f9e9 	bl	8000580 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fe f82b 	bl	8000210 <__aeabi_dsub>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fcb5 	bl	8000b30 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <main+0x718>)
 80021ca:	6013      	str	r3, [r2, #0]

	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 80021cc:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <main+0x71c>)
 80021ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <main+0x71c>)
 80021d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021da:	fb03 f202 	mul.w	r2, r3, r2
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <main+0x71c>)
 80021e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021e4:	4619      	mov	r1, r3
 80021e6:	4b35      	ldr	r3, [pc, #212]	; (80022bc <main+0x71c>)
 80021e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	441a      	add	r2, r3
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <main+0x71c>)
 80021f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <main+0x71c>)
 80021fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f950 	bl	80004ac <__aeabi_i2d>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	ec43 2b10 	vmov	d0, r2, r3
 8002214:	f003 fd68 	bl	8005ce8 <sqrt>
 8002218:	ec53 2b10 	vmov	r2, r3, d0
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fc5e 	bl	8000ae0 <__aeabi_d2iz>
 8002224:	4603      	mov	r3, r0
 8002226:	b21a      	sxth	r2, r3
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <main+0x720>)
 800222a:	801a      	strh	r2, [r3, #0]


	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)*57.296;
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <main+0x71c>)
 800222e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <main+0x720>)
 800223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800224c:	ee16 0a90 	vmov	r0, s13
 8002250:	f7fe f93e 	bl	80004d0 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	ec43 2b10 	vmov	d0, r2, r3
 800225c:	f003 fca0 	bl	8005ba0 <asin>
 8002260:	ec51 0b10 	vmov	r0, r1, d0
 8002264:	a30c      	add	r3, pc, #48	; (adr r3, 8002298 <main+0x6f8>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe f989 	bl	8000580 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fc5b 	bl	8000b30 <__aeabi_d2f>
 800227a:	4603      	mov	r3, r0
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <main+0x724>)
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e022      	b.n	80022c8 <main+0x728>
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	01d41596 	.word	0x01d41596
 800228c:	3f10045a 	.word	0x3f10045a
 8002290:	652c6e62 	.word	0x652c6e62
 8002294:	3eb1e26f 	.word	0x3eb1e26f
 8002298:	53f7ced9 	.word	0x53f7ced9
 800229c:	404ca5e3 	.word	0x404ca5e3
 80022a0:	200001bc 	.word	0x200001bc
 80022a4:	200000c0 	.word	0x200000c0
 80022a8:	200001c4 	.word	0x200001c4
 80022ac:	200001d4 	.word	0x200001d4
 80022b0:	20000208 	.word	0x20000208
 80022b4:	200001e4 	.word	0x200001e4
 80022b8:	200001e8 	.word	0x200001e8
 80022bc:	200001cc 	.word	0x200001cc
 80022c0:	200001e0 	.word	0x200001e0
 80022c4:	200001ec 	.word	0x200001ec
	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)*-57.296;
 80022c8:	4b69      	ldr	r3, [pc, #420]	; (8002470 <main+0x8d0>)
 80022ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <main+0x8d4>)
 80022d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022e8:	ee16 0a90 	vmov	r0, s13
 80022ec:	f7fe f8f0 	bl	80004d0 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	ec43 2b10 	vmov	d0, r2, r3
 80022f8:	f003 fc52 	bl	8005ba0 <asin>
 80022fc:	ec51 0b10 	vmov	r0, r1, d0
 8002300:	a355      	add	r3, pc, #340	; (adr r3, 8002458 <main+0x8b8>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe f93b 	bl	8000580 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fc0d 	bl	8000b30 <__aeabi_d2f>
 8002316:	4603      	mov	r3, r0
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <main+0x8d8>)
 800231a:	6013      	str	r3, [r2, #0]

	  angle_pitch_acc -= 0.00; //**************************************x eksenini ELLE KALİBRE ETMEK İÇİN BURAYI KULLAN
 800231c:	4b57      	ldr	r3, [pc, #348]	; (800247c <main+0x8dc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a56      	ldr	r2, [pc, #344]	; (800247c <main+0x8dc>)
 8002322:	6013      	str	r3, [r2, #0]
	  angle_roll_acc -= 0.00;  //**************************************y ekseni İÇİN BURAYI
 8002324:	4b54      	ldr	r3, [pc, #336]	; (8002478 <main+0x8d8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a53      	ldr	r2, [pc, #332]	; (8002478 <main+0x8d8>)
 800232a:	6013      	str	r3, [r2, #0]


	  if(set_gyro)
 800232c:	4b54      	ldr	r3, [pc, #336]	; (8002480 <main+0x8e0>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d04e      	beq.n	80023d2 <main+0x832>
	  {
		  angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <main+0x8e4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f8c9 	bl	80004d0 <__aeabi_f2d>
 800233e:	a348      	add	r3, pc, #288	; (adr r3, 8002460 <main+0x8c0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f91c 	bl	8000580 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4614      	mov	r4, r2
 800234e:	461d      	mov	r5, r3
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <main+0x8dc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8bb 	bl	80004d0 <__aeabi_f2d>
 800235a:	a343      	add	r3, pc, #268	; (adr r3, 8002468 <main+0x8c8>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe f90e 	bl	8000580 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4620      	mov	r0, r4
 800236a:	4629      	mov	r1, r5
 800236c:	f7fd ff52 	bl	8000214 <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f7fe fbda 	bl	8000b30 <__aeabi_d2f>
 800237c:	4603      	mov	r3, r0
 800237e:	4a42      	ldr	r2, [pc, #264]	; (8002488 <main+0x8e8>)
 8002380:	6013      	str	r3, [r2, #0]
		  angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <main+0x8ec>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8a2 	bl	80004d0 <__aeabi_f2d>
 800238c:	a334      	add	r3, pc, #208	; (adr r3, 8002460 <main+0x8c0>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe f8f5 	bl	8000580 <__aeabi_dmul>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	4b36      	ldr	r3, [pc, #216]	; (8002478 <main+0x8d8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f894 	bl	80004d0 <__aeabi_f2d>
 80023a8:	a32f      	add	r3, pc, #188	; (adr r3, 8002468 <main+0x8c8>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f7fe f8e7 	bl	8000580 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fd ff2b 	bl	8000214 <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fbb3 	bl	8000b30 <__aeabi_d2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a30      	ldr	r2, [pc, #192]	; (8002490 <main+0x8f0>)
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e006      	b.n	80023e0 <main+0x840>
	  }

	  else
	  {
		  angle_pitch = angle_pitch_acc;
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <main+0x8dc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <main+0x8e8>)
 80023d8:	6013      	str	r3, [r2, #0]
		  set_gyro = true;
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <main+0x8e0>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
	  }
	  elapsedtime1=(time1-prevtime1)*1000;
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <main+0x8f4>)
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <main+0x8f8>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800249c <main+0x8fc>
 80023f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <main+0x900>)
 80023fa:	edc3 7a00 	vstr	s15, [r3]

	  while((HAL_GetTick() - prevtime)*1000< 4000);
 80023fe:	bf00      	nop
 8002400:	f000 fb88 	bl	8002b14 <HAL_GetTick>
 8002404:	ee07 0a90 	vmov	s15, r0
 8002408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <main+0x904>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002416:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800249c <main+0x8fc>
 800241a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80024a8 <main+0x908>
 8002422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	d4e9      	bmi.n	8002400 <main+0x860>



	  if(angle_roll_gyro>45)
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <main+0x8ec>)
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80024ac <main+0x90c>
 8002436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	dd05      	ble.n	800244c <main+0x8ac>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8002440:	2201      	movs	r2, #1
 8002442:	2140      	movs	r1, #64	; 0x40
 8002444:	481a      	ldr	r0, [pc, #104]	; (80024b0 <main+0x910>)
 8002446:	f000 fe0f 	bl	8003068 <HAL_GPIO_WritePin>
 800244a:	e4a2      	b.n	8001d92 <main+0x1f2>

	  }

	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	4817      	ldr	r0, [pc, #92]	; (80024b0 <main+0x910>)
 8002452:	f000 fe09 	bl	8003068 <HAL_GPIO_WritePin>
	  BME280_Measure();
 8002456:	e49c      	b.n	8001d92 <main+0x1f2>
 8002458:	53f7ced9 	.word	0x53f7ced9
 800245c:	c04ca5e3 	.word	0xc04ca5e3
 8002460:	23a29c78 	.word	0x23a29c78
 8002464:	3feffcb9 	.word	0x3feffcb9
 8002468:	eb1c432d 	.word	0xeb1c432d
 800246c:	3f3a36e2 	.word	0x3f3a36e2
 8002470:	200001cc 	.word	0x200001cc
 8002474:	200001e0 	.word	0x200001e0
 8002478:	200001f0 	.word	0x200001f0
 800247c:	200001ec 	.word	0x200001ec
 8002480:	20000224 	.word	0x20000224
 8002484:	200001e4 	.word	0x200001e4
 8002488:	200001f4 	.word	0x200001f4
 800248c:	200001e8 	.word	0x200001e8
 8002490:	200001f8 	.word	0x200001f8
 8002494:	20000210 	.word	0x20000210
 8002498:	2000020c 	.word	0x2000020c
 800249c:	447a0000 	.word	0x447a0000
 80024a0:	20000214 	.word	0x20000214
 80024a4:	20000208 	.word	0x20000208
 80024a8:	457a0000 	.word	0x457a0000
 80024ac:	42340000 	.word	0x42340000
 80024b0:	40020000 	.word	0x40020000

080024b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b094      	sub	sp, #80	; 0x50
 80024b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	2234      	movs	r2, #52	; 0x34
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fb0c 	bl	8005ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <SystemClock_Config+0xd0>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4a28      	ldr	r2, [pc, #160]	; (8002584 <SystemClock_Config+0xd0>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6413      	str	r3, [r2, #64]	; 0x40
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <SystemClock_Config+0xd0>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024f4:	2300      	movs	r3, #0
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <SystemClock_Config+0xd4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002500:	4a21      	ldr	r2, [pc, #132]	; (8002588 <SystemClock_Config+0xd4>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <SystemClock_Config+0xd4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002514:	2302      	movs	r3, #2
 8002516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002518:	2301      	movs	r3, #1
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800251c:	2310      	movs	r3, #16
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002520:	2302      	movs	r3, #2
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002524:	2300      	movs	r3, #0
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002528:	2308      	movs	r3, #8
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 800252c:	2340      	movs	r3, #64	; 0x40
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002530:	2302      	movs	r3, #2
 8002532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002534:	2302      	movs	r3, #2
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002538:	2302      	movs	r3, #2
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fd43 	bl	8004fcc <HAL_RCC_OscConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800254c:	f000 f902 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002550:	230f      	movs	r3, #15
 8002552:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002554:	2302      	movs	r3, #2
 8002556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002560:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	2101      	movs	r1, #1
 800256c:	4618      	mov	r0, r3
 800256e:	f002 f9e3 	bl	8004938 <HAL_RCC_ClockConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002578:	f000 f8ec 	bl	8002754 <Error_Handler>
  }
}
 800257c:	bf00      	nop
 800257e:	3750      	adds	r7, #80	; 0x50
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000

0800258c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <MX_I2C1_Init+0x50>)
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <MX_I2C1_Init+0x54>)
 8002594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_I2C1_Init+0x50>)
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <MX_I2C1_Init+0x58>)
 800259a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_I2C1_Init+0x50>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_I2C1_Init+0x50>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_I2C1_Init+0x50>)
 80025aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <MX_I2C1_Init+0x50>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_I2C1_Init+0x50>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_I2C1_Init+0x50>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_I2C1_Init+0x50>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_I2C1_Init+0x50>)
 80025ca:	f000 fd81 	bl	80030d0 <HAL_I2C_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025d4:	f000 f8be 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200000c0 	.word	0x200000c0
 80025e0:	40005400 	.word	0x40005400
 80025e4:	00061a80 	.word	0x00061a80

080025e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <MX_I2C2_Init+0x50>)
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <MX_I2C2_Init+0x54>)
 80025f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_I2C2_Init+0x50>)
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <MX_I2C2_Init+0x58>)
 80025f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_I2C2_Init+0x50>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_I2C2_Init+0x50>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_I2C2_Init+0x50>)
 8002606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800260a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <MX_I2C2_Init+0x50>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_I2C2_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <MX_I2C2_Init+0x50>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_I2C2_Init+0x50>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <MX_I2C2_Init+0x50>)
 8002626:	f000 fd53 	bl	80030d0 <HAL_I2C_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002630:	f000 f890 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000114 	.word	0x20000114
 800263c:	40005800 	.word	0x40005800
 8002640:	000186a0 	.word	0x000186a0

08002644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <MX_USART2_UART_Init+0x50>)
 800264c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 8002650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_USART2_UART_Init+0x4c>)
 800267c:	f002 ff44 	bl	8005508 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002686:	f000 f865 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000168 	.word	0x20000168
 8002694:	40004400 	.word	0x40004400

08002698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <MX_GPIO_Init+0xb4>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a25      	ldr	r2, [pc, #148]	; (800274c <MX_GPIO_Init+0xb4>)
 80026b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <MX_GPIO_Init+0xb4>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <MX_GPIO_Init+0xb4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <MX_GPIO_Init+0xb4>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <MX_GPIO_Init+0xb4>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <MX_GPIO_Init+0xb4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <MX_GPIO_Init+0xb4>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <MX_GPIO_Init+0xb4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_GPIO_Init+0xb4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <MX_GPIO_Init+0xb4>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_GPIO_Init+0xb4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	2120      	movs	r1, #32
 8002722:	480b      	ldr	r0, [pc, #44]	; (8002750 <MX_GPIO_Init+0xb8>)
 8002724:	f000 fca0 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002728:	2320      	movs	r3, #32
 800272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272c:	2301      	movs	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4804      	ldr	r0, [pc, #16]	; (8002750 <MX_GPIO_Init+0xb8>)
 8002740:	f000 fafe 	bl	8002d40 <HAL_GPIO_Init>

}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <HAL_MspInit+0x4c>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_MspInit+0x4c>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_MspInit+0x4c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800279e:	2007      	movs	r0, #7
 80027a0:	f000 fa9a 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a42      	ldr	r2, [pc, #264]	; (80028d8 <HAL_I2C_MspInit+0x128>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12c      	bne.n	800282c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a40      	ldr	r2, [pc, #256]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ee:	23c0      	movs	r3, #192	; 0xc0
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f2:	2312      	movs	r3, #18
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027fe:	2304      	movs	r3, #4
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4835      	ldr	r0, [pc, #212]	; (80028e0 <HAL_I2C_MspInit+0x130>)
 800280a:	f000 fa99 	bl	8002d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800282a:	e050      	b.n	80028ce <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <HAL_I2C_MspInit+0x134>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d14b      	bne.n	80028ce <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a27      	ldr	r2, [pc, #156]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800286e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002874:	2312      	movs	r3, #18
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002880:	2304      	movs	r3, #4
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4815      	ldr	r0, [pc, #84]	; (80028e0 <HAL_I2C_MspInit+0x130>)
 800288c:	f000 fa58 	bl	8002d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002896:	2312      	movs	r3, #18
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028a2:	2304      	movs	r3, #4
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	480e      	ldr	r0, [pc, #56]	; (80028e8 <HAL_I2C_MspInit+0x138>)
 80028ae:	f000 fa47 	bl	8002d40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 80028bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_I2C_MspInit+0x12c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
}
 80028ce:	bf00      	nop
 80028d0:	3730      	adds	r7, #48	; 0x30
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40005400 	.word	0x40005400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40005800 	.word	0x40005800
 80028e8:	40020800 	.word	0x40020800

080028ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_UART_MspInit+0x84>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d12b      	bne.n	8002966 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_UART_MspInit+0x88>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002946:	230c      	movs	r3, #12
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002956:	2307      	movs	r3, #7
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	; (8002978 <HAL_UART_MspInit+0x8c>)
 8002962:	f000 f9ed 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40004400 	.word	0x40004400
 8002974:	40023800 	.word	0x40023800
 8002978:	40020000 	.word	0x40020000

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 f890 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <SystemInit+0x20>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <SystemInit+0x20>)
 80029dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f8:	480d      	ldr	r0, [pc, #52]	; (8002a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029fa:	490e      	ldr	r1, [pc, #56]	; (8002a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a00:	e002      	b.n	8002a08 <LoopCopyDataInit>

08002a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a06:	3304      	adds	r3, #4

08002a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a0c:	d3f9      	bcc.n	8002a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a10:	4c0b      	ldr	r4, [pc, #44]	; (8002a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a14:	e001      	b.n	8002a1a <LoopFillZerobss>

08002a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a18:	3204      	adds	r2, #4

08002a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a1c:	d3fb      	bcc.n	8002a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a1e:	f7ff ffd7 	bl	80029d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a22:	f003 f839 	bl	8005a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a26:	f7ff f8bb 	bl	8001ba0 <main>
  bx  lr    
 8002a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002a38:	08007ff0 	.word	0x08007ff0
  ldr r2, =_sbss
 8002a3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002a40:	2000023c 	.word	0x2000023c

08002a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <ADC_IRQHandler>
	...

08002a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_Init+0x40>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <HAL_Init+0x40>)
 8002a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_Init+0x40>)
 8002a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_Init+0x40>)
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a70:	2003      	movs	r0, #3
 8002a72:	f000 f931 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f000 f808 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7c:	f7ff fe70 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f93b 	bl	8002d26 <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f000 f911 	bl	8002cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_IncTick+0x20>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_IncTick+0x24>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_IncTick+0x24>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000008 	.word	0x20000008
 8002b10:	20000238 	.word	0x20000238

08002b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return uwTick;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_GetTick+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000238 	.word	0x20000238

08002b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff ffee 	bl	8002b14 <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d005      	beq.n	8002b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_Delay+0x44>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b52:	bf00      	nop
 8002b54:	f7ff ffde 	bl	8002b14 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8f7      	bhi.n	8002b54 <HAL_Delay+0x28>
  {
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000008 	.word	0x20000008

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	; (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca4:	d301      	bcc.n	8002caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00f      	b.n	8002cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <SysTick_Config+0x40>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f7ff ff8e 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <SysTick_Config+0x40>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <SysTick_Config+0x40>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010

08002cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff47 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff5c 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff8e 	bl	8002c2c <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5d 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffb0 	bl	8002c94 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e165      	b.n	8003028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f040 8154 	bne.w	8003022 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d005      	beq.n	8002d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d130      	bne.n	8002df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d017      	beq.n	8002e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d123      	bne.n	8002e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80ae 	beq.w	8003022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_GPIO_Init+0x300>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a5c      	ldr	r2, [pc, #368]	; (8003040 <HAL_GPIO_Init+0x300>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_GPIO_Init+0x300>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee2:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_GPIO_Init+0x304>)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_GPIO_Init+0x308>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x21a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4e      	ldr	r2, [pc, #312]	; (800304c <HAL_GPIO_Init+0x30c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x216>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_GPIO_Init+0x310>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x212>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_GPIO_Init+0x314>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x20e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_GPIO_Init+0x318>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x20a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_GPIO_Init+0x31c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x206>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a49      	ldr	r2, [pc, #292]	; (8003060 <HAL_GPIO_Init+0x320>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x202>
 8002f3e:	2306      	movs	r3, #6
 8002f40:	e00c      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f42:	2307      	movs	r3, #7
 8002f44:	e00a      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f46:	2305      	movs	r3, #5
 8002f48:	e008      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e004      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_GPIO_Init+0x21c>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f002 0203 	and.w	r2, r2, #3
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	4093      	lsls	r3, r2
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6c:	4935      	ldr	r1, [pc, #212]	; (8003044 <HAL_GPIO_Init+0x304>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9e:	4a31      	ldr	r2, [pc, #196]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc8:	4a26      	ldr	r2, [pc, #152]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fce:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_GPIO_Init+0x324>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3301      	adds	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	f67f ae96 	bls.w	8002d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40013800 	.word	0x40013800
 8003048:	40020000 	.word	0x40020000
 800304c:	40020400 	.word	0x40020400
 8003050:	40020800 	.word	0x40020800
 8003054:	40020c00 	.word	0x40020c00
 8003058:	40021000 	.word	0x40021000
 800305c:	40021400 	.word	0x40021400
 8003060:	40021800 	.word	0x40021800
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fb5a 	bl	80027b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f001 fcf2 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	; (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	817b      	strh	r3, [r7, #10]
 8003368:	4613      	mov	r3, r2
 800336a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7ff fbd2 	bl	8002b14 <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	f040 80e0 	bne.w	8003540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2319      	movs	r3, #25
 8003386:	2201      	movs	r2, #1
 8003388:	4970      	ldr	r1, [pc, #448]	; (800354c <HAL_I2C_Master_Transmit+0x1f4>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f001 f8f6 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	e0d3      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x50>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e0cc      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d007      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2221      	movs	r2, #33	; 0x21
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2210      	movs	r2, #16
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	893a      	ldrh	r2, [r7, #8]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a50      	ldr	r2, [pc, #320]	; (8003550 <HAL_I2C_Master_Transmit+0x1f8>)
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003410:	8979      	ldrh	r1, [r7, #10]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fde2 	bl	8003fe0 <I2C_MasterRequestWrite>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08d      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800343c:	e066      	b.n	800350c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6a39      	ldr	r1, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f001 f970 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06b      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11b      	bne.n	80034e0 <HAL_I2C_Master_Transmit+0x188>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	6a39      	ldr	r1, [r7, #32]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f001 f960 	bl	80047aa <I2C_WaitOnBTFFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e01a      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d194      	bne.n	800343e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	; 0x30
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
 8003564:	4613      	mov	r3, r2
 8003566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff fad4 	bl	8002b14 <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	f040 820b 	bne.w	8003992 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2319      	movs	r3, #25
 8003582:	2201      	movs	r2, #1
 8003584:	497c      	ldr	r1, [pc, #496]	; (8003778 <HAL_I2C_Master_Receive+0x224>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fff8 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	e1fe      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_I2C_Master_Receive+0x50>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e1f7      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d007      	beq.n	80035ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2222      	movs	r2, #34	; 0x22
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2210      	movs	r2, #16
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a5c      	ldr	r2, [pc, #368]	; (800377c <HAL_I2C_Master_Receive+0x228>)
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fd66 	bl	80040e4 <I2C_MasterRequestRead>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1b8      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e18c      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	2b01      	cmp	r3, #1
 8003658:	d11b      	bne.n	8003692 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e16c      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	2b02      	cmp	r3, #2
 8003698:	d11b      	bne.n	80036d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	e14c      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036f8:	e138      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	2b03      	cmp	r3, #3
 8003700:	f200 80f1 	bhi.w	80038e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b01      	cmp	r3, #1
 800370a:	d123      	bne.n	8003754 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f001 f88b 	bl	800482c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e139      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003752:	e10b      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	2b02      	cmp	r3, #2
 800375a:	d14e      	bne.n	80037fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	4906      	ldr	r1, [pc, #24]	; (8003780 <HAL_I2C_Master_Receive+0x22c>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 ff08 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e10e      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
 8003776:	bf00      	nop
 8003778:	00100002 	.word	0x00100002
 800377c:	ffff0000 	.word	0xffff0000
 8003780:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f8:	e0b8      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	2200      	movs	r2, #0
 8003802:	4966      	ldr	r1, [pc, #408]	; (800399c <HAL_I2C_Master_Receive+0x448>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 feb9 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0bf      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2200      	movs	r2, #0
 800385e:	494f      	ldr	r1, [pc, #316]	; (800399c <HAL_I2C_Master_Receive+0x448>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fe8b 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e091      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e4:	e042      	b.n	800396c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 ff9e 	bl	800482c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e04c      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d118      	bne.n	800396c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f aec2 	bne.w	80036fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010004 	.word	0x00010004

080039a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ba:	f7ff f8ab 	bl	8002b14 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	f040 80d9 	bne.w	8003b80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2319      	movs	r3, #25
 80039d4:	2201      	movs	r2, #1
 80039d6:	496d      	ldr	r1, [pc, #436]	; (8003b8c <HAL_I2C_Mem_Write+0x1ec>)
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fdcf 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0cc      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_I2C_Mem_Write+0x56>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0c5      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d007      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2221      	movs	r2, #33	; 0x21
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_I2C_Mem_Write+0x1f0>)
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a5e:	88f8      	ldrh	r0, [r7, #6]
 8003a60:	893a      	ldrh	r2, [r7, #8]
 8003a62:	8979      	ldrh	r1, [r7, #10]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fc06 	bl	8004280 <I2C_RequestMemoryWrite>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d052      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e081      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fe50 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_I2C_Mem_Write+0x180>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1aa      	bne.n	8003a7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fe3c 	bl	80047aa <I2C_WaitOnBTFFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e016      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	00100002 	.word	0x00100002
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bae:	f7fe ffb1 	bl	8002b14 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	f040 8208 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	2201      	movs	r2, #1
 8003bca:	497b      	ldr	r1, [pc, #492]	; (8003db8 <HAL_I2C_Mem_Read+0x224>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fcd5 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e1fb      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Mem_Read+0x56>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e1f4      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d007      	beq.n	8003c10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2222      	movs	r2, #34	; 0x22
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_I2C_Mem_Read+0x228>)
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c52:	88f8      	ldrh	r0, [r7, #6]
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	8979      	ldrh	r1, [r7, #10]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4603      	mov	r3, r0
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fba2 	bl	80043ac <I2C_RequestMemoryRead>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1b0      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d113      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e184      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d11b      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e164      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d11b      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	e144      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d38:	e138      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	f200 80f1 	bhi.w	8003f26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d123      	bne.n	8003d94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fd6b 	bl	800482c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e139      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d92:	e10b      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d14e      	bne.n	8003e3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2200      	movs	r2, #0
 8003da4:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <HAL_I2C_Mem_Read+0x22c>)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fbe8 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e10e      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
 8003db6:	bf00      	nop
 8003db8:	00100002 	.word	0x00100002
 8003dbc:	ffff0000 	.word	0xffff0000
 8003dc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e38:	e0b8      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	2200      	movs	r2, #0
 8003e42:	4966      	ldr	r1, [pc, #408]	; (8003fdc <HAL_I2C_Mem_Read+0x448>)
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fb99 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0bf      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	494f      	ldr	r1, [pc, #316]	; (8003fdc <HAL_I2C_Mem_Read+0x448>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fb6b 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e091      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f24:	e042      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fc7e 	bl	800482c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e04c      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d118      	bne.n	8003fac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f47f aec2 	bne.w	8003d3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00010004 	.word	0x00010004

08003fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	460b      	mov	r3, r1
 8003fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d006      	beq.n	800400a <I2C_MasterRequestWrite+0x2a>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d003      	beq.n	800400a <I2C_MasterRequestWrite+0x2a>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004008:	d108      	bne.n	800401c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e00b      	b.n	8004034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	2b12      	cmp	r3, #18
 8004022:	d107      	bne.n	8004034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fa9b 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00d      	beq.n	8004068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d103      	bne.n	8004064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e035      	b.n	80040d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004070:	d108      	bne.n	8004084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004080:	611a      	str	r2, [r3, #16]
 8004082:	e01b      	b.n	80040bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	11db      	asrs	r3, r3, #7
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0306 	and.w	r3, r3, #6
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f063 030f 	orn	r3, r3, #15
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	490e      	ldr	r1, [pc, #56]	; (80040dc <I2C_MasterRequestWrite+0xfc>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fac1 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e010      	b.n	80040d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4907      	ldr	r1, [pc, #28]	; (80040e0 <I2C_MasterRequestWrite+0x100>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fab1 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	00010008 	.word	0x00010008
 80040e0:	00010002 	.word	0x00010002

080040e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004108:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d006      	beq.n	800411e <I2C_MasterRequestRead+0x3a>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d003      	beq.n	800411e <I2C_MasterRequestRead+0x3a>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800411c:	d108      	bne.n	8004130 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e00b      	b.n	8004148 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b11      	cmp	r3, #17
 8004136:	d107      	bne.n	8004148 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fa11 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416e:	d103      	bne.n	8004178 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e079      	b.n	8004270 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004184:	d108      	bne.n	8004198 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]
 8004196:	e05f      	b.n	8004258 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	11db      	asrs	r3, r3, #7
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f063 030f 	orn	r3, r3, #15
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4930      	ldr	r1, [pc, #192]	; (8004278 <I2C_MasterRequestRead+0x194>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fa37 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e054      	b.n	8004270 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4929      	ldr	r1, [pc, #164]	; (800427c <I2C_MasterRequestRead+0x198>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fa27 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e044      	b.n	8004270 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f9af 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00d      	beq.n	8004240 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004232:	d103      	bne.n	800423c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e017      	b.n	8004270 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	11db      	asrs	r3, r3, #7
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0306 	and.w	r3, r3, #6
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 030e 	orn	r3, r3, #14
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4907      	ldr	r1, [pc, #28]	; (800427c <I2C_MasterRequestRead+0x198>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f9e3 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	00010008 	.word	0x00010008
 800427c:	00010002 	.word	0x00010002

08004280 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	460b      	mov	r3, r1
 8004294:	813b      	strh	r3, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f960 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d0:	d103      	bne.n	80042da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e05f      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	492d      	ldr	r1, [pc, #180]	; (80043a8 <I2C_RequestMemoryWrite+0x128>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f998 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e04c      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	6a39      	ldr	r1, [r7, #32]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fa02 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b04      	cmp	r3, #4
 8004330:	d107      	bne.n	8004342 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e02b      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	e021      	b.n	800439c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b29b      	uxth	r3, r3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f9dc 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e005      	b.n	800439e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004392:	893b      	ldrh	r3, [r7, #8]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	00010002 	.word	0x00010002

080043ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	460b      	mov	r3, r1
 80043c0:	813b      	strh	r3, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f8c2 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440c:	d103      	bne.n	8004416 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0aa      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	4952      	ldr	r1, [pc, #328]	; (8004578 <I2C_RequestMemoryRead+0x1cc>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f8fa 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e097      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f964 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e076      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e021      	b.n	80044d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004494:	893b      	ldrh	r3, [r7, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f93e 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e050      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	6a39      	ldr	r1, [r7, #32]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f923 	bl	8004728 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d107      	bne.n	8004500 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e035      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004512:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2200      	movs	r2, #0
 800451c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f82b 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	d103      	bne.n	8004544 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e013      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	4906      	ldr	r1, [pc, #24]	; (8004578 <I2C_RequestMemoryRead+0x1cc>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f863 	bl	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	00010002 	.word	0x00010002

0800457c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800458c:	e025      	b.n	80045da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d021      	beq.n	80045da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fe fabd 	bl	8002b14 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d116      	bne.n	80045da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e023      	b.n	8004622 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10d      	bne.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	e00c      	b.n	800461a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	43da      	mvns	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4013      	ands	r3, r2
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	429a      	cmp	r2, r3
 800461e:	d0b6      	beq.n	800458e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004638:	e051      	b.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	d123      	bne.n	8004692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004658:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004662:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f043 0204 	orr.w	r2, r3, #4
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e046      	b.n	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d021      	beq.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fe fa3b 	bl	8002b14 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d116      	bne.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e020      	b.n	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10c      	bne.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	43da      	mvns	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4013      	ands	r3, r2
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bf14      	ite	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	2300      	moveq	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	e00b      	b.n	800471a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	43da      	mvns	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4013      	ands	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d18d      	bne.n	800463a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004734:	e02d      	b.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f8ce 	bl	80048d8 <I2C_IsAcknowledgeFailed>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e02d      	b.n	80047a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d021      	beq.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fe f9e1 	bl	8002b14 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d116      	bne.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e007      	b.n	80047a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d1ca      	bne.n	8004736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047b6:	e02d      	b.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f88d 	bl	80048d8 <I2C_IsAcknowledgeFailed>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e02d      	b.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d021      	beq.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fe f9a0 	bl	8002b14 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d116      	bne.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e007      	b.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d1ca      	bne.n	80047b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004838:	e042      	b.n	80048c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d119      	bne.n	800487c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e029      	b.n	80048d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7fe f94a 	bl	8002b14 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e007      	b.n	80048d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d1b5      	bne.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ee:	d11b      	bne.n	8004928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f043 0204 	orr.w	r2, r3, #4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0cc      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800494c:	4b68      	ldr	r3, [pc, #416]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d90c      	bls.n	8004974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b65      	ldr	r3, [pc, #404]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b63      	ldr	r3, [pc, #396]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0b8      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800498c:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a58      	ldr	r2, [pc, #352]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a4:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a52      	ldr	r2, [pc, #328]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	494d      	ldr	r1, [pc, #308]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d044      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d119      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e067      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a16:	4b37      	ldr	r3, [pc, #220]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4934      	ldr	r1, [pc, #208]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fe f874 	bl	8002b14 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a30:	f7fe f870 	bl	8002b14 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e04f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 020c 	and.w	r2, r3, #12
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d1eb      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d20c      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e032      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4916      	ldr	r1, [pc, #88]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	490e      	ldr	r1, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004abe:	f000 f855 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	490a      	ldr	r1, [pc, #40]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	5ccb      	ldrb	r3, [r1, r3]
 8004ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ada:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd ffd4 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40023c00 	.word	0x40023c00
 8004af4:	40023800 	.word	0x40023800
 8004af8:	08007db8 	.word	0x08007db8
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000004 	.word	0x20000004

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	08007dc8 	.word	0x08007dc8

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	08007dc8 	.word	0x08007dc8

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b0ae      	sub	sp, #184	; 0xb8
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b92:	4bcb      	ldr	r3, [pc, #812]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	f200 8206 	bhi.w	8004fac <HAL_RCC_GetSysClockFreq+0x440>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004fad 	.word	0x08004fad
 8004bb0:	08004fad 	.word	0x08004fad
 8004bb4:	08004fad 	.word	0x08004fad
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004fad 	.word	0x08004fad
 8004bc0:	08004fad 	.word	0x08004fad
 8004bc4:	08004fad 	.word	0x08004fad
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004fad 	.word	0x08004fad
 8004bd0:	08004fad 	.word	0x08004fad
 8004bd4:	08004fad 	.word	0x08004fad
 8004bd8:	08004ddd 	.word	0x08004ddd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4bb9      	ldr	r3, [pc, #740]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004be2:	e1e7      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4bb8      	ldr	r3, [pc, #736]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bea:	e1e3      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bec:	4bb4      	ldr	r3, [pc, #720]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf8:	4bb1      	ldr	r3, [pc, #708]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d071      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c04:	4bae      	ldr	r3, [pc, #696]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	0159      	lsls	r1, r3, #5
 8004c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c3c:	0150      	lsls	r0, r2, #5
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4621      	mov	r1, r4
 8004c44:	1a51      	subs	r1, r2, r1
 8004c46:	6439      	str	r1, [r7, #64]	; 0x40
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	018b      	lsls	r3, r1, #6
 8004c60:	4641      	mov	r1, r8
 8004c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c66:	4641      	mov	r1, r8
 8004c68:	018a      	lsls	r2, r1, #6
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1a51      	subs	r1, r2, r1
 8004c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c70:	4649      	mov	r1, r9
 8004c72:	eb63 0301 	sbc.w	r3, r3, r1
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c84:	4649      	mov	r1, r9
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4641      	mov	r1, r8
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4641      	mov	r1, r8
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4622      	mov	r2, r4
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	eb42 0303 	adc.w	r3, r2, r3
 8004ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	024b      	lsls	r3, r1, #9
 8004cb8:	4621      	mov	r1, r4
 8004cba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	024a      	lsls	r2, r1, #9
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cd8:	f7fb ffca 	bl	8000c70 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce6:	e067      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce8:	4b75      	ldr	r3, [pc, #468]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cf4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d02:	2300      	movs	r3, #0
 8004d04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	0159      	lsls	r1, r3, #5
 8004d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1c:	0150      	lsls	r0, r2, #5
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4621      	mov	r1, r4
 8004d24:	1a51      	subs	r1, r2, r1
 8004d26:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d28:	4629      	mov	r1, r5
 8004d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	018b      	lsls	r3, r1, #6
 8004d40:	4641      	mov	r1, r8
 8004d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d46:	4641      	mov	r1, r8
 8004d48:	018a      	lsls	r2, r1, #6
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d50:	4649      	mov	r1, r9
 8004d52:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d6a:	4692      	mov	sl, r2
 8004d6c:	469b      	mov	fp, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	eb1a 0303 	adds.w	r3, sl, r3
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	462b      	mov	r3, r5
 8004d78:	eb4b 0303 	adc.w	r3, fp, r3
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	028b      	lsls	r3, r1, #10
 8004d8e:	4621      	mov	r1, r4
 8004d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d94:	4621      	mov	r1, r4
 8004d96:	028a      	lsls	r2, r1, #10
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da0:	2200      	movs	r2, #0
 8004da2:	673b      	str	r3, [r7, #112]	; 0x70
 8004da4:	677a      	str	r2, [r7, #116]	; 0x74
 8004da6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004daa:	f7fb ff61 	bl	8000c70 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4613      	mov	r3, r2
 8004db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db8:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dda:	e0eb      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ddc:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de8:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d06b      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df4:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	663b      	str	r3, [r7, #96]	; 0x60
 8004e08:	2300      	movs	r3, #0
 8004e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e10:	4622      	mov	r2, r4
 8004e12:	462b      	mov	r3, r5
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e22:	0150      	lsls	r0, r2, #5
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4621      	mov	r1, r4
 8004e2a:	1a51      	subs	r1, r2, r1
 8004e2c:	61b9      	str	r1, [r7, #24]
 8004e2e:	4629      	mov	r1, r5
 8004e30:	eb63 0301 	sbc.w	r3, r3, r1
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e42:	4659      	mov	r1, fp
 8004e44:	018b      	lsls	r3, r1, #6
 8004e46:	4651      	mov	r1, sl
 8004e48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	018a      	lsls	r2, r1, #6
 8004e50:	4651      	mov	r1, sl
 8004e52:	ebb2 0801 	subs.w	r8, r2, r1
 8004e56:	4659      	mov	r1, fp
 8004e58:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e70:	4690      	mov	r8, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	4623      	mov	r3, r4
 8004e76:	eb18 0303 	adds.w	r3, r8, r3
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	eb49 0303 	adc.w	r3, r9, r3
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e90:	4629      	mov	r1, r5
 8004e92:	024b      	lsls	r3, r1, #9
 8004e94:	4621      	mov	r1, r4
 8004e96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	024a      	lsls	r2, r1, #9
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eaa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004eac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eb0:	f7fb fede 	bl	8000c70 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4613      	mov	r3, r2
 8004eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ebe:	e065      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x420>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	099b      	lsrs	r3, r3, #6
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004edc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ede:	2300      	movs	r3, #0
 8004ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	464b      	mov	r3, r9
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	0159      	lsls	r1, r3, #5
 8004ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef8:	0150      	lsls	r0, r2, #5
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4641      	mov	r1, r8
 8004f00:	1a51      	subs	r1, r2, r1
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	4649      	mov	r1, r9
 8004f06:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f18:	4659      	mov	r1, fp
 8004f1a:	018b      	lsls	r3, r1, #6
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f22:	4651      	mov	r1, sl
 8004f24:	018a      	lsls	r2, r1, #6
 8004f26:	4651      	mov	r1, sl
 8004f28:	1a54      	subs	r4, r2, r1
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	eb63 0501 	sbc.w	r5, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	00eb      	lsls	r3, r5, #3
 8004f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f3e:	00e2      	lsls	r2, r4, #3
 8004f40:	4614      	mov	r4, r2
 8004f42:	461d      	mov	r5, r3
 8004f44:	4643      	mov	r3, r8
 8004f46:	18e3      	adds	r3, r4, r3
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	eb45 0303 	adc.w	r3, r5, r3
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f5e:	4629      	mov	r1, r5
 8004f60:	028b      	lsls	r3, r1, #10
 8004f62:	4621      	mov	r1, r4
 8004f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f68:	4621      	mov	r1, r4
 8004f6a:	028a      	lsls	r2, r1, #10
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f74:	2200      	movs	r2, #0
 8004f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f7e:	f7fb fe77 	bl	8000c70 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4613      	mov	r3, r2
 8004f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0f1b      	lsrs	r3, r3, #28
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004faa:	e003      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	37b8      	adds	r7, #184	; 0xb8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	00f42400 	.word	0x00f42400

08004fcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e28d      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8083 	beq.w	80050f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fec:	4b94      	ldr	r3, [pc, #592]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d019      	beq.n	800502c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ff8:	4b91      	ldr	r3, [pc, #580]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005000:	2b08      	cmp	r3, #8
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005004:	4b8e      	ldr	r3, [pc, #568]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005010:	d00c      	beq.n	800502c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005012:	4b8b      	ldr	r3, [pc, #556]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d112      	bne.n	8005044 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501e:	4b88      	ldr	r3, [pc, #544]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502a:	d10b      	bne.n	8005044 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	4b84      	ldr	r3, [pc, #528]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x124>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d157      	bne.n	80050f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e25a      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x90>
 800504e:	4b7c      	ldr	r3, [pc, #496]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7b      	ldr	r2, [pc, #492]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xcc>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0xb4>
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a75      	ldr	r2, [pc, #468]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b73      	ldr	r3, [pc, #460]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a72      	ldr	r2, [pc, #456]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xcc>
 8005080:	4b6f      	ldr	r3, [pc, #444]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6e      	ldr	r2, [pc, #440]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b6c      	ldr	r3, [pc, #432]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6b      	ldr	r2, [pc, #428]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd fd38 	bl	8002b14 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fd fd34 	bl	8002b14 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e21f      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xdc>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd fd24 	bl	8002b14 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fd fd20 	bl	8002b14 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e20b      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	4b57      	ldr	r3, [pc, #348]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x104>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d06f      	beq.n	80051de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050fe:	4b50      	ldr	r3, [pc, #320]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b00      	cmp	r3, #0
 8005108:	d017      	beq.n	800513a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800510a:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005112:	2b08      	cmp	r3, #8
 8005114:	d105      	bne.n	8005122 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005116:	4b4a      	ldr	r3, [pc, #296]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005122:	4b47      	ldr	r3, [pc, #284]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d11c      	bne.n	8005168 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b44      	ldr	r3, [pc, #272]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x186>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e1d3      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4937      	ldr	r1, [pc, #220]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	e03a      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005170:	4b34      	ldr	r3, [pc, #208]	; (8005244 <HAL_RCC_OscConfig+0x278>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd fccd 	bl	8002b14 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd fcc9 	bl	8002b14 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e1b4      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4925      	ldr	r1, [pc, #148]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	e015      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCC_OscConfig+0x278>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd fcac 	bl	8002b14 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fd fca8 	bl	8002b14 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e193      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d036      	beq.n	8005258 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_RCC_OscConfig+0x27c>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fc8c 	bl	8002b14 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd fc88 	bl	8002b14 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e173      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x234>
 800521e:	e01b      	b.n	8005258 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <HAL_RCC_OscConfig+0x27c>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7fd fc75 	bl	8002b14 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	e00e      	b.n	800524c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522e:	f7fd fc71 	bl	8002b14 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d907      	bls.n	800524c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e15c      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
 8005240:	40023800 	.word	0x40023800
 8005244:	42470000 	.word	0x42470000
 8005248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524c:	4b8a      	ldr	r3, [pc, #552]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ea      	bne.n	800522e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8097 	beq.w	8005394 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b83      	ldr	r3, [pc, #524]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	4b7f      	ldr	r3, [pc, #508]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a7e      	ldr	r2, [pc, #504]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b7c      	ldr	r3, [pc, #496]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b79      	ldr	r3, [pc, #484]	; (800547c <HAL_RCC_OscConfig+0x4b0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d118      	bne.n	80052d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a2:	4b76      	ldr	r3, [pc, #472]	; (800547c <HAL_RCC_OscConfig+0x4b0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a75      	ldr	r2, [pc, #468]	; (800547c <HAL_RCC_OscConfig+0x4b0>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ae:	f7fd fc31 	bl	8002b14 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fd fc2d 	bl	8002b14 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e118      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	4b6c      	ldr	r3, [pc, #432]	; (800547c <HAL_RCC_OscConfig+0x4b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d106      	bne.n	80052ea <HAL_RCC_OscConfig+0x31e>
 80052dc:	4b66      	ldr	r3, [pc, #408]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6713      	str	r3, [r2, #112]	; 0x70
 80052e8:	e01c      	b.n	8005324 <HAL_RCC_OscConfig+0x358>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10c      	bne.n	800530c <HAL_RCC_OscConfig+0x340>
 80052f2:	4b61      	ldr	r3, [pc, #388]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a60      	ldr	r2, [pc, #384]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70
 80052fe:	4b5e      	ldr	r3, [pc, #376]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4a5d      	ldr	r2, [pc, #372]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6713      	str	r3, [r2, #112]	; 0x70
 800530a:	e00b      	b.n	8005324 <HAL_RCC_OscConfig+0x358>
 800530c:	4b5a      	ldr	r3, [pc, #360]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	4a59      	ldr	r2, [pc, #356]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	6713      	str	r3, [r2, #112]	; 0x70
 8005318:	4b57      	ldr	r3, [pc, #348]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531c:	4a56      	ldr	r2, [pc, #344]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	f023 0304 	bic.w	r3, r3, #4
 8005322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fd fbf2 	bl	8002b14 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	e00a      	b.n	800534a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fd fbee 	bl	8002b14 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0d7      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	4b4b      	ldr	r3, [pc, #300]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ee      	beq.n	8005334 <HAL_RCC_OscConfig+0x368>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fd fbdc 	bl	8002b14 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535e:	e00a      	b.n	8005376 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fd fbd8 	bl	8002b14 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0c1      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	4b40      	ldr	r3, [pc, #256]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ee      	bne.n	8005360 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005388:	4b3b      	ldr	r3, [pc, #236]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	4a3a      	ldr	r2, [pc, #232]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80ad 	beq.w	80054f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800539e:	4b36      	ldr	r3, [pc, #216]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d060      	beq.n	800546c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d145      	bne.n	800543e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b2:	4b33      	ldr	r3, [pc, #204]	; (8005480 <HAL_RCC_OscConfig+0x4b4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fd fbac 	bl	8002b14 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fd fba8 	bl	8002b14 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e093      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	019b      	lsls	r3, r3, #6
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	3b01      	subs	r3, #1
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	071b      	lsls	r3, r3, #28
 800540a:	491b      	ldr	r1, [pc, #108]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <HAL_RCC_OscConfig+0x4b4>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd fb7d 	bl	8002b14 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541e:	f7fd fb79 	bl	8002b14 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e064      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x452>
 800543c:	e05c      	b.n	80054f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_RCC_OscConfig+0x4b4>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd fb66 	bl	8002b14 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544c:	f7fd fb62 	bl	8002b14 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04d      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	4b06      	ldr	r3, [pc, #24]	; (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x480>
 800546a:	e045      	b.n	80054f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d107      	bne.n	8005484 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e040      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000
 8005480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005484:	4b1f      	ldr	r3, [pc, #124]	; (8005504 <HAL_RCC_OscConfig+0x538>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d030      	beq.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d129      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d122      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054b4:	4013      	ands	r3, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054bc:	4293      	cmp	r3, r2
 80054be:	d119      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	3b01      	subs	r3, #1
 80054ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d10f      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e03f      	b.n	800559a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd f9dc 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	; 0x24
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f829 	bl	80055a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b0c0      	sub	sp, #256	; 0x100
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	68d9      	ldr	r1, [r3, #12]
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	ea40 0301 	orr.w	r3, r0, r1
 80055cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	431a      	orrs	r2, r3
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055fc:	f021 010c 	bic.w	r1, r1, #12
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800560a:	430b      	orrs	r3, r1
 800560c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	6999      	ldr	r1, [r3, #24]
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	ea40 0301 	orr.w	r3, r0, r1
 800562a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b8f      	ldr	r3, [pc, #572]	; (8005870 <UART_SetConfig+0x2cc>)
 8005634:	429a      	cmp	r2, r3
 8005636:	d005      	beq.n	8005644 <UART_SetConfig+0xa0>
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b8d      	ldr	r3, [pc, #564]	; (8005874 <UART_SetConfig+0x2d0>)
 8005640:	429a      	cmp	r2, r3
 8005642:	d104      	bne.n	800564e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005644:	f7ff fa7e 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8005648:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800564c:	e003      	b.n	8005656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800564e:	f7ff fa65 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8005652:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005660:	f040 810c 	bne.w	800587c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005676:	4622      	mov	r2, r4
 8005678:	462b      	mov	r3, r5
 800567a:	1891      	adds	r1, r2, r2
 800567c:	65b9      	str	r1, [r7, #88]	; 0x58
 800567e:	415b      	adcs	r3, r3
 8005680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005686:	4621      	mov	r1, r4
 8005688:	eb12 0801 	adds.w	r8, r2, r1
 800568c:	4629      	mov	r1, r5
 800568e:	eb43 0901 	adc.w	r9, r3, r1
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800569e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056a6:	4690      	mov	r8, r2
 80056a8:	4699      	mov	r9, r3
 80056aa:	4623      	mov	r3, r4
 80056ac:	eb18 0303 	adds.w	r3, r8, r3
 80056b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056b4:	462b      	mov	r3, r5
 80056b6:	eb49 0303 	adc.w	r3, r9, r3
 80056ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056d2:	460b      	mov	r3, r1
 80056d4:	18db      	adds	r3, r3, r3
 80056d6:	653b      	str	r3, [r7, #80]	; 0x50
 80056d8:	4613      	mov	r3, r2
 80056da:	eb42 0303 	adc.w	r3, r2, r3
 80056de:	657b      	str	r3, [r7, #84]	; 0x54
 80056e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056e8:	f7fb fac2 	bl	8000c70 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4b61      	ldr	r3, [pc, #388]	; (8005878 <UART_SetConfig+0x2d4>)
 80056f2:	fba3 2302 	umull	r2, r3, r3, r2
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	011c      	lsls	r4, r3, #4
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005704:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	64b9      	str	r1, [r7, #72]	; 0x48
 8005714:	415b      	adcs	r3, r3
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800571c:	4641      	mov	r1, r8
 800571e:	eb12 0a01 	adds.w	sl, r2, r1
 8005722:	4649      	mov	r1, r9
 8005724:	eb43 0b01 	adc.w	fp, r3, r1
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800573c:	4692      	mov	sl, r2
 800573e:	469b      	mov	fp, r3
 8005740:	4643      	mov	r3, r8
 8005742:	eb1a 0303 	adds.w	r3, sl, r3
 8005746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800574a:	464b      	mov	r3, r9
 800574c:	eb4b 0303 	adc.w	r3, fp, r3
 8005750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005760:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005768:	460b      	mov	r3, r1
 800576a:	18db      	adds	r3, r3, r3
 800576c:	643b      	str	r3, [r7, #64]	; 0x40
 800576e:	4613      	mov	r3, r2
 8005770:	eb42 0303 	adc.w	r3, r2, r3
 8005774:	647b      	str	r3, [r7, #68]	; 0x44
 8005776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800577a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800577e:	f7fb fa77 	bl	8000c70 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4611      	mov	r1, r2
 8005788:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <UART_SetConfig+0x2d4>)
 800578a:	fba3 2301 	umull	r2, r3, r3, r1
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2264      	movs	r2, #100	; 0x64
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	1acb      	subs	r3, r1, r3
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <UART_SetConfig+0x2d4>)
 80057a0:	fba3 2302 	umull	r2, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057ac:	441c      	add	r4, r3
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057c8:	415b      	adcs	r3, r3
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057d0:	4641      	mov	r1, r8
 80057d2:	1851      	adds	r1, r2, r1
 80057d4:	6339      	str	r1, [r7, #48]	; 0x30
 80057d6:	4649      	mov	r1, r9
 80057d8:	414b      	adcs	r3, r1
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057e8:	4659      	mov	r1, fp
 80057ea:	00cb      	lsls	r3, r1, #3
 80057ec:	4651      	mov	r1, sl
 80057ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f2:	4651      	mov	r1, sl
 80057f4:	00ca      	lsls	r2, r1, #3
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	4642      	mov	r2, r8
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005804:	464b      	mov	r3, r9
 8005806:	460a      	mov	r2, r1
 8005808:	eb42 0303 	adc.w	r3, r2, r3
 800580c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800581c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800583a:	f7fb fa19 	bl	8000c70 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <UART_SetConfig+0x2d4>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	2164      	movs	r1, #100	; 0x64
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	3332      	adds	r3, #50	; 0x32
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <UART_SetConfig+0x2d4>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f003 0207 	and.w	r2, r3, #7
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4422      	add	r2, r4
 800586a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800586c:	e105      	b.n	8005a7a <UART_SetConfig+0x4d6>
 800586e:	bf00      	nop
 8005870:	40011000 	.word	0x40011000
 8005874:	40011400 	.word	0x40011400
 8005878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005886:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800588a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	1891      	adds	r1, r2, r2
 8005894:	6239      	str	r1, [r7, #32]
 8005896:	415b      	adcs	r3, r3
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800589e:	4641      	mov	r1, r8
 80058a0:	1854      	adds	r4, r2, r1
 80058a2:	4649      	mov	r1, r9
 80058a4:	eb43 0501 	adc.w	r5, r3, r1
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	00eb      	lsls	r3, r5, #3
 80058b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b6:	00e2      	lsls	r2, r4, #3
 80058b8:	4614      	mov	r4, r2
 80058ba:	461d      	mov	r5, r3
 80058bc:	4643      	mov	r3, r8
 80058be:	18e3      	adds	r3, r4, r3
 80058c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058c4:	464b      	mov	r3, r9
 80058c6:	eb45 0303 	adc.w	r3, r5, r3
 80058ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058ea:	4629      	mov	r1, r5
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	4621      	mov	r1, r4
 80058f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f4:	4621      	mov	r1, r4
 80058f6:	008a      	lsls	r2, r1, #2
 80058f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058fc:	f7fb f9b8 	bl	8000c70 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <UART_SetConfig+0x4e4>)
 8005906:	fba3 2302 	umull	r2, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	011c      	lsls	r4, r3, #4
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800591c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	61b9      	str	r1, [r7, #24]
 8005928:	415b      	adcs	r3, r3
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6139      	str	r1, [r7, #16]
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005964:	464b      	mov	r3, r9
 8005966:	460a      	mov	r2, r1
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	67bb      	str	r3, [r7, #120]	; 0x78
 800597a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005988:	4649      	mov	r1, r9
 800598a:	008b      	lsls	r3, r1, #2
 800598c:	4641      	mov	r1, r8
 800598e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005992:	4641      	mov	r1, r8
 8005994:	008a      	lsls	r2, r1, #2
 8005996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800599a:	f7fb f969 	bl	8000c70 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <UART_SetConfig+0x4e4>)
 80059a4:	fba3 1302 	umull	r1, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	2164      	movs	r1, #100	; 0x64
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	3332      	adds	r3, #50	; 0x32
 80059b6:	4a34      	ldr	r2, [pc, #208]	; (8005a88 <UART_SetConfig+0x4e4>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c2:	441c      	add	r4, r3
 80059c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c8:	2200      	movs	r2, #0
 80059ca:	673b      	str	r3, [r7, #112]	; 0x70
 80059cc:	677a      	str	r2, [r7, #116]	; 0x74
 80059ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059d2:	4642      	mov	r2, r8
 80059d4:	464b      	mov	r3, r9
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	415b      	adcs	r3, r3
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059e2:	4641      	mov	r1, r8
 80059e4:	1851      	adds	r1, r2, r1
 80059e6:	6039      	str	r1, [r7, #0]
 80059e8:	4649      	mov	r1, r9
 80059ea:	414b      	adcs	r3, r1
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059fa:	4659      	mov	r1, fp
 80059fc:	00cb      	lsls	r3, r1, #3
 80059fe:	4651      	mov	r1, sl
 8005a00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a04:	4651      	mov	r1, sl
 8005a06:	00ca      	lsls	r2, r1, #3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	4642      	mov	r2, r8
 8005a10:	189b      	adds	r3, r3, r2
 8005a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a14:	464b      	mov	r3, r9
 8005a16:	460a      	mov	r2, r1
 8005a18:	eb42 0303 	adc.w	r3, r2, r3
 8005a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	663b      	str	r3, [r7, #96]	; 0x60
 8005a28:	667a      	str	r2, [r7, #100]	; 0x64
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a36:	4649      	mov	r1, r9
 8005a38:	008b      	lsls	r3, r1, #2
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a40:	4641      	mov	r1, r8
 8005a42:	008a      	lsls	r2, r1, #2
 8005a44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a48:	f7fb f912 	bl	8000c70 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <UART_SetConfig+0x4e4>)
 8005a52:	fba3 1302 	umull	r1, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2164      	movs	r1, #100	; 0x64
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	3332      	adds	r3, #50	; 0x32
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <UART_SetConfig+0x4e4>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4422      	add	r2, r4
 8005a78:	609a      	str	r2, [r3, #8]
}
 8005a7a:	bf00      	nop
 8005a7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a86:	bf00      	nop
 8005a88:	51eb851f 	.word	0x51eb851f

08005a8c <__errno>:
 8005a8c:	4b01      	ldr	r3, [pc, #4]	; (8005a94 <__errno+0x8>)
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000000c 	.word	0x2000000c

08005a98 <__libc_init_array>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4d0d      	ldr	r5, [pc, #52]	; (8005ad0 <__libc_init_array+0x38>)
 8005a9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ad4 <__libc_init_array+0x3c>)
 8005a9e:	1b64      	subs	r4, r4, r5
 8005aa0:	10a4      	asrs	r4, r4, #2
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	42a6      	cmp	r6, r4
 8005aa6:	d109      	bne.n	8005abc <__libc_init_array+0x24>
 8005aa8:	4d0b      	ldr	r5, [pc, #44]	; (8005ad8 <__libc_init_array+0x40>)
 8005aaa:	4c0c      	ldr	r4, [pc, #48]	; (8005adc <__libc_init_array+0x44>)
 8005aac:	f002 f976 	bl	8007d9c <_init>
 8005ab0:	1b64      	subs	r4, r4, r5
 8005ab2:	10a4      	asrs	r4, r4, #2
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	42a6      	cmp	r6, r4
 8005ab8:	d105      	bne.n	8005ac6 <__libc_init_array+0x2e>
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac0:	4798      	blx	r3
 8005ac2:	3601      	adds	r6, #1
 8005ac4:	e7ee      	b.n	8005aa4 <__libc_init_array+0xc>
 8005ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aca:	4798      	blx	r3
 8005acc:	3601      	adds	r6, #1
 8005ace:	e7f2      	b.n	8005ab6 <__libc_init_array+0x1e>
 8005ad0:	08007fe8 	.word	0x08007fe8
 8005ad4:	08007fe8 	.word	0x08007fe8
 8005ad8:	08007fe8 	.word	0x08007fe8
 8005adc:	08007fec 	.word	0x08007fec

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <sin>:
 8005af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005af2:	ec53 2b10 	vmov	r2, r3, d0
 8005af6:	4828      	ldr	r0, [pc, #160]	; (8005b98 <sin+0xa8>)
 8005af8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005afc:	4281      	cmp	r1, r0
 8005afe:	dc07      	bgt.n	8005b10 <sin+0x20>
 8005b00:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005b90 <sin+0xa0>
 8005b04:	2000      	movs	r0, #0
 8005b06:	b005      	add	sp, #20
 8005b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b0c:	f001 bf34 	b.w	8007978 <__kernel_sin>
 8005b10:	4822      	ldr	r0, [pc, #136]	; (8005b9c <sin+0xac>)
 8005b12:	4281      	cmp	r1, r0
 8005b14:	dd09      	ble.n	8005b2a <sin+0x3a>
 8005b16:	ee10 0a10 	vmov	r0, s0
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	f7fa fb78 	bl	8000210 <__aeabi_dsub>
 8005b20:	ec41 0b10 	vmov	d0, r0, r1
 8005b24:	b005      	add	sp, #20
 8005b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b2a:	4668      	mov	r0, sp
 8005b2c:	f001 f84c 	bl	8006bc8 <__ieee754_rem_pio2>
 8005b30:	f000 0003 	and.w	r0, r0, #3
 8005b34:	2801      	cmp	r0, #1
 8005b36:	d00c      	beq.n	8005b52 <sin+0x62>
 8005b38:	2802      	cmp	r0, #2
 8005b3a:	d011      	beq.n	8005b60 <sin+0x70>
 8005b3c:	b9f0      	cbnz	r0, 8005b7c <sin+0x8c>
 8005b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b42:	ed9d 0b00 	vldr	d0, [sp]
 8005b46:	2001      	movs	r0, #1
 8005b48:	f001 ff16 	bl	8007978 <__kernel_sin>
 8005b4c:	ec51 0b10 	vmov	r0, r1, d0
 8005b50:	e7e6      	b.n	8005b20 <sin+0x30>
 8005b52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b56:	ed9d 0b00 	vldr	d0, [sp]
 8005b5a:	f001 faf5 	bl	8007148 <__kernel_cos>
 8005b5e:	e7f5      	b.n	8005b4c <sin+0x5c>
 8005b60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b64:	ed9d 0b00 	vldr	d0, [sp]
 8005b68:	2001      	movs	r0, #1
 8005b6a:	f001 ff05 	bl	8007978 <__kernel_sin>
 8005b6e:	ec53 2b10 	vmov	r2, r3, d0
 8005b72:	ee10 0a10 	vmov	r0, s0
 8005b76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005b7a:	e7d1      	b.n	8005b20 <sin+0x30>
 8005b7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b80:	ed9d 0b00 	vldr	d0, [sp]
 8005b84:	f001 fae0 	bl	8007148 <__kernel_cos>
 8005b88:	e7f1      	b.n	8005b6e <sin+0x7e>
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w
	...
 8005b98:	3fe921fb 	.word	0x3fe921fb
 8005b9c:	7fefffff 	.word	0x7fefffff

08005ba0 <asin>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	ed2d 8b02 	vpush	{d8}
 8005ba6:	ec55 4b10 	vmov	r4, r5, d0
 8005baa:	f000 f8c9 	bl	8005d40 <__ieee754_asin>
 8005bae:	4622      	mov	r2, r4
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8005bba:	eef0 8a60 	vmov.f32	s17, s1
 8005bbe:	f7fa ff79 	bl	8000ab4 <__aeabi_dcmpun>
 8005bc2:	b9a8      	cbnz	r0, 8005bf0 <asin+0x50>
 8005bc4:	ec45 4b10 	vmov	d0, r4, r5
 8005bc8:	f001 ffc4 	bl	8007b54 <fabs>
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <asin+0x60>)
 8005bce:	ec51 0b10 	vmov	r0, r1, d0
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f7fa ff64 	bl	8000aa0 <__aeabi_dcmpgt>
 8005bd8:	b150      	cbz	r0, 8005bf0 <asin+0x50>
 8005bda:	f7ff ff57 	bl	8005a8c <__errno>
 8005bde:	ecbd 8b02 	vpop	{d8}
 8005be2:	2321      	movs	r3, #33	; 0x21
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bea:	4806      	ldr	r0, [pc, #24]	; (8005c04 <asin+0x64>)
 8005bec:	f002 b848 	b.w	8007c80 <nan>
 8005bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8005bf4:	eef0 0a68 	vmov.f32	s1, s17
 8005bf8:	ecbd 8b02 	vpop	{d8}
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	3ff00000 	.word	0x3ff00000
 8005c04:	08007dd0 	.word	0x08007dd0

08005c08 <pow>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	ed2d 8b02 	vpush	{d8}
 8005c0e:	eeb0 8a40 	vmov.f32	s16, s0
 8005c12:	eef0 8a60 	vmov.f32	s17, s1
 8005c16:	ec55 4b11 	vmov	r4, r5, d1
 8005c1a:	f000 faa5 	bl	8006168 <__ieee754_pow>
 8005c1e:	4622      	mov	r2, r4
 8005c20:	462b      	mov	r3, r5
 8005c22:	4620      	mov	r0, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	ec57 6b10 	vmov	r6, r7, d0
 8005c2a:	f7fa ff43 	bl	8000ab4 <__aeabi_dcmpun>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d13b      	bne.n	8005caa <pow+0xa2>
 8005c32:	ec51 0b18 	vmov	r0, r1, d8
 8005c36:	2200      	movs	r2, #0
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f7fa ff09 	bl	8000a50 <__aeabi_dcmpeq>
 8005c3e:	b1b8      	cbz	r0, 8005c70 <pow+0x68>
 8005c40:	2200      	movs	r2, #0
 8005c42:	2300      	movs	r3, #0
 8005c44:	4620      	mov	r0, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7fa ff02 	bl	8000a50 <__aeabi_dcmpeq>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d146      	bne.n	8005cde <pow+0xd6>
 8005c50:	ec45 4b10 	vmov	d0, r4, r5
 8005c54:	f001 ff87 	bl	8007b66 <finite>
 8005c58:	b338      	cbz	r0, 8005caa <pow+0xa2>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa feff 	bl	8000a64 <__aeabi_dcmplt>
 8005c66:	b300      	cbz	r0, 8005caa <pow+0xa2>
 8005c68:	f7ff ff10 	bl	8005a8c <__errno>
 8005c6c:	2322      	movs	r3, #34	; 0x22
 8005c6e:	e01b      	b.n	8005ca8 <pow+0xa0>
 8005c70:	ec47 6b10 	vmov	d0, r6, r7
 8005c74:	f001 ff77 	bl	8007b66 <finite>
 8005c78:	b9e0      	cbnz	r0, 8005cb4 <pow+0xac>
 8005c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c7e:	eef0 0a68 	vmov.f32	s1, s17
 8005c82:	f001 ff70 	bl	8007b66 <finite>
 8005c86:	b1a8      	cbz	r0, 8005cb4 <pow+0xac>
 8005c88:	ec45 4b10 	vmov	d0, r4, r5
 8005c8c:	f001 ff6b 	bl	8007b66 <finite>
 8005c90:	b180      	cbz	r0, 8005cb4 <pow+0xac>
 8005c92:	4632      	mov	r2, r6
 8005c94:	463b      	mov	r3, r7
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa ff0b 	bl	8000ab4 <__aeabi_dcmpun>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d0e2      	beq.n	8005c68 <pow+0x60>
 8005ca2:	f7ff fef3 	bl	8005a8c <__errno>
 8005ca6:	2321      	movs	r3, #33	; 0x21
 8005ca8:	6003      	str	r3, [r0, #0]
 8005caa:	ecbd 8b02 	vpop	{d8}
 8005cae:	ec47 6b10 	vmov	d0, r6, r7
 8005cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa fec8 	bl	8000a50 <__aeabi_dcmpeq>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0f2      	beq.n	8005caa <pow+0xa2>
 8005cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8005cc8:	eef0 0a68 	vmov.f32	s1, s17
 8005ccc:	f001 ff4b 	bl	8007b66 <finite>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d0ea      	beq.n	8005caa <pow+0xa2>
 8005cd4:	ec45 4b10 	vmov	d0, r4, r5
 8005cd8:	f001 ff45 	bl	8007b66 <finite>
 8005cdc:	e7c3      	b.n	8005c66 <pow+0x5e>
 8005cde:	4f01      	ldr	r7, [pc, #4]	; (8005ce4 <pow+0xdc>)
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	e7e2      	b.n	8005caa <pow+0xa2>
 8005ce4:	3ff00000 	.word	0x3ff00000

08005ce8 <sqrt>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	ed2d 8b02 	vpush	{d8}
 8005cee:	ec55 4b10 	vmov	r4, r5, d0
 8005cf2:	f001 f975 	bl	8006fe0 <__ieee754_sqrt>
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8005d02:	eef0 8a60 	vmov.f32	s17, s1
 8005d06:	f7fa fed5 	bl	8000ab4 <__aeabi_dcmpun>
 8005d0a:	b990      	cbnz	r0, 8005d32 <sqrt+0x4a>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4620      	mov	r0, r4
 8005d12:	4629      	mov	r1, r5
 8005d14:	f7fa fea6 	bl	8000a64 <__aeabi_dcmplt>
 8005d18:	b158      	cbz	r0, 8005d32 <sqrt+0x4a>
 8005d1a:	f7ff feb7 	bl	8005a8c <__errno>
 8005d1e:	2321      	movs	r3, #33	; 0x21
 8005d20:	6003      	str	r3, [r0, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2300      	movs	r3, #0
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f7fa fd53 	bl	80007d4 <__aeabi_ddiv>
 8005d2e:	ec41 0b18 	vmov	d8, r0, r1
 8005d32:	eeb0 0a48 	vmov.f32	s0, s16
 8005d36:	eef0 0a68 	vmov.f32	s1, s17
 8005d3a:	ecbd 8b02 	vpop	{d8}
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}

08005d40 <__ieee754_asin>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	ed2d 8b04 	vpush	{d8-d9}
 8005d48:	ec55 4b10 	vmov	r4, r5, d0
 8005d4c:	4bcc      	ldr	r3, [pc, #816]	; (8006080 <__ieee754_asin+0x340>)
 8005d4e:	b083      	sub	sp, #12
 8005d50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005d54:	4598      	cmp	r8, r3
 8005d56:	9501      	str	r5, [sp, #4]
 8005d58:	dd35      	ble.n	8005dc6 <__ieee754_asin+0x86>
 8005d5a:	ee10 3a10 	vmov	r3, s0
 8005d5e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8005d62:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8005d66:	ea58 0303 	orrs.w	r3, r8, r3
 8005d6a:	d117      	bne.n	8005d9c <__ieee754_asin+0x5c>
 8005d6c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006018 <__ieee754_asin+0x2d8>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	ee10 0a10 	vmov	r0, s0
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa fc02 	bl	8000580 <__aeabi_dmul>
 8005d7c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006020 <__ieee754_asin+0x2e0>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fbf9 	bl	8000580 <__aeabi_dmul>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4630      	mov	r0, r6
 8005d94:	4639      	mov	r1, r7
 8005d96:	f7fa fa3d 	bl	8000214 <__adddf3>
 8005d9a:	e00b      	b.n	8005db4 <__ieee754_asin+0x74>
 8005d9c:	ee10 2a10 	vmov	r2, s0
 8005da0:	462b      	mov	r3, r5
 8005da2:	ee10 0a10 	vmov	r0, s0
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa fa32 	bl	8000210 <__aeabi_dsub>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	f7fa fd10 	bl	80007d4 <__aeabi_ddiv>
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	ec45 4b10 	vmov	d0, r4, r5
 8005dbc:	b003      	add	sp, #12
 8005dbe:	ecbd 8b04 	vpop	{d8-d9}
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc6:	4baf      	ldr	r3, [pc, #700]	; (8006084 <__ieee754_asin+0x344>)
 8005dc8:	4598      	cmp	r8, r3
 8005dca:	dc11      	bgt.n	8005df0 <__ieee754_asin+0xb0>
 8005dcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005dd0:	f280 80ae 	bge.w	8005f30 <__ieee754_asin+0x1f0>
 8005dd4:	a394      	add	r3, pc, #592	; (adr r3, 8006028 <__ieee754_asin+0x2e8>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	ee10 0a10 	vmov	r0, s0
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fa18 	bl	8000214 <__adddf3>
 8005de4:	4ba8      	ldr	r3, [pc, #672]	; (8006088 <__ieee754_asin+0x348>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	f7fa fe5a 	bl	8000aa0 <__aeabi_dcmpgt>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d1e3      	bne.n	8005db8 <__ieee754_asin+0x78>
 8005df0:	ec45 4b10 	vmov	d0, r4, r5
 8005df4:	f001 feae 	bl	8007b54 <fabs>
 8005df8:	49a3      	ldr	r1, [pc, #652]	; (8006088 <__ieee754_asin+0x348>)
 8005dfa:	ec53 2b10 	vmov	r2, r3, d0
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f7fa fa06 	bl	8000210 <__aeabi_dsub>
 8005e04:	4ba1      	ldr	r3, [pc, #644]	; (800608c <__ieee754_asin+0x34c>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	f7fa fbba 	bl	8000580 <__aeabi_dmul>
 8005e0c:	a388      	add	r3, pc, #544	; (adr r3, 8006030 <__ieee754_asin+0x2f0>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	4604      	mov	r4, r0
 8005e14:	460d      	mov	r5, r1
 8005e16:	f7fa fbb3 	bl	8000580 <__aeabi_dmul>
 8005e1a:	a387      	add	r3, pc, #540	; (adr r3, 8006038 <__ieee754_asin+0x2f8>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa f9f8 	bl	8000214 <__adddf3>
 8005e24:	4622      	mov	r2, r4
 8005e26:	462b      	mov	r3, r5
 8005e28:	f7fa fbaa 	bl	8000580 <__aeabi_dmul>
 8005e2c:	a384      	add	r3, pc, #528	; (adr r3, 8006040 <__ieee754_asin+0x300>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa f9ed 	bl	8000210 <__aeabi_dsub>
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	f7fa fba1 	bl	8000580 <__aeabi_dmul>
 8005e3e:	a382      	add	r3, pc, #520	; (adr r3, 8006048 <__ieee754_asin+0x308>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa f9e6 	bl	8000214 <__adddf3>
 8005e48:	4622      	mov	r2, r4
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	f7fa fb98 	bl	8000580 <__aeabi_dmul>
 8005e50:	a37f      	add	r3, pc, #508	; (adr r3, 8006050 <__ieee754_asin+0x310>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa f9db 	bl	8000210 <__aeabi_dsub>
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	f7fa fb8f 	bl	8000580 <__aeabi_dmul>
 8005e62:	a37d      	add	r3, pc, #500	; (adr r3, 8006058 <__ieee754_asin+0x318>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f7fa f9d4 	bl	8000214 <__adddf3>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	462b      	mov	r3, r5
 8005e70:	f7fa fb86 	bl	8000580 <__aeabi_dmul>
 8005e74:	a37a      	add	r3, pc, #488	; (adr r3, 8006060 <__ieee754_asin+0x320>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	ec41 0b18 	vmov	d8, r0, r1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa fb7d 	bl	8000580 <__aeabi_dmul>
 8005e86:	a378      	add	r3, pc, #480	; (adr r3, 8006068 <__ieee754_asin+0x328>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa f9c0 	bl	8000210 <__aeabi_dsub>
 8005e90:	4622      	mov	r2, r4
 8005e92:	462b      	mov	r3, r5
 8005e94:	f7fa fb74 	bl	8000580 <__aeabi_dmul>
 8005e98:	a375      	add	r3, pc, #468	; (adr r3, 8006070 <__ieee754_asin+0x330>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa f9b9 	bl	8000214 <__adddf3>
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	f7fa fb6b 	bl	8000580 <__aeabi_dmul>
 8005eaa:	a373      	add	r3, pc, #460	; (adr r3, 8006078 <__ieee754_asin+0x338>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa f9ae 	bl	8000210 <__aeabi_dsub>
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	f7fa fb62 	bl	8000580 <__aeabi_dmul>
 8005ebc:	4b72      	ldr	r3, [pc, #456]	; (8006088 <__ieee754_asin+0x348>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f7fa f9a8 	bl	8000214 <__adddf3>
 8005ec4:	ec45 4b10 	vmov	d0, r4, r5
 8005ec8:	4606      	mov	r6, r0
 8005eca:	460f      	mov	r7, r1
 8005ecc:	f001 f888 	bl	8006fe0 <__ieee754_sqrt>
 8005ed0:	4b6f      	ldr	r3, [pc, #444]	; (8006090 <__ieee754_asin+0x350>)
 8005ed2:	4598      	cmp	r8, r3
 8005ed4:	ec5b ab10 	vmov	sl, fp, d0
 8005ed8:	f340 80dc 	ble.w	8006094 <__ieee754_asin+0x354>
 8005edc:	4632      	mov	r2, r6
 8005ede:	463b      	mov	r3, r7
 8005ee0:	ec51 0b18 	vmov	r0, r1, d8
 8005ee4:	f7fa fc76 	bl	80007d4 <__aeabi_ddiv>
 8005ee8:	4652      	mov	r2, sl
 8005eea:	465b      	mov	r3, fp
 8005eec:	f7fa fb48 	bl	8000580 <__aeabi_dmul>
 8005ef0:	4652      	mov	r2, sl
 8005ef2:	465b      	mov	r3, fp
 8005ef4:	f7fa f98e 	bl	8000214 <__adddf3>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	f7fa f98a 	bl	8000214 <__adddf3>
 8005f00:	a347      	add	r3, pc, #284	; (adr r3, 8006020 <__ieee754_asin+0x2e0>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa f983 	bl	8000210 <__aeabi_dsub>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	a142      	add	r1, pc, #264	; (adr r1, 8006018 <__ieee754_asin+0x2d8>)
 8005f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f14:	f7fa f97c 	bl	8000210 <__aeabi_dsub>
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfdc      	itt	le
 8005f1e:	4602      	movle	r2, r0
 8005f20:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005f24:	4604      	mov	r4, r0
 8005f26:	460d      	mov	r5, r1
 8005f28:	bfdc      	itt	le
 8005f2a:	4614      	movle	r4, r2
 8005f2c:	461d      	movle	r5, r3
 8005f2e:	e743      	b.n	8005db8 <__ieee754_asin+0x78>
 8005f30:	ee10 2a10 	vmov	r2, s0
 8005f34:	ee10 0a10 	vmov	r0, s0
 8005f38:	462b      	mov	r3, r5
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	f7fa fb20 	bl	8000580 <__aeabi_dmul>
 8005f40:	a33b      	add	r3, pc, #236	; (adr r3, 8006030 <__ieee754_asin+0x2f0>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	f7fa fb19 	bl	8000580 <__aeabi_dmul>
 8005f4e:	a33a      	add	r3, pc, #232	; (adr r3, 8006038 <__ieee754_asin+0x2f8>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa f95e 	bl	8000214 <__adddf3>
 8005f58:	4632      	mov	r2, r6
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	f7fa fb10 	bl	8000580 <__aeabi_dmul>
 8005f60:	a337      	add	r3, pc, #220	; (adr r3, 8006040 <__ieee754_asin+0x300>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f7fa f953 	bl	8000210 <__aeabi_dsub>
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	f7fa fb07 	bl	8000580 <__aeabi_dmul>
 8005f72:	a335      	add	r3, pc, #212	; (adr r3, 8006048 <__ieee754_asin+0x308>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa f94c 	bl	8000214 <__adddf3>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	f7fa fafe 	bl	8000580 <__aeabi_dmul>
 8005f84:	a332      	add	r3, pc, #200	; (adr r3, 8006050 <__ieee754_asin+0x310>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa f941 	bl	8000210 <__aeabi_dsub>
 8005f8e:	4632      	mov	r2, r6
 8005f90:	463b      	mov	r3, r7
 8005f92:	f7fa faf5 	bl	8000580 <__aeabi_dmul>
 8005f96:	a330      	add	r3, pc, #192	; (adr r3, 8006058 <__ieee754_asin+0x318>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa f93a 	bl	8000214 <__adddf3>
 8005fa0:	4632      	mov	r2, r6
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	f7fa faec 	bl	8000580 <__aeabi_dmul>
 8005fa8:	a32d      	add	r3, pc, #180	; (adr r3, 8006060 <__ieee754_asin+0x320>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	4680      	mov	r8, r0
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	f7fa fae3 	bl	8000580 <__aeabi_dmul>
 8005fba:	a32b      	add	r3, pc, #172	; (adr r3, 8006068 <__ieee754_asin+0x328>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa f926 	bl	8000210 <__aeabi_dsub>
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	f7fa fada 	bl	8000580 <__aeabi_dmul>
 8005fcc:	a328      	add	r3, pc, #160	; (adr r3, 8006070 <__ieee754_asin+0x330>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f91f 	bl	8000214 <__adddf3>
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	463b      	mov	r3, r7
 8005fda:	f7fa fad1 	bl	8000580 <__aeabi_dmul>
 8005fde:	a326      	add	r3, pc, #152	; (adr r3, 8006078 <__ieee754_asin+0x338>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa f914 	bl	8000210 <__aeabi_dsub>
 8005fe8:	4632      	mov	r2, r6
 8005fea:	463b      	mov	r3, r7
 8005fec:	f7fa fac8 	bl	8000580 <__aeabi_dmul>
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <__ieee754_asin+0x348>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f7fa f90e 	bl	8000214 <__adddf3>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fbe8 	bl	80007d4 <__aeabi_ddiv>
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	f7fa faba 	bl	8000580 <__aeabi_dmul>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	e6bf      	b.n	8005d96 <__ieee754_asin+0x56>
 8006016:	bf00      	nop
 8006018:	54442d18 	.word	0x54442d18
 800601c:	3ff921fb 	.word	0x3ff921fb
 8006020:	33145c07 	.word	0x33145c07
 8006024:	3c91a626 	.word	0x3c91a626
 8006028:	8800759c 	.word	0x8800759c
 800602c:	7e37e43c 	.word	0x7e37e43c
 8006030:	0dfdf709 	.word	0x0dfdf709
 8006034:	3f023de1 	.word	0x3f023de1
 8006038:	7501b288 	.word	0x7501b288
 800603c:	3f49efe0 	.word	0x3f49efe0
 8006040:	b5688f3b 	.word	0xb5688f3b
 8006044:	3fa48228 	.word	0x3fa48228
 8006048:	0e884455 	.word	0x0e884455
 800604c:	3fc9c155 	.word	0x3fc9c155
 8006050:	03eb6f7d 	.word	0x03eb6f7d
 8006054:	3fd4d612 	.word	0x3fd4d612
 8006058:	55555555 	.word	0x55555555
 800605c:	3fc55555 	.word	0x3fc55555
 8006060:	b12e9282 	.word	0xb12e9282
 8006064:	3fb3b8c5 	.word	0x3fb3b8c5
 8006068:	1b8d0159 	.word	0x1b8d0159
 800606c:	3fe6066c 	.word	0x3fe6066c
 8006070:	9c598ac8 	.word	0x9c598ac8
 8006074:	40002ae5 	.word	0x40002ae5
 8006078:	1c8a2d4b 	.word	0x1c8a2d4b
 800607c:	40033a27 	.word	0x40033a27
 8006080:	3fefffff 	.word	0x3fefffff
 8006084:	3fdfffff 	.word	0x3fdfffff
 8006088:	3ff00000 	.word	0x3ff00000
 800608c:	3fe00000 	.word	0x3fe00000
 8006090:	3fef3332 	.word	0x3fef3332
 8006094:	ee10 2a10 	vmov	r2, s0
 8006098:	ee10 0a10 	vmov	r0, s0
 800609c:	465b      	mov	r3, fp
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa f8b8 	bl	8000214 <__adddf3>
 80060a4:	4632      	mov	r2, r6
 80060a6:	463b      	mov	r3, r7
 80060a8:	ec41 0b19 	vmov	d9, r0, r1
 80060ac:	ec51 0b18 	vmov	r0, r1, d8
 80060b0:	f7fa fb90 	bl	80007d4 <__aeabi_ddiv>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	ec51 0b19 	vmov	r0, r1, d9
 80060bc:	f7fa fa60 	bl	8000580 <__aeabi_dmul>
 80060c0:	f04f 0800 	mov.w	r8, #0
 80060c4:	4606      	mov	r6, r0
 80060c6:	460f      	mov	r7, r1
 80060c8:	4642      	mov	r2, r8
 80060ca:	465b      	mov	r3, fp
 80060cc:	4640      	mov	r0, r8
 80060ce:	4659      	mov	r1, fp
 80060d0:	f7fa fa56 	bl	8000580 <__aeabi_dmul>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa f898 	bl	8000210 <__aeabi_dsub>
 80060e0:	4642      	mov	r2, r8
 80060e2:	4604      	mov	r4, r0
 80060e4:	460d      	mov	r5, r1
 80060e6:	465b      	mov	r3, fp
 80060e8:	4650      	mov	r0, sl
 80060ea:	4659      	mov	r1, fp
 80060ec:	f7fa f892 	bl	8000214 <__adddf3>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4620      	mov	r0, r4
 80060f6:	4629      	mov	r1, r5
 80060f8:	f7fa fb6c 	bl	80007d4 <__aeabi_ddiv>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	f7fa f888 	bl	8000214 <__adddf3>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	a113      	add	r1, pc, #76	; (adr r1, 8006158 <__ieee754_asin+0x418>)
 800610a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610e:	f7fa f87f 	bl	8000210 <__aeabi_dsub>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4630      	mov	r0, r6
 8006118:	4639      	mov	r1, r7
 800611a:	f7fa f879 	bl	8000210 <__aeabi_dsub>
 800611e:	4642      	mov	r2, r8
 8006120:	4604      	mov	r4, r0
 8006122:	460d      	mov	r5, r1
 8006124:	465b      	mov	r3, fp
 8006126:	4640      	mov	r0, r8
 8006128:	4659      	mov	r1, fp
 800612a:	f7fa f873 	bl	8000214 <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	a10b      	add	r1, pc, #44	; (adr r1, 8006160 <__ieee754_asin+0x420>)
 8006134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006138:	f7fa f86a 	bl	8000210 <__aeabi_dsub>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa f864 	bl	8000210 <__aeabi_dsub>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	a104      	add	r1, pc, #16	; (adr r1, 8006160 <__ieee754_asin+0x420>)
 800614e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006152:	e6df      	b.n	8005f14 <__ieee754_asin+0x1d4>
 8006154:	f3af 8000 	nop.w
 8006158:	33145c07 	.word	0x33145c07
 800615c:	3c91a626 	.word	0x3c91a626
 8006160:	54442d18 	.word	0x54442d18
 8006164:	3fe921fb 	.word	0x3fe921fb

08006168 <__ieee754_pow>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ed2d 8b06 	vpush	{d8-d10}
 8006170:	b089      	sub	sp, #36	; 0x24
 8006172:	ed8d 1b00 	vstr	d1, [sp]
 8006176:	e9dd 2900 	ldrd	r2, r9, [sp]
 800617a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800617e:	ea58 0102 	orrs.w	r1, r8, r2
 8006182:	ec57 6b10 	vmov	r6, r7, d0
 8006186:	d115      	bne.n	80061b4 <__ieee754_pow+0x4c>
 8006188:	19b3      	adds	r3, r6, r6
 800618a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800618e:	4152      	adcs	r2, r2
 8006190:	4299      	cmp	r1, r3
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <__ieee754_pow+0x250>)
 8006194:	4193      	sbcs	r3, r2
 8006196:	f080 84d2 	bcs.w	8006b3e <__ieee754_pow+0x9d6>
 800619a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800619e:	4630      	mov	r0, r6
 80061a0:	4639      	mov	r1, r7
 80061a2:	f7fa f837 	bl	8000214 <__adddf3>
 80061a6:	ec41 0b10 	vmov	d0, r0, r1
 80061aa:	b009      	add	sp, #36	; 0x24
 80061ac:	ecbd 8b06 	vpop	{d8-d10}
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	4b81      	ldr	r3, [pc, #516]	; (80063bc <__ieee754_pow+0x254>)
 80061b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80061ba:	429c      	cmp	r4, r3
 80061bc:	ee10 aa10 	vmov	sl, s0
 80061c0:	463d      	mov	r5, r7
 80061c2:	dc06      	bgt.n	80061d2 <__ieee754_pow+0x6a>
 80061c4:	d101      	bne.n	80061ca <__ieee754_pow+0x62>
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d1e7      	bne.n	800619a <__ieee754_pow+0x32>
 80061ca:	4598      	cmp	r8, r3
 80061cc:	dc01      	bgt.n	80061d2 <__ieee754_pow+0x6a>
 80061ce:	d10f      	bne.n	80061f0 <__ieee754_pow+0x88>
 80061d0:	b172      	cbz	r2, 80061f0 <__ieee754_pow+0x88>
 80061d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80061d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80061da:	ea55 050a 	orrs.w	r5, r5, sl
 80061de:	d1dc      	bne.n	800619a <__ieee754_pow+0x32>
 80061e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80061e4:	18db      	adds	r3, r3, r3
 80061e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80061ea:	4152      	adcs	r2, r2
 80061ec:	429d      	cmp	r5, r3
 80061ee:	e7d0      	b.n	8006192 <__ieee754_pow+0x2a>
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da3b      	bge.n	800626c <__ieee754_pow+0x104>
 80061f4:	4b72      	ldr	r3, [pc, #456]	; (80063c0 <__ieee754_pow+0x258>)
 80061f6:	4598      	cmp	r8, r3
 80061f8:	dc51      	bgt.n	800629e <__ieee754_pow+0x136>
 80061fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80061fe:	4598      	cmp	r8, r3
 8006200:	f340 84ac 	ble.w	8006b5c <__ieee754_pow+0x9f4>
 8006204:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006208:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800620c:	2b14      	cmp	r3, #20
 800620e:	dd0f      	ble.n	8006230 <__ieee754_pow+0xc8>
 8006210:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006214:	fa22 f103 	lsr.w	r1, r2, r3
 8006218:	fa01 f303 	lsl.w	r3, r1, r3
 800621c:	4293      	cmp	r3, r2
 800621e:	f040 849d 	bne.w	8006b5c <__ieee754_pow+0x9f4>
 8006222:	f001 0101 	and.w	r1, r1, #1
 8006226:	f1c1 0302 	rsb	r3, r1, #2
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	b182      	cbz	r2, 8006250 <__ieee754_pow+0xe8>
 800622e:	e05f      	b.n	80062f0 <__ieee754_pow+0x188>
 8006230:	2a00      	cmp	r2, #0
 8006232:	d15b      	bne.n	80062ec <__ieee754_pow+0x184>
 8006234:	f1c3 0314 	rsb	r3, r3, #20
 8006238:	fa48 f103 	asr.w	r1, r8, r3
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	4543      	cmp	r3, r8
 8006242:	f040 8488 	bne.w	8006b56 <__ieee754_pow+0x9ee>
 8006246:	f001 0101 	and.w	r1, r1, #1
 800624a:	f1c1 0302 	rsb	r3, r1, #2
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <__ieee754_pow+0x25c>)
 8006252:	4598      	cmp	r8, r3
 8006254:	d132      	bne.n	80062bc <__ieee754_pow+0x154>
 8006256:	f1b9 0f00 	cmp.w	r9, #0
 800625a:	f280 8478 	bge.w	8006b4e <__ieee754_pow+0x9e6>
 800625e:	4959      	ldr	r1, [pc, #356]	; (80063c4 <__ieee754_pow+0x25c>)
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	2000      	movs	r0, #0
 8006266:	f7fa fab5 	bl	80007d4 <__aeabi_ddiv>
 800626a:	e79c      	b.n	80061a6 <__ieee754_pow+0x3e>
 800626c:	2300      	movs	r3, #0
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	2a00      	cmp	r2, #0
 8006272:	d13d      	bne.n	80062f0 <__ieee754_pow+0x188>
 8006274:	4b51      	ldr	r3, [pc, #324]	; (80063bc <__ieee754_pow+0x254>)
 8006276:	4598      	cmp	r8, r3
 8006278:	d1ea      	bne.n	8006250 <__ieee754_pow+0xe8>
 800627a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800627e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006282:	ea53 030a 	orrs.w	r3, r3, sl
 8006286:	f000 845a 	beq.w	8006b3e <__ieee754_pow+0x9d6>
 800628a:	4b4f      	ldr	r3, [pc, #316]	; (80063c8 <__ieee754_pow+0x260>)
 800628c:	429c      	cmp	r4, r3
 800628e:	dd08      	ble.n	80062a2 <__ieee754_pow+0x13a>
 8006290:	f1b9 0f00 	cmp.w	r9, #0
 8006294:	f2c0 8457 	blt.w	8006b46 <__ieee754_pow+0x9de>
 8006298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629c:	e783      	b.n	80061a6 <__ieee754_pow+0x3e>
 800629e:	2302      	movs	r3, #2
 80062a0:	e7e5      	b.n	800626e <__ieee754_pow+0x106>
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	f6bf af7a 	bge.w	80061a6 <__ieee754_pow+0x3e>
 80062b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80062b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062ba:	e774      	b.n	80061a6 <__ieee754_pow+0x3e>
 80062bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80062c0:	d106      	bne.n	80062d0 <__ieee754_pow+0x168>
 80062c2:	4632      	mov	r2, r6
 80062c4:	463b      	mov	r3, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7fa f959 	bl	8000580 <__aeabi_dmul>
 80062ce:	e76a      	b.n	80061a6 <__ieee754_pow+0x3e>
 80062d0:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <__ieee754_pow+0x264>)
 80062d2:	4599      	cmp	r9, r3
 80062d4:	d10c      	bne.n	80062f0 <__ieee754_pow+0x188>
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	db0a      	blt.n	80062f0 <__ieee754_pow+0x188>
 80062da:	ec47 6b10 	vmov	d0, r6, r7
 80062de:	b009      	add	sp, #36	; 0x24
 80062e0:	ecbd 8b06 	vpop	{d8-d10}
 80062e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	f000 be7a 	b.w	8006fe0 <__ieee754_sqrt>
 80062ec:	2300      	movs	r3, #0
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	ec47 6b10 	vmov	d0, r6, r7
 80062f4:	f001 fc2e 	bl	8007b54 <fabs>
 80062f8:	ec51 0b10 	vmov	r0, r1, d0
 80062fc:	f1ba 0f00 	cmp.w	sl, #0
 8006300:	d129      	bne.n	8006356 <__ieee754_pow+0x1ee>
 8006302:	b124      	cbz	r4, 800630e <__ieee754_pow+0x1a6>
 8006304:	4b2f      	ldr	r3, [pc, #188]	; (80063c4 <__ieee754_pow+0x25c>)
 8006306:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800630a:	429a      	cmp	r2, r3
 800630c:	d123      	bne.n	8006356 <__ieee754_pow+0x1ee>
 800630e:	f1b9 0f00 	cmp.w	r9, #0
 8006312:	da05      	bge.n	8006320 <__ieee754_pow+0x1b8>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	2000      	movs	r0, #0
 800631a:	492a      	ldr	r1, [pc, #168]	; (80063c4 <__ieee754_pow+0x25c>)
 800631c:	f7fa fa5a 	bl	80007d4 <__aeabi_ddiv>
 8006320:	2d00      	cmp	r5, #0
 8006322:	f6bf af40 	bge.w	80061a6 <__ieee754_pow+0x3e>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800632c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006330:	4323      	orrs	r3, r4
 8006332:	d108      	bne.n	8006346 <__ieee754_pow+0x1de>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	f7f9 ff68 	bl	8000210 <__aeabi_dsub>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e78f      	b.n	8006266 <__ieee754_pow+0xfe>
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	2b01      	cmp	r3, #1
 800634a:	f47f af2c 	bne.w	80061a6 <__ieee754_pow+0x3e>
 800634e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006352:	4619      	mov	r1, r3
 8006354:	e727      	b.n	80061a6 <__ieee754_pow+0x3e>
 8006356:	0feb      	lsrs	r3, r5, #31
 8006358:	3b01      	subs	r3, #1
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	9a06      	ldr	r2, [sp, #24]
 800635e:	9b04      	ldr	r3, [sp, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	d102      	bne.n	800636a <__ieee754_pow+0x202>
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	e7e6      	b.n	8006338 <__ieee754_pow+0x1d0>
 800636a:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <__ieee754_pow+0x268>)
 800636c:	4598      	cmp	r8, r3
 800636e:	f340 80fb 	ble.w	8006568 <__ieee754_pow+0x400>
 8006372:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006376:	4598      	cmp	r8, r3
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <__ieee754_pow+0x260>)
 800637a:	dd0c      	ble.n	8006396 <__ieee754_pow+0x22e>
 800637c:	429c      	cmp	r4, r3
 800637e:	dc0f      	bgt.n	80063a0 <__ieee754_pow+0x238>
 8006380:	f1b9 0f00 	cmp.w	r9, #0
 8006384:	da0f      	bge.n	80063a6 <__ieee754_pow+0x23e>
 8006386:	2000      	movs	r0, #0
 8006388:	b009      	add	sp, #36	; 0x24
 800638a:	ecbd 8b06 	vpop	{d8-d10}
 800638e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006392:	f001 bbd6 	b.w	8007b42 <__math_oflow>
 8006396:	429c      	cmp	r4, r3
 8006398:	dbf2      	blt.n	8006380 <__ieee754_pow+0x218>
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <__ieee754_pow+0x25c>)
 800639c:	429c      	cmp	r4, r3
 800639e:	dd19      	ble.n	80063d4 <__ieee754_pow+0x26c>
 80063a0:	f1b9 0f00 	cmp.w	r9, #0
 80063a4:	dcef      	bgt.n	8006386 <__ieee754_pow+0x21e>
 80063a6:	2000      	movs	r0, #0
 80063a8:	b009      	add	sp, #36	; 0x24
 80063aa:	ecbd 8b06 	vpop	{d8-d10}
 80063ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b2:	f001 bbbd 	b.w	8007b30 <__math_uflow>
 80063b6:	bf00      	nop
 80063b8:	fff00000 	.word	0xfff00000
 80063bc:	7ff00000 	.word	0x7ff00000
 80063c0:	433fffff 	.word	0x433fffff
 80063c4:	3ff00000 	.word	0x3ff00000
 80063c8:	3fefffff 	.word	0x3fefffff
 80063cc:	3fe00000 	.word	0x3fe00000
 80063d0:	41e00000 	.word	0x41e00000
 80063d4:	4b60      	ldr	r3, [pc, #384]	; (8006558 <__ieee754_pow+0x3f0>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	f7f9 ff1a 	bl	8000210 <__aeabi_dsub>
 80063dc:	a354      	add	r3, pc, #336	; (adr r3, 8006530 <__ieee754_pow+0x3c8>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	f7fa f8cb 	bl	8000580 <__aeabi_dmul>
 80063ea:	a353      	add	r3, pc, #332	; (adr r3, 8006538 <__ieee754_pow+0x3d0>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	4606      	mov	r6, r0
 80063f2:	460f      	mov	r7, r1
 80063f4:	4620      	mov	r0, r4
 80063f6:	4629      	mov	r1, r5
 80063f8:	f7fa f8c2 	bl	8000580 <__aeabi_dmul>
 80063fc:	4b57      	ldr	r3, [pc, #348]	; (800655c <__ieee754_pow+0x3f4>)
 80063fe:	4682      	mov	sl, r0
 8006400:	468b      	mov	fp, r1
 8006402:	2200      	movs	r2, #0
 8006404:	4620      	mov	r0, r4
 8006406:	4629      	mov	r1, r5
 8006408:	f7fa f8ba 	bl	8000580 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	a14b      	add	r1, pc, #300	; (adr r1, 8006540 <__ieee754_pow+0x3d8>)
 8006412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006416:	f7f9 fefb 	bl	8000210 <__aeabi_dsub>
 800641a:	4622      	mov	r2, r4
 800641c:	462b      	mov	r3, r5
 800641e:	f7fa f8af 	bl	8000580 <__aeabi_dmul>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	2000      	movs	r0, #0
 8006428:	494d      	ldr	r1, [pc, #308]	; (8006560 <__ieee754_pow+0x3f8>)
 800642a:	f7f9 fef1 	bl	8000210 <__aeabi_dsub>
 800642e:	4622      	mov	r2, r4
 8006430:	4680      	mov	r8, r0
 8006432:	4689      	mov	r9, r1
 8006434:	462b      	mov	r3, r5
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f7fa f8a1 	bl	8000580 <__aeabi_dmul>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4640      	mov	r0, r8
 8006444:	4649      	mov	r1, r9
 8006446:	f7fa f89b 	bl	8000580 <__aeabi_dmul>
 800644a:	a33f      	add	r3, pc, #252	; (adr r3, 8006548 <__ieee754_pow+0x3e0>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fa f896 	bl	8000580 <__aeabi_dmul>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4650      	mov	r0, sl
 800645a:	4659      	mov	r1, fp
 800645c:	f7f9 fed8 	bl	8000210 <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4680      	mov	r8, r0
 8006466:	4689      	mov	r9, r1
 8006468:	4630      	mov	r0, r6
 800646a:	4639      	mov	r1, r7
 800646c:	f7f9 fed2 	bl	8000214 <__adddf3>
 8006470:	2000      	movs	r0, #0
 8006472:	4632      	mov	r2, r6
 8006474:	463b      	mov	r3, r7
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
 800647a:	f7f9 fec9 	bl	8000210 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	f7f9 fec3 	bl	8000210 <__aeabi_dsub>
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	9a06      	ldr	r2, [sp, #24]
 800648e:	3b01      	subs	r3, #1
 8006490:	4313      	orrs	r3, r2
 8006492:	4682      	mov	sl, r0
 8006494:	468b      	mov	fp, r1
 8006496:	f040 81e7 	bne.w	8006868 <__ieee754_pow+0x700>
 800649a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006550 <__ieee754_pow+0x3e8>
 800649e:	eeb0 8a47 	vmov.f32	s16, s14
 80064a2:	eef0 8a67 	vmov.f32	s17, s15
 80064a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064aa:	2600      	movs	r6, #0
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b4:	f7f9 feac 	bl	8000210 <__aeabi_dsub>
 80064b8:	4622      	mov	r2, r4
 80064ba:	462b      	mov	r3, r5
 80064bc:	f7fa f860 	bl	8000580 <__aeabi_dmul>
 80064c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c4:	4680      	mov	r8, r0
 80064c6:	4689      	mov	r9, r1
 80064c8:	4650      	mov	r0, sl
 80064ca:	4659      	mov	r1, fp
 80064cc:	f7fa f858 	bl	8000580 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4640      	mov	r0, r8
 80064d6:	4649      	mov	r1, r9
 80064d8:	f7f9 fe9c 	bl	8000214 <__adddf3>
 80064dc:	4632      	mov	r2, r6
 80064de:	463b      	mov	r3, r7
 80064e0:	4680      	mov	r8, r0
 80064e2:	4689      	mov	r9, r1
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7fa f84a 	bl	8000580 <__aeabi_dmul>
 80064ec:	460b      	mov	r3, r1
 80064ee:	4604      	mov	r4, r0
 80064f0:	460d      	mov	r5, r1
 80064f2:	4602      	mov	r2, r0
 80064f4:	4649      	mov	r1, r9
 80064f6:	4640      	mov	r0, r8
 80064f8:	f7f9 fe8c 	bl	8000214 <__adddf3>
 80064fc:	4b19      	ldr	r3, [pc, #100]	; (8006564 <__ieee754_pow+0x3fc>)
 80064fe:	4299      	cmp	r1, r3
 8006500:	ec45 4b19 	vmov	d9, r4, r5
 8006504:	4606      	mov	r6, r0
 8006506:	460f      	mov	r7, r1
 8006508:	468b      	mov	fp, r1
 800650a:	f340 82f1 	ble.w	8006af0 <__ieee754_pow+0x988>
 800650e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006512:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006516:	4303      	orrs	r3, r0
 8006518:	f000 81e4 	beq.w	80068e4 <__ieee754_pow+0x77c>
 800651c:	ec51 0b18 	vmov	r0, r1, d8
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	f7fa fa9e 	bl	8000a64 <__aeabi_dcmplt>
 8006528:	3800      	subs	r0, #0
 800652a:	bf18      	it	ne
 800652c:	2001      	movne	r0, #1
 800652e:	e72b      	b.n	8006388 <__ieee754_pow+0x220>
 8006530:	60000000 	.word	0x60000000
 8006534:	3ff71547 	.word	0x3ff71547
 8006538:	f85ddf44 	.word	0xf85ddf44
 800653c:	3e54ae0b 	.word	0x3e54ae0b
 8006540:	55555555 	.word	0x55555555
 8006544:	3fd55555 	.word	0x3fd55555
 8006548:	652b82fe 	.word	0x652b82fe
 800654c:	3ff71547 	.word	0x3ff71547
 8006550:	00000000 	.word	0x00000000
 8006554:	bff00000 	.word	0xbff00000
 8006558:	3ff00000 	.word	0x3ff00000
 800655c:	3fd00000 	.word	0x3fd00000
 8006560:	3fe00000 	.word	0x3fe00000
 8006564:	408fffff 	.word	0x408fffff
 8006568:	4bd5      	ldr	r3, [pc, #852]	; (80068c0 <__ieee754_pow+0x758>)
 800656a:	402b      	ands	r3, r5
 800656c:	2200      	movs	r2, #0
 800656e:	b92b      	cbnz	r3, 800657c <__ieee754_pow+0x414>
 8006570:	4bd4      	ldr	r3, [pc, #848]	; (80068c4 <__ieee754_pow+0x75c>)
 8006572:	f7fa f805 	bl	8000580 <__aeabi_dmul>
 8006576:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800657a:	460c      	mov	r4, r1
 800657c:	1523      	asrs	r3, r4, #20
 800657e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006582:	4413      	add	r3, r2
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	4bd0      	ldr	r3, [pc, #832]	; (80068c8 <__ieee754_pow+0x760>)
 8006588:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800658c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006590:	429c      	cmp	r4, r3
 8006592:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006596:	dd08      	ble.n	80065aa <__ieee754_pow+0x442>
 8006598:	4bcc      	ldr	r3, [pc, #816]	; (80068cc <__ieee754_pow+0x764>)
 800659a:	429c      	cmp	r4, r3
 800659c:	f340 8162 	ble.w	8006864 <__ieee754_pow+0x6fc>
 80065a0:	9b05      	ldr	r3, [sp, #20]
 80065a2:	3301      	adds	r3, #1
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80065aa:	2400      	movs	r4, #0
 80065ac:	00e3      	lsls	r3, r4, #3
 80065ae:	9307      	str	r3, [sp, #28]
 80065b0:	4bc7      	ldr	r3, [pc, #796]	; (80068d0 <__ieee754_pow+0x768>)
 80065b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065b6:	ed93 7b00 	vldr	d7, [r3]
 80065ba:	4629      	mov	r1, r5
 80065bc:	ec53 2b17 	vmov	r2, r3, d7
 80065c0:	eeb0 9a47 	vmov.f32	s18, s14
 80065c4:	eef0 9a67 	vmov.f32	s19, s15
 80065c8:	4682      	mov	sl, r0
 80065ca:	f7f9 fe21 	bl	8000210 <__aeabi_dsub>
 80065ce:	4652      	mov	r2, sl
 80065d0:	4606      	mov	r6, r0
 80065d2:	460f      	mov	r7, r1
 80065d4:	462b      	mov	r3, r5
 80065d6:	ec51 0b19 	vmov	r0, r1, d9
 80065da:	f7f9 fe1b 	bl	8000214 <__adddf3>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	2000      	movs	r0, #0
 80065e4:	49bb      	ldr	r1, [pc, #748]	; (80068d4 <__ieee754_pow+0x76c>)
 80065e6:	f7fa f8f5 	bl	80007d4 <__aeabi_ddiv>
 80065ea:	ec41 0b1a 	vmov	d10, r0, r1
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4630      	mov	r0, r6
 80065f4:	4639      	mov	r1, r7
 80065f6:	f7f9 ffc3 	bl	8000580 <__aeabi_dmul>
 80065fa:	2300      	movs	r3, #0
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	9302      	str	r3, [sp, #8]
 8006602:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006606:	46ab      	mov	fp, r5
 8006608:	106d      	asrs	r5, r5, #1
 800660a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800660e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006612:	ec41 0b18 	vmov	d8, r0, r1
 8006616:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800661a:	2200      	movs	r2, #0
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	f7f9 ffac 	bl	8000580 <__aeabi_dmul>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4630      	mov	r0, r6
 800662e:	4639      	mov	r1, r7
 8006630:	f7f9 fdee 	bl	8000210 <__aeabi_dsub>
 8006634:	ec53 2b19 	vmov	r2, r3, d9
 8006638:	4606      	mov	r6, r0
 800663a:	460f      	mov	r7, r1
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7f9 fde6 	bl	8000210 <__aeabi_dsub>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4650      	mov	r0, sl
 800664a:	4659      	mov	r1, fp
 800664c:	f7f9 fde0 	bl	8000210 <__aeabi_dsub>
 8006650:	4642      	mov	r2, r8
 8006652:	464b      	mov	r3, r9
 8006654:	f7f9 ff94 	bl	8000580 <__aeabi_dmul>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4630      	mov	r0, r6
 800665e:	4639      	mov	r1, r7
 8006660:	f7f9 fdd6 	bl	8000210 <__aeabi_dsub>
 8006664:	ec53 2b1a 	vmov	r2, r3, d10
 8006668:	f7f9 ff8a 	bl	8000580 <__aeabi_dmul>
 800666c:	ec53 2b18 	vmov	r2, r3, d8
 8006670:	ec41 0b19 	vmov	d9, r0, r1
 8006674:	ec51 0b18 	vmov	r0, r1, d8
 8006678:	f7f9 ff82 	bl	8000580 <__aeabi_dmul>
 800667c:	a37c      	add	r3, pc, #496	; (adr r3, 8006870 <__ieee754_pow+0x708>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	4604      	mov	r4, r0
 8006684:	460d      	mov	r5, r1
 8006686:	f7f9 ff7b 	bl	8000580 <__aeabi_dmul>
 800668a:	a37b      	add	r3, pc, #492	; (adr r3, 8006878 <__ieee754_pow+0x710>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f7f9 fdc0 	bl	8000214 <__adddf3>
 8006694:	4622      	mov	r2, r4
 8006696:	462b      	mov	r3, r5
 8006698:	f7f9 ff72 	bl	8000580 <__aeabi_dmul>
 800669c:	a378      	add	r3, pc, #480	; (adr r3, 8006880 <__ieee754_pow+0x718>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f7f9 fdb7 	bl	8000214 <__adddf3>
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	f7f9 ff69 	bl	8000580 <__aeabi_dmul>
 80066ae:	a376      	add	r3, pc, #472	; (adr r3, 8006888 <__ieee754_pow+0x720>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fdae 	bl	8000214 <__adddf3>
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	f7f9 ff60 	bl	8000580 <__aeabi_dmul>
 80066c0:	a373      	add	r3, pc, #460	; (adr r3, 8006890 <__ieee754_pow+0x728>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fda5 	bl	8000214 <__adddf3>
 80066ca:	4622      	mov	r2, r4
 80066cc:	462b      	mov	r3, r5
 80066ce:	f7f9 ff57 	bl	8000580 <__aeabi_dmul>
 80066d2:	a371      	add	r3, pc, #452	; (adr r3, 8006898 <__ieee754_pow+0x730>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 fd9c 	bl	8000214 <__adddf3>
 80066dc:	4622      	mov	r2, r4
 80066de:	4606      	mov	r6, r0
 80066e0:	460f      	mov	r7, r1
 80066e2:	462b      	mov	r3, r5
 80066e4:	4620      	mov	r0, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7f9 ff4a 	bl	8000580 <__aeabi_dmul>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7f9 ff44 	bl	8000580 <__aeabi_dmul>
 80066f8:	4642      	mov	r2, r8
 80066fa:	4604      	mov	r4, r0
 80066fc:	460d      	mov	r5, r1
 80066fe:	464b      	mov	r3, r9
 8006700:	ec51 0b18 	vmov	r0, r1, d8
 8006704:	f7f9 fd86 	bl	8000214 <__adddf3>
 8006708:	ec53 2b19 	vmov	r2, r3, d9
 800670c:	f7f9 ff38 	bl	8000580 <__aeabi_dmul>
 8006710:	4622      	mov	r2, r4
 8006712:	462b      	mov	r3, r5
 8006714:	f7f9 fd7e 	bl	8000214 <__adddf3>
 8006718:	4642      	mov	r2, r8
 800671a:	4682      	mov	sl, r0
 800671c:	468b      	mov	fp, r1
 800671e:	464b      	mov	r3, r9
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7f9 ff2c 	bl	8000580 <__aeabi_dmul>
 8006728:	4b6b      	ldr	r3, [pc, #428]	; (80068d8 <__ieee754_pow+0x770>)
 800672a:	2200      	movs	r2, #0
 800672c:	4606      	mov	r6, r0
 800672e:	460f      	mov	r7, r1
 8006730:	f7f9 fd70 	bl	8000214 <__adddf3>
 8006734:	4652      	mov	r2, sl
 8006736:	465b      	mov	r3, fp
 8006738:	f7f9 fd6c 	bl	8000214 <__adddf3>
 800673c:	2000      	movs	r0, #0
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f7f9 ff19 	bl	8000580 <__aeabi_dmul>
 800674e:	4b62      	ldr	r3, [pc, #392]	; (80068d8 <__ieee754_pow+0x770>)
 8006750:	4680      	mov	r8, r0
 8006752:	4689      	mov	r9, r1
 8006754:	2200      	movs	r2, #0
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7f9 fd59 	bl	8000210 <__aeabi_dsub>
 800675e:	4632      	mov	r2, r6
 8006760:	463b      	mov	r3, r7
 8006762:	f7f9 fd55 	bl	8000210 <__aeabi_dsub>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4650      	mov	r0, sl
 800676c:	4659      	mov	r1, fp
 800676e:	f7f9 fd4f 	bl	8000210 <__aeabi_dsub>
 8006772:	ec53 2b18 	vmov	r2, r3, d8
 8006776:	f7f9 ff03 	bl	8000580 <__aeabi_dmul>
 800677a:	4622      	mov	r2, r4
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	462b      	mov	r3, r5
 8006782:	ec51 0b19 	vmov	r0, r1, d9
 8006786:	f7f9 fefb 	bl	8000580 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7f9 fd3f 	bl	8000214 <__adddf3>
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fd37 	bl	8000214 <__adddf3>
 80067a6:	a33e      	add	r3, pc, #248	; (adr r3, 80068a0 <__ieee754_pow+0x738>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	2000      	movs	r0, #0
 80067ae:	4604      	mov	r4, r0
 80067b0:	460d      	mov	r5, r1
 80067b2:	f7f9 fee5 	bl	8000580 <__aeabi_dmul>
 80067b6:	4642      	mov	r2, r8
 80067b8:	ec41 0b18 	vmov	d8, r0, r1
 80067bc:	464b      	mov	r3, r9
 80067be:	4620      	mov	r0, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7f9 fd25 	bl	8000210 <__aeabi_dsub>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4630      	mov	r0, r6
 80067cc:	4639      	mov	r1, r7
 80067ce:	f7f9 fd1f 	bl	8000210 <__aeabi_dsub>
 80067d2:	a335      	add	r3, pc, #212	; (adr r3, 80068a8 <__ieee754_pow+0x740>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fed2 	bl	8000580 <__aeabi_dmul>
 80067dc:	a334      	add	r3, pc, #208	; (adr r3, 80068b0 <__ieee754_pow+0x748>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	4620      	mov	r0, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	f7f9 fec9 	bl	8000580 <__aeabi_dmul>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4630      	mov	r0, r6
 80067f4:	4639      	mov	r1, r7
 80067f6:	f7f9 fd0d 	bl	8000214 <__adddf3>
 80067fa:	9a07      	ldr	r2, [sp, #28]
 80067fc:	4b37      	ldr	r3, [pc, #220]	; (80068dc <__ieee754_pow+0x774>)
 80067fe:	4413      	add	r3, r2
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f7f9 fd06 	bl	8000214 <__adddf3>
 8006808:	4682      	mov	sl, r0
 800680a:	9805      	ldr	r0, [sp, #20]
 800680c:	468b      	mov	fp, r1
 800680e:	f7f9 fe4d 	bl	80004ac <__aeabi_i2d>
 8006812:	9a07      	ldr	r2, [sp, #28]
 8006814:	4b32      	ldr	r3, [pc, #200]	; (80068e0 <__ieee754_pow+0x778>)
 8006816:	4413      	add	r3, r2
 8006818:	e9d3 8900 	ldrd	r8, r9, [r3]
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	4652      	mov	r2, sl
 8006822:	465b      	mov	r3, fp
 8006824:	ec51 0b18 	vmov	r0, r1, d8
 8006828:	f7f9 fcf4 	bl	8000214 <__adddf3>
 800682c:	4642      	mov	r2, r8
 800682e:	464b      	mov	r3, r9
 8006830:	f7f9 fcf0 	bl	8000214 <__adddf3>
 8006834:	4632      	mov	r2, r6
 8006836:	463b      	mov	r3, r7
 8006838:	f7f9 fcec 	bl	8000214 <__adddf3>
 800683c:	2000      	movs	r0, #0
 800683e:	4632      	mov	r2, r6
 8006840:	463b      	mov	r3, r7
 8006842:	4604      	mov	r4, r0
 8006844:	460d      	mov	r5, r1
 8006846:	f7f9 fce3 	bl	8000210 <__aeabi_dsub>
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	f7f9 fcdf 	bl	8000210 <__aeabi_dsub>
 8006852:	ec53 2b18 	vmov	r2, r3, d8
 8006856:	f7f9 fcdb 	bl	8000210 <__aeabi_dsub>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4650      	mov	r0, sl
 8006860:	4659      	mov	r1, fp
 8006862:	e610      	b.n	8006486 <__ieee754_pow+0x31e>
 8006864:	2401      	movs	r4, #1
 8006866:	e6a1      	b.n	80065ac <__ieee754_pow+0x444>
 8006868:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80068b8 <__ieee754_pow+0x750>
 800686c:	e617      	b.n	800649e <__ieee754_pow+0x336>
 800686e:	bf00      	nop
 8006870:	4a454eef 	.word	0x4a454eef
 8006874:	3fca7e28 	.word	0x3fca7e28
 8006878:	93c9db65 	.word	0x93c9db65
 800687c:	3fcd864a 	.word	0x3fcd864a
 8006880:	a91d4101 	.word	0xa91d4101
 8006884:	3fd17460 	.word	0x3fd17460
 8006888:	518f264d 	.word	0x518f264d
 800688c:	3fd55555 	.word	0x3fd55555
 8006890:	db6fabff 	.word	0xdb6fabff
 8006894:	3fdb6db6 	.word	0x3fdb6db6
 8006898:	33333303 	.word	0x33333303
 800689c:	3fe33333 	.word	0x3fe33333
 80068a0:	e0000000 	.word	0xe0000000
 80068a4:	3feec709 	.word	0x3feec709
 80068a8:	dc3a03fd 	.word	0xdc3a03fd
 80068ac:	3feec709 	.word	0x3feec709
 80068b0:	145b01f5 	.word	0x145b01f5
 80068b4:	be3e2fe0 	.word	0xbe3e2fe0
 80068b8:	00000000 	.word	0x00000000
 80068bc:	3ff00000 	.word	0x3ff00000
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	43400000 	.word	0x43400000
 80068c8:	0003988e 	.word	0x0003988e
 80068cc:	000bb679 	.word	0x000bb679
 80068d0:	08007dd8 	.word	0x08007dd8
 80068d4:	3ff00000 	.word	0x3ff00000
 80068d8:	40080000 	.word	0x40080000
 80068dc:	08007df8 	.word	0x08007df8
 80068e0:	08007de8 	.word	0x08007de8
 80068e4:	a3b5      	add	r3, pc, #724	; (adr r3, 8006bbc <__ieee754_pow+0xa54>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4640      	mov	r0, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	f7f9 fc91 	bl	8000214 <__adddf3>
 80068f2:	4622      	mov	r2, r4
 80068f4:	ec41 0b1a 	vmov	d10, r0, r1
 80068f8:	462b      	mov	r3, r5
 80068fa:	4630      	mov	r0, r6
 80068fc:	4639      	mov	r1, r7
 80068fe:	f7f9 fc87 	bl	8000210 <__aeabi_dsub>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	ec51 0b1a 	vmov	r0, r1, d10
 800690a:	f7fa f8c9 	bl	8000aa0 <__aeabi_dcmpgt>
 800690e:	2800      	cmp	r0, #0
 8006910:	f47f ae04 	bne.w	800651c <__ieee754_pow+0x3b4>
 8006914:	4aa4      	ldr	r2, [pc, #656]	; (8006ba8 <__ieee754_pow+0xa40>)
 8006916:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800691a:	4293      	cmp	r3, r2
 800691c:	f340 8108 	ble.w	8006b30 <__ieee754_pow+0x9c8>
 8006920:	151b      	asrs	r3, r3, #20
 8006922:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006926:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800692a:	fa4a f303 	asr.w	r3, sl, r3
 800692e:	445b      	add	r3, fp
 8006930:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006934:	4e9d      	ldr	r6, [pc, #628]	; (8006bac <__ieee754_pow+0xa44>)
 8006936:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800693a:	4116      	asrs	r6, r2
 800693c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006940:	2000      	movs	r0, #0
 8006942:	ea23 0106 	bic.w	r1, r3, r6
 8006946:	f1c2 0214 	rsb	r2, r2, #20
 800694a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800694e:	fa4a fa02 	asr.w	sl, sl, r2
 8006952:	f1bb 0f00 	cmp.w	fp, #0
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4620      	mov	r0, r4
 800695c:	4629      	mov	r1, r5
 800695e:	bfb8      	it	lt
 8006960:	f1ca 0a00 	rsblt	sl, sl, #0
 8006964:	f7f9 fc54 	bl	8000210 <__aeabi_dsub>
 8006968:	ec41 0b19 	vmov	d9, r0, r1
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	ec51 0b19 	vmov	r0, r1, d9
 8006974:	f7f9 fc4e 	bl	8000214 <__adddf3>
 8006978:	a37b      	add	r3, pc, #492	; (adr r3, 8006b68 <__ieee754_pow+0xa00>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	2000      	movs	r0, #0
 8006980:	4604      	mov	r4, r0
 8006982:	460d      	mov	r5, r1
 8006984:	f7f9 fdfc 	bl	8000580 <__aeabi_dmul>
 8006988:	ec53 2b19 	vmov	r2, r3, d9
 800698c:	4606      	mov	r6, r0
 800698e:	460f      	mov	r7, r1
 8006990:	4620      	mov	r0, r4
 8006992:	4629      	mov	r1, r5
 8006994:	f7f9 fc3c 	bl	8000210 <__aeabi_dsub>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f7f9 fc36 	bl	8000210 <__aeabi_dsub>
 80069a4:	a372      	add	r3, pc, #456	; (adr r3, 8006b70 <__ieee754_pow+0xa08>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f7f9 fde9 	bl	8000580 <__aeabi_dmul>
 80069ae:	a372      	add	r3, pc, #456	; (adr r3, 8006b78 <__ieee754_pow+0xa10>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	4620      	mov	r0, r4
 80069ba:	4629      	mov	r1, r5
 80069bc:	f7f9 fde0 	bl	8000580 <__aeabi_dmul>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4640      	mov	r0, r8
 80069c6:	4649      	mov	r1, r9
 80069c8:	f7f9 fc24 	bl	8000214 <__adddf3>
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7f9 fc1c 	bl	8000214 <__adddf3>
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	4680      	mov	r8, r0
 80069e2:	4689      	mov	r9, r1
 80069e4:	f7f9 fc14 	bl	8000210 <__aeabi_dsub>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4620      	mov	r0, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	f7f9 fc0e 	bl	8000210 <__aeabi_dsub>
 80069f4:	4642      	mov	r2, r8
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	464b      	mov	r3, r9
 80069fc:	4640      	mov	r0, r8
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7f9 fdbe 	bl	8000580 <__aeabi_dmul>
 8006a04:	a35e      	add	r3, pc, #376	; (adr r3, 8006b80 <__ieee754_pow+0xa18>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	f7f9 fdb7 	bl	8000580 <__aeabi_dmul>
 8006a12:	a35d      	add	r3, pc, #372	; (adr r3, 8006b88 <__ieee754_pow+0xa20>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f7f9 fbfa 	bl	8000210 <__aeabi_dsub>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	462b      	mov	r3, r5
 8006a20:	f7f9 fdae 	bl	8000580 <__aeabi_dmul>
 8006a24:	a35a      	add	r3, pc, #360	; (adr r3, 8006b90 <__ieee754_pow+0xa28>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 fbf3 	bl	8000214 <__adddf3>
 8006a2e:	4622      	mov	r2, r4
 8006a30:	462b      	mov	r3, r5
 8006a32:	f7f9 fda5 	bl	8000580 <__aeabi_dmul>
 8006a36:	a358      	add	r3, pc, #352	; (adr r3, 8006b98 <__ieee754_pow+0xa30>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f7f9 fbe8 	bl	8000210 <__aeabi_dsub>
 8006a40:	4622      	mov	r2, r4
 8006a42:	462b      	mov	r3, r5
 8006a44:	f7f9 fd9c 	bl	8000580 <__aeabi_dmul>
 8006a48:	a355      	add	r3, pc, #340	; (adr r3, 8006ba0 <__ieee754_pow+0xa38>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7f9 fbe1 	bl	8000214 <__adddf3>
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	f7f9 fd93 	bl	8000580 <__aeabi_dmul>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4640      	mov	r0, r8
 8006a60:	4649      	mov	r1, r9
 8006a62:	f7f9 fbd5 	bl	8000210 <__aeabi_dsub>
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7f9 fd85 	bl	8000580 <__aeabi_dmul>
 8006a76:	2200      	movs	r2, #0
 8006a78:	ec41 0b19 	vmov	d9, r0, r1
 8006a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 fbc4 	bl	8000210 <__aeabi_dsub>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	ec51 0b19 	vmov	r0, r1, d9
 8006a90:	f7f9 fea0 	bl	80007d4 <__aeabi_ddiv>
 8006a94:	4632      	mov	r2, r6
 8006a96:	4604      	mov	r4, r0
 8006a98:	460d      	mov	r5, r1
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7f9 fd6e 	bl	8000580 <__aeabi_dmul>
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	f7f9 fbb4 	bl	8000214 <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7f9 fbac 	bl	8000210 <__aeabi_dsub>
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	f7f9 fba8 	bl	8000210 <__aeabi_dsub>
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	493a      	ldr	r1, [pc, #232]	; (8006bb0 <__ieee754_pow+0xa48>)
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f7f9 fba2 	bl	8000210 <__aeabi_dsub>
 8006acc:	ec41 0b10 	vmov	d0, r0, r1
 8006ad0:	ee10 3a90 	vmov	r3, s1
 8006ad4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006adc:	da2b      	bge.n	8006b36 <__ieee754_pow+0x9ce>
 8006ade:	4650      	mov	r0, sl
 8006ae0:	f001 f8d6 	bl	8007c90 <scalbn>
 8006ae4:	ec51 0b10 	vmov	r0, r1, d0
 8006ae8:	ec53 2b18 	vmov	r2, r3, d8
 8006aec:	f7ff bbed 	b.w	80062ca <__ieee754_pow+0x162>
 8006af0:	4b30      	ldr	r3, [pc, #192]	; (8006bb4 <__ieee754_pow+0xa4c>)
 8006af2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006af6:	429e      	cmp	r6, r3
 8006af8:	f77f af0c 	ble.w	8006914 <__ieee754_pow+0x7ac>
 8006afc:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <__ieee754_pow+0xa50>)
 8006afe:	440b      	add	r3, r1
 8006b00:	4303      	orrs	r3, r0
 8006b02:	d009      	beq.n	8006b18 <__ieee754_pow+0x9b0>
 8006b04:	ec51 0b18 	vmov	r0, r1, d8
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f7f9 ffaa 	bl	8000a64 <__aeabi_dcmplt>
 8006b10:	3800      	subs	r0, #0
 8006b12:	bf18      	it	ne
 8006b14:	2001      	movne	r0, #1
 8006b16:	e447      	b.n	80063a8 <__ieee754_pow+0x240>
 8006b18:	4622      	mov	r2, r4
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	f7f9 fb78 	bl	8000210 <__aeabi_dsub>
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	f7f9 ffb2 	bl	8000a8c <__aeabi_dcmpge>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	f43f aef3 	beq.w	8006914 <__ieee754_pow+0x7ac>
 8006b2e:	e7e9      	b.n	8006b04 <__ieee754_pow+0x99c>
 8006b30:	f04f 0a00 	mov.w	sl, #0
 8006b34:	e71a      	b.n	800696c <__ieee754_pow+0x804>
 8006b36:	ec51 0b10 	vmov	r0, r1, d0
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	e7d4      	b.n	8006ae8 <__ieee754_pow+0x980>
 8006b3e:	491c      	ldr	r1, [pc, #112]	; (8006bb0 <__ieee754_pow+0xa48>)
 8006b40:	2000      	movs	r0, #0
 8006b42:	f7ff bb30 	b.w	80061a6 <__ieee754_pow+0x3e>
 8006b46:	2000      	movs	r0, #0
 8006b48:	2100      	movs	r1, #0
 8006b4a:	f7ff bb2c 	b.w	80061a6 <__ieee754_pow+0x3e>
 8006b4e:	4630      	mov	r0, r6
 8006b50:	4639      	mov	r1, r7
 8006b52:	f7ff bb28 	b.w	80061a6 <__ieee754_pow+0x3e>
 8006b56:	9204      	str	r2, [sp, #16]
 8006b58:	f7ff bb7a 	b.w	8006250 <__ieee754_pow+0xe8>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f7ff bb64 	b.w	800622a <__ieee754_pow+0xc2>
 8006b62:	bf00      	nop
 8006b64:	f3af 8000 	nop.w
 8006b68:	00000000 	.word	0x00000000
 8006b6c:	3fe62e43 	.word	0x3fe62e43
 8006b70:	fefa39ef 	.word	0xfefa39ef
 8006b74:	3fe62e42 	.word	0x3fe62e42
 8006b78:	0ca86c39 	.word	0x0ca86c39
 8006b7c:	be205c61 	.word	0xbe205c61
 8006b80:	72bea4d0 	.word	0x72bea4d0
 8006b84:	3e663769 	.word	0x3e663769
 8006b88:	c5d26bf1 	.word	0xc5d26bf1
 8006b8c:	3ebbbd41 	.word	0x3ebbbd41
 8006b90:	af25de2c 	.word	0xaf25de2c
 8006b94:	3f11566a 	.word	0x3f11566a
 8006b98:	16bebd93 	.word	0x16bebd93
 8006b9c:	3f66c16c 	.word	0x3f66c16c
 8006ba0:	5555553e 	.word	0x5555553e
 8006ba4:	3fc55555 	.word	0x3fc55555
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	000fffff 	.word	0x000fffff
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	4090cbff 	.word	0x4090cbff
 8006bb8:	3f6f3400 	.word	0x3f6f3400
 8006bbc:	652b82fe 	.word	0x652b82fe
 8006bc0:	3c971547 	.word	0x3c971547
 8006bc4:	00000000 	.word	0x00000000

08006bc8 <__ieee754_rem_pio2>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	ec55 4b10 	vmov	r4, r5, d0
 8006bd4:	4bca      	ldr	r3, [pc, #808]	; (8006f00 <__ieee754_rem_pio2+0x338>)
 8006bd6:	b08b      	sub	sp, #44	; 0x2c
 8006bd8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006bdc:	4598      	cmp	r8, r3
 8006bde:	4682      	mov	sl, r0
 8006be0:	9502      	str	r5, [sp, #8]
 8006be2:	dc08      	bgt.n	8006bf6 <__ieee754_rem_pio2+0x2e>
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	ed80 0b00 	vstr	d0, [r0]
 8006bec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006bf0:	f04f 0b00 	mov.w	fp, #0
 8006bf4:	e028      	b.n	8006c48 <__ieee754_rem_pio2+0x80>
 8006bf6:	4bc3      	ldr	r3, [pc, #780]	; (8006f04 <__ieee754_rem_pio2+0x33c>)
 8006bf8:	4598      	cmp	r8, r3
 8006bfa:	dc78      	bgt.n	8006cee <__ieee754_rem_pio2+0x126>
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	4ec2      	ldr	r6, [pc, #776]	; (8006f08 <__ieee754_rem_pio2+0x340>)
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	ee10 0a10 	vmov	r0, s0
 8006c06:	a3b0      	add	r3, pc, #704	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x300>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	dd39      	ble.n	8006c84 <__ieee754_rem_pio2+0xbc>
 8006c10:	f7f9 fafe 	bl	8000210 <__aeabi_dsub>
 8006c14:	45b0      	cmp	r8, r6
 8006c16:	4604      	mov	r4, r0
 8006c18:	460d      	mov	r5, r1
 8006c1a:	d01b      	beq.n	8006c54 <__ieee754_rem_pio2+0x8c>
 8006c1c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x308>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 faf5 	bl	8000210 <__aeabi_dsub>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	e9ca 2300 	strd	r2, r3, [sl]
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7f9 faed 	bl	8000210 <__aeabi_dsub>
 8006c36:	a3a6      	add	r3, pc, #664	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x308>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 fae8 	bl	8000210 <__aeabi_dsub>
 8006c40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c44:	f04f 0b01 	mov.w	fp, #1
 8006c48:	4658      	mov	r0, fp
 8006c4a:	b00b      	add	sp, #44	; 0x2c
 8006c4c:	ecbd 8b02 	vpop	{d8}
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x310>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fad9 	bl	8000210 <__aeabi_dsub>
 8006c5e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x318>)
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	f7f9 fad2 	bl	8000210 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9ca 2300 	strd	r2, r3, [sl]
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 faca 	bl	8000210 <__aeabi_dsub>
 8006c7c:	a398      	add	r3, pc, #608	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x318>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	e7db      	b.n	8006c3c <__ieee754_rem_pio2+0x74>
 8006c84:	f7f9 fac6 	bl	8000214 <__adddf3>
 8006c88:	45b0      	cmp	r8, r6
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	d016      	beq.n	8006cbe <__ieee754_rem_pio2+0xf6>
 8006c90:	a38f      	add	r3, pc, #572	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x308>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fabd 	bl	8000214 <__adddf3>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9ca 2300 	strd	r2, r3, [sl]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fab3 	bl	8000210 <__aeabi_dsub>
 8006caa:	a389      	add	r3, pc, #548	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x308>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fab0 	bl	8000214 <__adddf3>
 8006cb4:	f04f 3bff 	mov.w	fp, #4294967295
 8006cb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cbc:	e7c4      	b.n	8006c48 <__ieee754_rem_pio2+0x80>
 8006cbe:	a386      	add	r3, pc, #536	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x310>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 faa6 	bl	8000214 <__adddf3>
 8006cc8:	a385      	add	r3, pc, #532	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x318>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	460d      	mov	r5, r1
 8006cd2:	f7f9 fa9f 	bl	8000214 <__adddf3>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	e9ca 2300 	strd	r2, r3, [sl]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fa95 	bl	8000210 <__aeabi_dsub>
 8006ce6:	a37e      	add	r3, pc, #504	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x318>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	e7e0      	b.n	8006cb0 <__ieee754_rem_pio2+0xe8>
 8006cee:	4b87      	ldr	r3, [pc, #540]	; (8006f0c <__ieee754_rem_pio2+0x344>)
 8006cf0:	4598      	cmp	r8, r3
 8006cf2:	f300 80d9 	bgt.w	8006ea8 <__ieee754_rem_pio2+0x2e0>
 8006cf6:	f000 ff2d 	bl	8007b54 <fabs>
 8006cfa:	ec55 4b10 	vmov	r4, r5, d0
 8006cfe:	ee10 0a10 	vmov	r0, s0
 8006d02:	a379      	add	r3, pc, #484	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x320>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fc39 	bl	8000580 <__aeabi_dmul>
 8006d0e:	4b80      	ldr	r3, [pc, #512]	; (8006f10 <__ieee754_rem_pio2+0x348>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	f7f9 fa7f 	bl	8000214 <__adddf3>
 8006d16:	f7f9 fee3 	bl	8000ae0 <__aeabi_d2iz>
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	f7f9 fbc6 	bl	80004ac <__aeabi_i2d>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	ec43 2b18 	vmov	d8, r2, r3
 8006d28:	a367      	add	r3, pc, #412	; (adr r3, 8006ec8 <__ieee754_rem_pio2+0x300>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fc27 	bl	8000580 <__aeabi_dmul>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fa69 	bl	8000210 <__aeabi_dsub>
 8006d3e:	a364      	add	r3, pc, #400	; (adr r3, 8006ed0 <__ieee754_rem_pio2+0x308>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	ec51 0b18 	vmov	r0, r1, d8
 8006d4c:	f7f9 fc18 	bl	8000580 <__aeabi_dmul>
 8006d50:	f1bb 0f1f 	cmp.w	fp, #31
 8006d54:	4604      	mov	r4, r0
 8006d56:	460d      	mov	r5, r1
 8006d58:	dc0d      	bgt.n	8006d76 <__ieee754_rem_pio2+0x1ae>
 8006d5a:	4b6e      	ldr	r3, [pc, #440]	; (8006f14 <__ieee754_rem_pio2+0x34c>)
 8006d5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	4543      	cmp	r3, r8
 8006d66:	d006      	beq.n	8006d76 <__ieee754_rem_pio2+0x1ae>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 fa4e 	bl	8000210 <__aeabi_dsub>
 8006d74:	e00f      	b.n	8006d96 <__ieee754_rem_pio2+0x1ce>
 8006d76:	462b      	mov	r3, r5
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 fa47 	bl	8000210 <__aeabi_dsub>
 8006d82:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006d90:	f1b8 0f10 	cmp.w	r8, #16
 8006d94:	dc02      	bgt.n	8006d9c <__ieee754_rem_pio2+0x1d4>
 8006d96:	e9ca 0100 	strd	r0, r1, [sl]
 8006d9a:	e039      	b.n	8006e10 <__ieee754_rem_pio2+0x248>
 8006d9c:	a34e      	add	r3, pc, #312	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x310>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	ec51 0b18 	vmov	r0, r1, d8
 8006da6:	f7f9 fbeb 	bl	8000580 <__aeabi_dmul>
 8006daa:	4604      	mov	r4, r0
 8006dac:	460d      	mov	r5, r1
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fa2b 	bl	8000210 <__aeabi_dsub>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	4689      	mov	r9, r1
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7f9 fa23 	bl	8000210 <__aeabi_dsub>
 8006dca:	4622      	mov	r2, r4
 8006dcc:	462b      	mov	r3, r5
 8006dce:	f7f9 fa1f 	bl	8000210 <__aeabi_dsub>
 8006dd2:	a343      	add	r3, pc, #268	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x318>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	4604      	mov	r4, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	ec51 0b18 	vmov	r0, r1, d8
 8006de0:	f7f9 fbce 	bl	8000580 <__aeabi_dmul>
 8006de4:	4622      	mov	r2, r4
 8006de6:	462b      	mov	r3, r5
 8006de8:	f7f9 fa12 	bl	8000210 <__aeabi_dsub>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4604      	mov	r4, r0
 8006df2:	460d      	mov	r5, r1
 8006df4:	4640      	mov	r0, r8
 8006df6:	4649      	mov	r1, r9
 8006df8:	f7f9 fa0a 	bl	8000210 <__aeabi_dsub>
 8006dfc:	9a03      	ldr	r2, [sp, #12]
 8006dfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b31      	cmp	r3, #49	; 0x31
 8006e06:	dc24      	bgt.n	8006e52 <__ieee754_rem_pio2+0x28a>
 8006e08:	e9ca 0100 	strd	r0, r1, [sl]
 8006e0c:	4646      	mov	r6, r8
 8006e0e:	464f      	mov	r7, r9
 8006e10:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e14:	4630      	mov	r0, r6
 8006e16:	4642      	mov	r2, r8
 8006e18:	464b      	mov	r3, r9
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 f9f8 	bl	8000210 <__aeabi_dsub>
 8006e20:	462b      	mov	r3, r5
 8006e22:	4622      	mov	r2, r4
 8006e24:	f7f9 f9f4 	bl	8000210 <__aeabi_dsub>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e30:	f6bf af0a 	bge.w	8006c48 <__ieee754_rem_pio2+0x80>
 8006e34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e38:	f8ca 3004 	str.w	r3, [sl, #4]
 8006e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e40:	f8ca 8000 	str.w	r8, [sl]
 8006e44:	f8ca 0008 	str.w	r0, [sl, #8]
 8006e48:	f8ca 300c 	str.w	r3, [sl, #12]
 8006e4c:	f1cb 0b00 	rsb	fp, fp, #0
 8006e50:	e6fa      	b.n	8006c48 <__ieee754_rem_pio2+0x80>
 8006e52:	a327      	add	r3, pc, #156	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x328>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	ec51 0b18 	vmov	r0, r1, d8
 8006e5c:	f7f9 fb90 	bl	8000580 <__aeabi_dmul>
 8006e60:	4604      	mov	r4, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 f9d0 	bl	8000210 <__aeabi_dsub>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	4640      	mov	r0, r8
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	f7f9 f9c8 	bl	8000210 <__aeabi_dsub>
 8006e80:	4622      	mov	r2, r4
 8006e82:	462b      	mov	r3, r5
 8006e84:	f7f9 f9c4 	bl	8000210 <__aeabi_dsub>
 8006e88:	a31b      	add	r3, pc, #108	; (adr r3, 8006ef8 <__ieee754_rem_pio2+0x330>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	4604      	mov	r4, r0
 8006e90:	460d      	mov	r5, r1
 8006e92:	ec51 0b18 	vmov	r0, r1, d8
 8006e96:	f7f9 fb73 	bl	8000580 <__aeabi_dmul>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	f7f9 f9b7 	bl	8000210 <__aeabi_dsub>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	e75f      	b.n	8006d68 <__ieee754_rem_pio2+0x1a0>
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <__ieee754_rem_pio2+0x350>)
 8006eaa:	4598      	cmp	r8, r3
 8006eac:	dd36      	ble.n	8006f1c <__ieee754_rem_pio2+0x354>
 8006eae:	ee10 2a10 	vmov	r2, s0
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7f9 f9aa 	bl	8000210 <__aeabi_dsub>
 8006ebc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ec0:	e9ca 0100 	strd	r0, r1, [sl]
 8006ec4:	e694      	b.n	8006bf0 <__ieee754_rem_pio2+0x28>
 8006ec6:	bf00      	nop
 8006ec8:	54400000 	.word	0x54400000
 8006ecc:	3ff921fb 	.word	0x3ff921fb
 8006ed0:	1a626331 	.word	0x1a626331
 8006ed4:	3dd0b461 	.word	0x3dd0b461
 8006ed8:	1a600000 	.word	0x1a600000
 8006edc:	3dd0b461 	.word	0x3dd0b461
 8006ee0:	2e037073 	.word	0x2e037073
 8006ee4:	3ba3198a 	.word	0x3ba3198a
 8006ee8:	6dc9c883 	.word	0x6dc9c883
 8006eec:	3fe45f30 	.word	0x3fe45f30
 8006ef0:	2e000000 	.word	0x2e000000
 8006ef4:	3ba3198a 	.word	0x3ba3198a
 8006ef8:	252049c1 	.word	0x252049c1
 8006efc:	397b839a 	.word	0x397b839a
 8006f00:	3fe921fb 	.word	0x3fe921fb
 8006f04:	4002d97b 	.word	0x4002d97b
 8006f08:	3ff921fb 	.word	0x3ff921fb
 8006f0c:	413921fb 	.word	0x413921fb
 8006f10:	3fe00000 	.word	0x3fe00000
 8006f14:	08007e08 	.word	0x08007e08
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006f20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006f24:	ee10 0a10 	vmov	r0, s0
 8006f28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006f2c:	ee10 6a10 	vmov	r6, s0
 8006f30:	460f      	mov	r7, r1
 8006f32:	f7f9 fdd5 	bl	8000ae0 <__aeabi_d2iz>
 8006f36:	f7f9 fab9 	bl	80004ac <__aeabi_i2d>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f46:	f7f9 f963 	bl	8000210 <__aeabi_dsub>
 8006f4a:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <__ieee754_rem_pio2+0x410>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f7f9 fb17 	bl	8000580 <__aeabi_dmul>
 8006f52:	460f      	mov	r7, r1
 8006f54:	4606      	mov	r6, r0
 8006f56:	f7f9 fdc3 	bl	8000ae0 <__aeabi_d2iz>
 8006f5a:	f7f9 faa7 	bl	80004ac <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4630      	mov	r0, r6
 8006f64:	4639      	mov	r1, r7
 8006f66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f6a:	f7f9 f951 	bl	8000210 <__aeabi_dsub>
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <__ieee754_rem_pio2+0x410>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	f7f9 fb05 	bl	8000580 <__aeabi_dmul>
 8006f76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f7a:	ad04      	add	r5, sp, #16
 8006f7c:	f04f 0803 	mov.w	r8, #3
 8006f80:	46a9      	mov	r9, r5
 8006f82:	2600      	movs	r6, #0
 8006f84:	2700      	movs	r7, #0
 8006f86:	4632      	mov	r2, r6
 8006f88:	463b      	mov	r3, r7
 8006f8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006f8e:	46c3      	mov	fp, r8
 8006f90:	3d08      	subs	r5, #8
 8006f92:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f96:	f7f9 fd5b 	bl	8000a50 <__aeabi_dcmpeq>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d1f3      	bne.n	8006f86 <__ieee754_rem_pio2+0x3be>
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <__ieee754_rem_pio2+0x414>)
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	465b      	mov	r3, fp
 8006faa:	4651      	mov	r1, sl
 8006fac:	4648      	mov	r0, r9
 8006fae:	f000 f993 	bl	80072d8 <__kernel_rem_pio2>
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	4683      	mov	fp, r0
 8006fb8:	f6bf ae46 	bge.w	8006c48 <__ieee754_rem_pio2+0x80>
 8006fbc:	e9da 2100 	ldrd	r2, r1, [sl]
 8006fc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc4:	e9ca 2300 	strd	r2, r3, [sl]
 8006fc8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006fcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fd0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006fd4:	e73a      	b.n	8006e4c <__ieee754_rem_pio2+0x284>
 8006fd6:	bf00      	nop
 8006fd8:	41700000 	.word	0x41700000
 8006fdc:	08007e88 	.word	0x08007e88

08006fe0 <__ieee754_sqrt>:
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	ec55 4b10 	vmov	r4, r5, d0
 8006fe8:	4e55      	ldr	r6, [pc, #340]	; (8007140 <__ieee754_sqrt+0x160>)
 8006fea:	43ae      	bics	r6, r5
 8006fec:	ee10 0a10 	vmov	r0, s0
 8006ff0:	ee10 3a10 	vmov	r3, s0
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	d110      	bne.n	800701c <__ieee754_sqrt+0x3c>
 8006ffa:	ee10 2a10 	vmov	r2, s0
 8006ffe:	462b      	mov	r3, r5
 8007000:	f7f9 fabe 	bl	8000580 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4620      	mov	r0, r4
 800700a:	4629      	mov	r1, r5
 800700c:	f7f9 f902 	bl	8000214 <__adddf3>
 8007010:	4604      	mov	r4, r0
 8007012:	460d      	mov	r5, r1
 8007014:	ec45 4b10 	vmov	d0, r4, r5
 8007018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701c:	2d00      	cmp	r5, #0
 800701e:	dc10      	bgt.n	8007042 <__ieee754_sqrt+0x62>
 8007020:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007024:	4330      	orrs	r0, r6
 8007026:	d0f5      	beq.n	8007014 <__ieee754_sqrt+0x34>
 8007028:	b15d      	cbz	r5, 8007042 <__ieee754_sqrt+0x62>
 800702a:	ee10 2a10 	vmov	r2, s0
 800702e:	462b      	mov	r3, r5
 8007030:	ee10 0a10 	vmov	r0, s0
 8007034:	f7f9 f8ec 	bl	8000210 <__aeabi_dsub>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	f7f9 fbca 	bl	80007d4 <__aeabi_ddiv>
 8007040:	e7e6      	b.n	8007010 <__ieee754_sqrt+0x30>
 8007042:	1512      	asrs	r2, r2, #20
 8007044:	d074      	beq.n	8007130 <__ieee754_sqrt+0x150>
 8007046:	07d4      	lsls	r4, r2, #31
 8007048:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800704c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007054:	bf5e      	ittt	pl
 8007056:	0fda      	lsrpl	r2, r3, #31
 8007058:	005b      	lslpl	r3, r3, #1
 800705a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800705e:	2400      	movs	r4, #0
 8007060:	0fda      	lsrs	r2, r3, #31
 8007062:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007066:	107f      	asrs	r7, r7, #1
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	2516      	movs	r5, #22
 800706c:	4620      	mov	r0, r4
 800706e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007072:	1886      	adds	r6, r0, r2
 8007074:	428e      	cmp	r6, r1
 8007076:	bfde      	ittt	le
 8007078:	1b89      	suble	r1, r1, r6
 800707a:	18b0      	addle	r0, r6, r2
 800707c:	18a4      	addle	r4, r4, r2
 800707e:	0049      	lsls	r1, r1, #1
 8007080:	3d01      	subs	r5, #1
 8007082:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007086:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800708a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800708e:	d1f0      	bne.n	8007072 <__ieee754_sqrt+0x92>
 8007090:	462a      	mov	r2, r5
 8007092:	f04f 0e20 	mov.w	lr, #32
 8007096:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800709a:	4281      	cmp	r1, r0
 800709c:	eb06 0c05 	add.w	ip, r6, r5
 80070a0:	dc02      	bgt.n	80070a8 <__ieee754_sqrt+0xc8>
 80070a2:	d113      	bne.n	80070cc <__ieee754_sqrt+0xec>
 80070a4:	459c      	cmp	ip, r3
 80070a6:	d811      	bhi.n	80070cc <__ieee754_sqrt+0xec>
 80070a8:	f1bc 0f00 	cmp.w	ip, #0
 80070ac:	eb0c 0506 	add.w	r5, ip, r6
 80070b0:	da43      	bge.n	800713a <__ieee754_sqrt+0x15a>
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	db41      	blt.n	800713a <__ieee754_sqrt+0x15a>
 80070b6:	f100 0801 	add.w	r8, r0, #1
 80070ba:	1a09      	subs	r1, r1, r0
 80070bc:	459c      	cmp	ip, r3
 80070be:	bf88      	it	hi
 80070c0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80070c4:	eba3 030c 	sub.w	r3, r3, ip
 80070c8:	4432      	add	r2, r6
 80070ca:	4640      	mov	r0, r8
 80070cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80070d0:	f1be 0e01 	subs.w	lr, lr, #1
 80070d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80070d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80070e0:	d1db      	bne.n	800709a <__ieee754_sqrt+0xba>
 80070e2:	430b      	orrs	r3, r1
 80070e4:	d006      	beq.n	80070f4 <__ieee754_sqrt+0x114>
 80070e6:	1c50      	adds	r0, r2, #1
 80070e8:	bf13      	iteet	ne
 80070ea:	3201      	addne	r2, #1
 80070ec:	3401      	addeq	r4, #1
 80070ee:	4672      	moveq	r2, lr
 80070f0:	f022 0201 	bicne.w	r2, r2, #1
 80070f4:	1063      	asrs	r3, r4, #1
 80070f6:	0852      	lsrs	r2, r2, #1
 80070f8:	07e1      	lsls	r1, r4, #31
 80070fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80070fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007102:	bf48      	it	mi
 8007104:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007108:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800710c:	4614      	mov	r4, r2
 800710e:	e781      	b.n	8007014 <__ieee754_sqrt+0x34>
 8007110:	0ad9      	lsrs	r1, r3, #11
 8007112:	3815      	subs	r0, #21
 8007114:	055b      	lsls	r3, r3, #21
 8007116:	2900      	cmp	r1, #0
 8007118:	d0fa      	beq.n	8007110 <__ieee754_sqrt+0x130>
 800711a:	02cd      	lsls	r5, r1, #11
 800711c:	d50a      	bpl.n	8007134 <__ieee754_sqrt+0x154>
 800711e:	f1c2 0420 	rsb	r4, r2, #32
 8007122:	fa23 f404 	lsr.w	r4, r3, r4
 8007126:	1e55      	subs	r5, r2, #1
 8007128:	4093      	lsls	r3, r2
 800712a:	4321      	orrs	r1, r4
 800712c:	1b42      	subs	r2, r0, r5
 800712e:	e78a      	b.n	8007046 <__ieee754_sqrt+0x66>
 8007130:	4610      	mov	r0, r2
 8007132:	e7f0      	b.n	8007116 <__ieee754_sqrt+0x136>
 8007134:	0049      	lsls	r1, r1, #1
 8007136:	3201      	adds	r2, #1
 8007138:	e7ef      	b.n	800711a <__ieee754_sqrt+0x13a>
 800713a:	4680      	mov	r8, r0
 800713c:	e7bd      	b.n	80070ba <__ieee754_sqrt+0xda>
 800713e:	bf00      	nop
 8007140:	7ff00000 	.word	0x7ff00000
 8007144:	00000000 	.word	0x00000000

08007148 <__kernel_cos>:
 8007148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	ec57 6b10 	vmov	r6, r7, d0
 8007150:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007154:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007158:	ed8d 1b00 	vstr	d1, [sp]
 800715c:	da07      	bge.n	800716e <__kernel_cos+0x26>
 800715e:	ee10 0a10 	vmov	r0, s0
 8007162:	4639      	mov	r1, r7
 8007164:	f7f9 fcbc 	bl	8000ae0 <__aeabi_d2iz>
 8007168:	2800      	cmp	r0, #0
 800716a:	f000 8088 	beq.w	800727e <__kernel_cos+0x136>
 800716e:	4632      	mov	r2, r6
 8007170:	463b      	mov	r3, r7
 8007172:	4630      	mov	r0, r6
 8007174:	4639      	mov	r1, r7
 8007176:	f7f9 fa03 	bl	8000580 <__aeabi_dmul>
 800717a:	4b51      	ldr	r3, [pc, #324]	; (80072c0 <__kernel_cos+0x178>)
 800717c:	2200      	movs	r2, #0
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	f7f9 f9fd 	bl	8000580 <__aeabi_dmul>
 8007186:	a340      	add	r3, pc, #256	; (adr r3, 8007288 <__kernel_cos+0x140>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	4682      	mov	sl, r0
 800718e:	468b      	mov	fp, r1
 8007190:	4620      	mov	r0, r4
 8007192:	4629      	mov	r1, r5
 8007194:	f7f9 f9f4 	bl	8000580 <__aeabi_dmul>
 8007198:	a33d      	add	r3, pc, #244	; (adr r3, 8007290 <__kernel_cos+0x148>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 f839 	bl	8000214 <__adddf3>
 80071a2:	4622      	mov	r2, r4
 80071a4:	462b      	mov	r3, r5
 80071a6:	f7f9 f9eb 	bl	8000580 <__aeabi_dmul>
 80071aa:	a33b      	add	r3, pc, #236	; (adr r3, 8007298 <__kernel_cos+0x150>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 f82e 	bl	8000210 <__aeabi_dsub>
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	f7f9 f9e2 	bl	8000580 <__aeabi_dmul>
 80071bc:	a338      	add	r3, pc, #224	; (adr r3, 80072a0 <__kernel_cos+0x158>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 f827 	bl	8000214 <__adddf3>
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	f7f9 f9d9 	bl	8000580 <__aeabi_dmul>
 80071ce:	a336      	add	r3, pc, #216	; (adr r3, 80072a8 <__kernel_cos+0x160>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f7f9 f81c 	bl	8000210 <__aeabi_dsub>
 80071d8:	4622      	mov	r2, r4
 80071da:	462b      	mov	r3, r5
 80071dc:	f7f9 f9d0 	bl	8000580 <__aeabi_dmul>
 80071e0:	a333      	add	r3, pc, #204	; (adr r3, 80072b0 <__kernel_cos+0x168>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f9 f815 	bl	8000214 <__adddf3>
 80071ea:	4622      	mov	r2, r4
 80071ec:	462b      	mov	r3, r5
 80071ee:	f7f9 f9c7 	bl	8000580 <__aeabi_dmul>
 80071f2:	4622      	mov	r2, r4
 80071f4:	462b      	mov	r3, r5
 80071f6:	f7f9 f9c3 	bl	8000580 <__aeabi_dmul>
 80071fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071fe:	4604      	mov	r4, r0
 8007200:	460d      	mov	r5, r1
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
 8007206:	f7f9 f9bb 	bl	8000580 <__aeabi_dmul>
 800720a:	460b      	mov	r3, r1
 800720c:	4602      	mov	r2, r0
 800720e:	4629      	mov	r1, r5
 8007210:	4620      	mov	r0, r4
 8007212:	f7f8 fffd 	bl	8000210 <__aeabi_dsub>
 8007216:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <__kernel_cos+0x17c>)
 8007218:	4598      	cmp	r8, r3
 800721a:	4606      	mov	r6, r0
 800721c:	460f      	mov	r7, r1
 800721e:	dc10      	bgt.n	8007242 <__kernel_cos+0xfa>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4650      	mov	r0, sl
 8007226:	4659      	mov	r1, fp
 8007228:	f7f8 fff2 	bl	8000210 <__aeabi_dsub>
 800722c:	460b      	mov	r3, r1
 800722e:	4926      	ldr	r1, [pc, #152]	; (80072c8 <__kernel_cos+0x180>)
 8007230:	4602      	mov	r2, r0
 8007232:	2000      	movs	r0, #0
 8007234:	f7f8 ffec 	bl	8000210 <__aeabi_dsub>
 8007238:	ec41 0b10 	vmov	d0, r0, r1
 800723c:	b003      	add	sp, #12
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	4b22      	ldr	r3, [pc, #136]	; (80072cc <__kernel_cos+0x184>)
 8007244:	4920      	ldr	r1, [pc, #128]	; (80072c8 <__kernel_cos+0x180>)
 8007246:	4598      	cmp	r8, r3
 8007248:	bfcc      	ite	gt
 800724a:	4d21      	ldrgt	r5, [pc, #132]	; (80072d0 <__kernel_cos+0x188>)
 800724c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007250:	2400      	movs	r4, #0
 8007252:	4622      	mov	r2, r4
 8007254:	462b      	mov	r3, r5
 8007256:	2000      	movs	r0, #0
 8007258:	f7f8 ffda 	bl	8000210 <__aeabi_dsub>
 800725c:	4622      	mov	r2, r4
 800725e:	4680      	mov	r8, r0
 8007260:	4689      	mov	r9, r1
 8007262:	462b      	mov	r3, r5
 8007264:	4650      	mov	r0, sl
 8007266:	4659      	mov	r1, fp
 8007268:	f7f8 ffd2 	bl	8000210 <__aeabi_dsub>
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	f7f8 ffce 	bl	8000210 <__aeabi_dsub>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4640      	mov	r0, r8
 800727a:	4649      	mov	r1, r9
 800727c:	e7da      	b.n	8007234 <__kernel_cos+0xec>
 800727e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80072b8 <__kernel_cos+0x170>
 8007282:	e7db      	b.n	800723c <__kernel_cos+0xf4>
 8007284:	f3af 8000 	nop.w
 8007288:	be8838d4 	.word	0xbe8838d4
 800728c:	bda8fae9 	.word	0xbda8fae9
 8007290:	bdb4b1c4 	.word	0xbdb4b1c4
 8007294:	3e21ee9e 	.word	0x3e21ee9e
 8007298:	809c52ad 	.word	0x809c52ad
 800729c:	3e927e4f 	.word	0x3e927e4f
 80072a0:	19cb1590 	.word	0x19cb1590
 80072a4:	3efa01a0 	.word	0x3efa01a0
 80072a8:	16c15177 	.word	0x16c15177
 80072ac:	3f56c16c 	.word	0x3f56c16c
 80072b0:	5555554c 	.word	0x5555554c
 80072b4:	3fa55555 	.word	0x3fa55555
 80072b8:	00000000 	.word	0x00000000
 80072bc:	3ff00000 	.word	0x3ff00000
 80072c0:	3fe00000 	.word	0x3fe00000
 80072c4:	3fd33332 	.word	0x3fd33332
 80072c8:	3ff00000 	.word	0x3ff00000
 80072cc:	3fe90000 	.word	0x3fe90000
 80072d0:	3fd20000 	.word	0x3fd20000
 80072d4:	00000000 	.word	0x00000000

080072d8 <__kernel_rem_pio2>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	ed2d 8b02 	vpush	{d8}
 80072e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80072e4:	f112 0f14 	cmn.w	r2, #20
 80072e8:	9308      	str	r3, [sp, #32]
 80072ea:	9101      	str	r1, [sp, #4]
 80072ec:	4bc4      	ldr	r3, [pc, #784]	; (8007600 <__kernel_rem_pio2+0x328>)
 80072ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80072f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80072f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80072fe:	bfa8      	it	ge
 8007300:	1ed4      	subge	r4, r2, #3
 8007302:	9306      	str	r3, [sp, #24]
 8007304:	bfb2      	itee	lt
 8007306:	2400      	movlt	r4, #0
 8007308:	2318      	movge	r3, #24
 800730a:	fb94 f4f3 	sdivge	r4, r4, r3
 800730e:	f06f 0317 	mvn.w	r3, #23
 8007312:	fb04 3303 	mla	r3, r4, r3, r3
 8007316:	eb03 0a02 	add.w	sl, r3, r2
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	9a06      	ldr	r2, [sp, #24]
 800731e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80075f0 <__kernel_rem_pio2+0x318>
 8007322:	eb03 0802 	add.w	r8, r3, r2
 8007326:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007328:	1aa7      	subs	r7, r4, r2
 800732a:	ae22      	add	r6, sp, #136	; 0x88
 800732c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007330:	2500      	movs	r5, #0
 8007332:	4545      	cmp	r5, r8
 8007334:	dd13      	ble.n	800735e <__kernel_rem_pio2+0x86>
 8007336:	9b08      	ldr	r3, [sp, #32]
 8007338:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80075f0 <__kernel_rem_pio2+0x318>
 800733c:	aa22      	add	r2, sp, #136	; 0x88
 800733e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007342:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	9b02      	ldr	r3, [sp, #8]
 800734c:	4598      	cmp	r8, r3
 800734e:	dc2f      	bgt.n	80073b0 <__kernel_rem_pio2+0xd8>
 8007350:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007354:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007358:	462f      	mov	r7, r5
 800735a:	2600      	movs	r6, #0
 800735c:	e01b      	b.n	8007396 <__kernel_rem_pio2+0xbe>
 800735e:	42ef      	cmn	r7, r5
 8007360:	d407      	bmi.n	8007372 <__kernel_rem_pio2+0x9a>
 8007362:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007366:	f7f9 f8a1 	bl	80004ac <__aeabi_i2d>
 800736a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800736e:	3501      	adds	r5, #1
 8007370:	e7df      	b.n	8007332 <__kernel_rem_pio2+0x5a>
 8007372:	ec51 0b18 	vmov	r0, r1, d8
 8007376:	e7f8      	b.n	800736a <__kernel_rem_pio2+0x92>
 8007378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007380:	f7f9 f8fe 	bl	8000580 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800738c:	f7f8 ff42 	bl	8000214 <__adddf3>
 8007390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007394:	3601      	adds	r6, #1
 8007396:	9b06      	ldr	r3, [sp, #24]
 8007398:	429e      	cmp	r6, r3
 800739a:	f1a7 0708 	sub.w	r7, r7, #8
 800739e:	ddeb      	ble.n	8007378 <__kernel_rem_pio2+0xa0>
 80073a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80073a4:	f108 0801 	add.w	r8, r8, #1
 80073a8:	ecab 7b02 	vstmia	fp!, {d7}
 80073ac:	3508      	adds	r5, #8
 80073ae:	e7cc      	b.n	800734a <__kernel_rem_pio2+0x72>
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	aa0e      	add	r2, sp, #56	; 0x38
 80073b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073b8:	930d      	str	r3, [sp, #52]	; 0x34
 80073ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80073bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80073c0:	9c02      	ldr	r4, [sp, #8]
 80073c2:	930c      	str	r3, [sp, #48]	; 0x30
 80073c4:	00e3      	lsls	r3, r4, #3
 80073c6:	930a      	str	r3, [sp, #40]	; 0x28
 80073c8:	ab9a      	add	r3, sp, #616	; 0x268
 80073ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80073d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80073d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80073d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80073dc:	46c3      	mov	fp, r8
 80073de:	46a1      	mov	r9, r4
 80073e0:	f1b9 0f00 	cmp.w	r9, #0
 80073e4:	f1a5 0508 	sub.w	r5, r5, #8
 80073e8:	dc77      	bgt.n	80074da <__kernel_rem_pio2+0x202>
 80073ea:	ec47 6b10 	vmov	d0, r6, r7
 80073ee:	4650      	mov	r0, sl
 80073f0:	f000 fc4e 	bl	8007c90 <scalbn>
 80073f4:	ec57 6b10 	vmov	r6, r7, d0
 80073f8:	2200      	movs	r2, #0
 80073fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80073fe:	ee10 0a10 	vmov	r0, s0
 8007402:	4639      	mov	r1, r7
 8007404:	f7f9 f8bc 	bl	8000580 <__aeabi_dmul>
 8007408:	ec41 0b10 	vmov	d0, r0, r1
 800740c:	f000 fbb8 	bl	8007b80 <floor>
 8007410:	4b7c      	ldr	r3, [pc, #496]	; (8007604 <__kernel_rem_pio2+0x32c>)
 8007412:	ec51 0b10 	vmov	r0, r1, d0
 8007416:	2200      	movs	r2, #0
 8007418:	f7f9 f8b2 	bl	8000580 <__aeabi_dmul>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f8 fef4 	bl	8000210 <__aeabi_dsub>
 8007428:	460f      	mov	r7, r1
 800742a:	4606      	mov	r6, r0
 800742c:	f7f9 fb58 	bl	8000ae0 <__aeabi_d2iz>
 8007430:	9004      	str	r0, [sp, #16]
 8007432:	f7f9 f83b 	bl	80004ac <__aeabi_i2d>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4630      	mov	r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	f7f8 fee7 	bl	8000210 <__aeabi_dsub>
 8007442:	f1ba 0f00 	cmp.w	sl, #0
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	dd6d      	ble.n	8007528 <__kernel_rem_pio2+0x250>
 800744c:	1e62      	subs	r2, r4, #1
 800744e:	ab0e      	add	r3, sp, #56	; 0x38
 8007450:	9d04      	ldr	r5, [sp, #16]
 8007452:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007456:	f1ca 0118 	rsb	r1, sl, #24
 800745a:	fa40 f301 	asr.w	r3, r0, r1
 800745e:	441d      	add	r5, r3
 8007460:	408b      	lsls	r3, r1
 8007462:	1ac0      	subs	r0, r0, r3
 8007464:	ab0e      	add	r3, sp, #56	; 0x38
 8007466:	9504      	str	r5, [sp, #16]
 8007468:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800746c:	f1ca 0317 	rsb	r3, sl, #23
 8007470:	fa40 fb03 	asr.w	fp, r0, r3
 8007474:	f1bb 0f00 	cmp.w	fp, #0
 8007478:	dd65      	ble.n	8007546 <__kernel_rem_pio2+0x26e>
 800747a:	9b04      	ldr	r3, [sp, #16]
 800747c:	2200      	movs	r2, #0
 800747e:	3301      	adds	r3, #1
 8007480:	9304      	str	r3, [sp, #16]
 8007482:	4615      	mov	r5, r2
 8007484:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007488:	4294      	cmp	r4, r2
 800748a:	f300 809c 	bgt.w	80075c6 <__kernel_rem_pio2+0x2ee>
 800748e:	f1ba 0f00 	cmp.w	sl, #0
 8007492:	dd07      	ble.n	80074a4 <__kernel_rem_pio2+0x1cc>
 8007494:	f1ba 0f01 	cmp.w	sl, #1
 8007498:	f000 80c0 	beq.w	800761c <__kernel_rem_pio2+0x344>
 800749c:	f1ba 0f02 	cmp.w	sl, #2
 80074a0:	f000 80c6 	beq.w	8007630 <__kernel_rem_pio2+0x358>
 80074a4:	f1bb 0f02 	cmp.w	fp, #2
 80074a8:	d14d      	bne.n	8007546 <__kernel_rem_pio2+0x26e>
 80074aa:	4632      	mov	r2, r6
 80074ac:	463b      	mov	r3, r7
 80074ae:	4956      	ldr	r1, [pc, #344]	; (8007608 <__kernel_rem_pio2+0x330>)
 80074b0:	2000      	movs	r0, #0
 80074b2:	f7f8 fead 	bl	8000210 <__aeabi_dsub>
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	d043      	beq.n	8007546 <__kernel_rem_pio2+0x26e>
 80074be:	4650      	mov	r0, sl
 80074c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80075f8 <__kernel_rem_pio2+0x320>
 80074c4:	f000 fbe4 	bl	8007c90 <scalbn>
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	ec53 2b10 	vmov	r2, r3, d0
 80074d0:	f7f8 fe9e 	bl	8000210 <__aeabi_dsub>
 80074d4:	4606      	mov	r6, r0
 80074d6:	460f      	mov	r7, r1
 80074d8:	e035      	b.n	8007546 <__kernel_rem_pio2+0x26e>
 80074da:	4b4c      	ldr	r3, [pc, #304]	; (800760c <__kernel_rem_pio2+0x334>)
 80074dc:	2200      	movs	r2, #0
 80074de:	4630      	mov	r0, r6
 80074e0:	4639      	mov	r1, r7
 80074e2:	f7f9 f84d 	bl	8000580 <__aeabi_dmul>
 80074e6:	f7f9 fafb 	bl	8000ae0 <__aeabi_d2iz>
 80074ea:	f7f8 ffdf 	bl	80004ac <__aeabi_i2d>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	ec43 2b18 	vmov	d8, r2, r3
 80074f6:	4b46      	ldr	r3, [pc, #280]	; (8007610 <__kernel_rem_pio2+0x338>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	f7f9 f841 	bl	8000580 <__aeabi_dmul>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	f7f8 fe83 	bl	8000210 <__aeabi_dsub>
 800750a:	f7f9 fae9 	bl	8000ae0 <__aeabi_d2iz>
 800750e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007512:	f84b 0b04 	str.w	r0, [fp], #4
 8007516:	ec51 0b18 	vmov	r0, r1, d8
 800751a:	f7f8 fe7b 	bl	8000214 <__adddf3>
 800751e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	e75b      	b.n	80073e0 <__kernel_rem_pio2+0x108>
 8007528:	d106      	bne.n	8007538 <__kernel_rem_pio2+0x260>
 800752a:	1e63      	subs	r3, r4, #1
 800752c:	aa0e      	add	r2, sp, #56	; 0x38
 800752e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007532:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007536:	e79d      	b.n	8007474 <__kernel_rem_pio2+0x19c>
 8007538:	4b36      	ldr	r3, [pc, #216]	; (8007614 <__kernel_rem_pio2+0x33c>)
 800753a:	2200      	movs	r2, #0
 800753c:	f7f9 faa6 	bl	8000a8c <__aeabi_dcmpge>
 8007540:	2800      	cmp	r0, #0
 8007542:	d13d      	bne.n	80075c0 <__kernel_rem_pio2+0x2e8>
 8007544:	4683      	mov	fp, r0
 8007546:	2200      	movs	r2, #0
 8007548:	2300      	movs	r3, #0
 800754a:	4630      	mov	r0, r6
 800754c:	4639      	mov	r1, r7
 800754e:	f7f9 fa7f 	bl	8000a50 <__aeabi_dcmpeq>
 8007552:	2800      	cmp	r0, #0
 8007554:	f000 80c0 	beq.w	80076d8 <__kernel_rem_pio2+0x400>
 8007558:	1e65      	subs	r5, r4, #1
 800755a:	462b      	mov	r3, r5
 800755c:	2200      	movs	r2, #0
 800755e:	9902      	ldr	r1, [sp, #8]
 8007560:	428b      	cmp	r3, r1
 8007562:	da6c      	bge.n	800763e <__kernel_rem_pio2+0x366>
 8007564:	2a00      	cmp	r2, #0
 8007566:	f000 8089 	beq.w	800767c <__kernel_rem_pio2+0x3a4>
 800756a:	ab0e      	add	r3, sp, #56	; 0x38
 800756c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007570:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80ad 	beq.w	80076d4 <__kernel_rem_pio2+0x3fc>
 800757a:	4650      	mov	r0, sl
 800757c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80075f8 <__kernel_rem_pio2+0x320>
 8007580:	f000 fb86 	bl	8007c90 <scalbn>
 8007584:	ab9a      	add	r3, sp, #616	; 0x268
 8007586:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800758a:	ec57 6b10 	vmov	r6, r7, d0
 800758e:	00ec      	lsls	r4, r5, #3
 8007590:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007594:	46aa      	mov	sl, r5
 8007596:	f1ba 0f00 	cmp.w	sl, #0
 800759a:	f280 80d6 	bge.w	800774a <__kernel_rem_pio2+0x472>
 800759e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80075f0 <__kernel_rem_pio2+0x318>
 80075a2:	462e      	mov	r6, r5
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	f2c0 8104 	blt.w	80077b2 <__kernel_rem_pio2+0x4da>
 80075aa:	ab72      	add	r3, sp, #456	; 0x1c8
 80075ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 80075b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007618 <__kernel_rem_pio2+0x340>
 80075b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80075b8:	f04f 0800 	mov.w	r8, #0
 80075bc:	1baf      	subs	r7, r5, r6
 80075be:	e0ea      	b.n	8007796 <__kernel_rem_pio2+0x4be>
 80075c0:	f04f 0b02 	mov.w	fp, #2
 80075c4:	e759      	b.n	800747a <__kernel_rem_pio2+0x1a2>
 80075c6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ca:	b955      	cbnz	r5, 80075e2 <__kernel_rem_pio2+0x30a>
 80075cc:	b123      	cbz	r3, 80075d8 <__kernel_rem_pio2+0x300>
 80075ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80075d2:	f8c8 3000 	str.w	r3, [r8]
 80075d6:	2301      	movs	r3, #1
 80075d8:	3201      	adds	r2, #1
 80075da:	f108 0804 	add.w	r8, r8, #4
 80075de:	461d      	mov	r5, r3
 80075e0:	e752      	b.n	8007488 <__kernel_rem_pio2+0x1b0>
 80075e2:	1acb      	subs	r3, r1, r3
 80075e4:	f8c8 3000 	str.w	r3, [r8]
 80075e8:	462b      	mov	r3, r5
 80075ea:	e7f5      	b.n	80075d8 <__kernel_rem_pio2+0x300>
 80075ec:	f3af 8000 	nop.w
	...
 80075fc:	3ff00000 	.word	0x3ff00000
 8007600:	08007fd0 	.word	0x08007fd0
 8007604:	40200000 	.word	0x40200000
 8007608:	3ff00000 	.word	0x3ff00000
 800760c:	3e700000 	.word	0x3e700000
 8007610:	41700000 	.word	0x41700000
 8007614:	3fe00000 	.word	0x3fe00000
 8007618:	08007f90 	.word	0x08007f90
 800761c:	1e62      	subs	r2, r4, #1
 800761e:	ab0e      	add	r3, sp, #56	; 0x38
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007628:	a90e      	add	r1, sp, #56	; 0x38
 800762a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800762e:	e739      	b.n	80074a4 <__kernel_rem_pio2+0x1cc>
 8007630:	1e62      	subs	r2, r4, #1
 8007632:	ab0e      	add	r3, sp, #56	; 0x38
 8007634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007638:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800763c:	e7f4      	b.n	8007628 <__kernel_rem_pio2+0x350>
 800763e:	a90e      	add	r1, sp, #56	; 0x38
 8007640:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007644:	3b01      	subs	r3, #1
 8007646:	430a      	orrs	r2, r1
 8007648:	e789      	b.n	800755e <__kernel_rem_pio2+0x286>
 800764a:	3301      	adds	r3, #1
 800764c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007650:	2900      	cmp	r1, #0
 8007652:	d0fa      	beq.n	800764a <__kernel_rem_pio2+0x372>
 8007654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007656:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800765a:	446a      	add	r2, sp
 800765c:	3a98      	subs	r2, #152	; 0x98
 800765e:	920a      	str	r2, [sp, #40]	; 0x28
 8007660:	9a08      	ldr	r2, [sp, #32]
 8007662:	18e3      	adds	r3, r4, r3
 8007664:	18a5      	adds	r5, r4, r2
 8007666:	aa22      	add	r2, sp, #136	; 0x88
 8007668:	f104 0801 	add.w	r8, r4, #1
 800766c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	4543      	cmp	r3, r8
 8007676:	da04      	bge.n	8007682 <__kernel_rem_pio2+0x3aa>
 8007678:	461c      	mov	r4, r3
 800767a:	e6a3      	b.n	80073c4 <__kernel_rem_pio2+0xec>
 800767c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800767e:	2301      	movs	r3, #1
 8007680:	e7e4      	b.n	800764c <__kernel_rem_pio2+0x374>
 8007682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007684:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007688:	f7f8 ff10 	bl	80004ac <__aeabi_i2d>
 800768c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007692:	46ab      	mov	fp, r5
 8007694:	461c      	mov	r4, r3
 8007696:	f04f 0900 	mov.w	r9, #0
 800769a:	2600      	movs	r6, #0
 800769c:	2700      	movs	r7, #0
 800769e:	9b06      	ldr	r3, [sp, #24]
 80076a0:	4599      	cmp	r9, r3
 80076a2:	dd06      	ble.n	80076b2 <__kernel_rem_pio2+0x3da>
 80076a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80076aa:	f108 0801 	add.w	r8, r8, #1
 80076ae:	930a      	str	r3, [sp, #40]	; 0x28
 80076b0:	e7df      	b.n	8007672 <__kernel_rem_pio2+0x39a>
 80076b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80076b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80076ba:	f7f8 ff61 	bl	8000580 <__aeabi_dmul>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4630      	mov	r0, r6
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f8 fda5 	bl	8000214 <__adddf3>
 80076ca:	f109 0901 	add.w	r9, r9, #1
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	e7e4      	b.n	800769e <__kernel_rem_pio2+0x3c6>
 80076d4:	3d01      	subs	r5, #1
 80076d6:	e748      	b.n	800756a <__kernel_rem_pio2+0x292>
 80076d8:	ec47 6b10 	vmov	d0, r6, r7
 80076dc:	f1ca 0000 	rsb	r0, sl, #0
 80076e0:	f000 fad6 	bl	8007c90 <scalbn>
 80076e4:	ec57 6b10 	vmov	r6, r7, d0
 80076e8:	4ba0      	ldr	r3, [pc, #640]	; (800796c <__kernel_rem_pio2+0x694>)
 80076ea:	ee10 0a10 	vmov	r0, s0
 80076ee:	2200      	movs	r2, #0
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f9 f9cb 	bl	8000a8c <__aeabi_dcmpge>
 80076f6:	b1f8      	cbz	r0, 8007738 <__kernel_rem_pio2+0x460>
 80076f8:	4b9d      	ldr	r3, [pc, #628]	; (8007970 <__kernel_rem_pio2+0x698>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	4630      	mov	r0, r6
 80076fe:	4639      	mov	r1, r7
 8007700:	f7f8 ff3e 	bl	8000580 <__aeabi_dmul>
 8007704:	f7f9 f9ec 	bl	8000ae0 <__aeabi_d2iz>
 8007708:	4680      	mov	r8, r0
 800770a:	f7f8 fecf 	bl	80004ac <__aeabi_i2d>
 800770e:	4b97      	ldr	r3, [pc, #604]	; (800796c <__kernel_rem_pio2+0x694>)
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff35 	bl	8000580 <__aeabi_dmul>
 8007716:	460b      	mov	r3, r1
 8007718:	4602      	mov	r2, r0
 800771a:	4639      	mov	r1, r7
 800771c:	4630      	mov	r0, r6
 800771e:	f7f8 fd77 	bl	8000210 <__aeabi_dsub>
 8007722:	f7f9 f9dd 	bl	8000ae0 <__aeabi_d2iz>
 8007726:	1c65      	adds	r5, r4, #1
 8007728:	ab0e      	add	r3, sp, #56	; 0x38
 800772a:	f10a 0a18 	add.w	sl, sl, #24
 800772e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007732:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007736:	e720      	b.n	800757a <__kernel_rem_pio2+0x2a2>
 8007738:	4630      	mov	r0, r6
 800773a:	4639      	mov	r1, r7
 800773c:	f7f9 f9d0 	bl	8000ae0 <__aeabi_d2iz>
 8007740:	ab0e      	add	r3, sp, #56	; 0x38
 8007742:	4625      	mov	r5, r4
 8007744:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007748:	e717      	b.n	800757a <__kernel_rem_pio2+0x2a2>
 800774a:	ab0e      	add	r3, sp, #56	; 0x38
 800774c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007750:	f7f8 feac 	bl	80004ac <__aeabi_i2d>
 8007754:	4632      	mov	r2, r6
 8007756:	463b      	mov	r3, r7
 8007758:	f7f8 ff12 	bl	8000580 <__aeabi_dmul>
 800775c:	4b84      	ldr	r3, [pc, #528]	; (8007970 <__kernel_rem_pio2+0x698>)
 800775e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007762:	2200      	movs	r2, #0
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f8 ff0a 	bl	8000580 <__aeabi_dmul>
 800776c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007770:	4606      	mov	r6, r0
 8007772:	460f      	mov	r7, r1
 8007774:	e70f      	b.n	8007596 <__kernel_rem_pio2+0x2be>
 8007776:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800777a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800777e:	f7f8 feff 	bl	8000580 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800778a:	f7f8 fd43 	bl	8000214 <__adddf3>
 800778e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	4598      	cmp	r8, r3
 800779a:	dc01      	bgt.n	80077a0 <__kernel_rem_pio2+0x4c8>
 800779c:	45b8      	cmp	r8, r7
 800779e:	ddea      	ble.n	8007776 <__kernel_rem_pio2+0x49e>
 80077a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80077a4:	ab4a      	add	r3, sp, #296	; 0x128
 80077a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80077aa:	ed87 7b00 	vstr	d7, [r7]
 80077ae:	3e01      	subs	r6, #1
 80077b0:	e6f8      	b.n	80075a4 <__kernel_rem_pio2+0x2cc>
 80077b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	dc0b      	bgt.n	80077d0 <__kernel_rem_pio2+0x4f8>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc35      	bgt.n	8007828 <__kernel_rem_pio2+0x550>
 80077bc:	d059      	beq.n	8007872 <__kernel_rem_pio2+0x59a>
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	f003 0007 	and.w	r0, r3, #7
 80077c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80077c8:	ecbd 8b02 	vpop	{d8}
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d1f3      	bne.n	80077be <__kernel_rem_pio2+0x4e6>
 80077d6:	ab4a      	add	r3, sp, #296	; 0x128
 80077d8:	4423      	add	r3, r4
 80077da:	9306      	str	r3, [sp, #24]
 80077dc:	461c      	mov	r4, r3
 80077de:	469a      	mov	sl, r3
 80077e0:	9502      	str	r5, [sp, #8]
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f1aa 0a08 	sub.w	sl, sl, #8
 80077ea:	dc6b      	bgt.n	80078c4 <__kernel_rem_pio2+0x5ec>
 80077ec:	46aa      	mov	sl, r5
 80077ee:	f1ba 0f01 	cmp.w	sl, #1
 80077f2:	f1a4 0408 	sub.w	r4, r4, #8
 80077f6:	f300 8085 	bgt.w	8007904 <__kernel_rem_pio2+0x62c>
 80077fa:	9c06      	ldr	r4, [sp, #24]
 80077fc:	2000      	movs	r0, #0
 80077fe:	3408      	adds	r4, #8
 8007800:	2100      	movs	r1, #0
 8007802:	2d01      	cmp	r5, #1
 8007804:	f300 809d 	bgt.w	8007942 <__kernel_rem_pio2+0x66a>
 8007808:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800780c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007810:	f1bb 0f00 	cmp.w	fp, #0
 8007814:	f040 809b 	bne.w	800794e <__kernel_rem_pio2+0x676>
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	e9c3 5600 	strd	r5, r6, [r3]
 800781e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007822:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007826:	e7ca      	b.n	80077be <__kernel_rem_pio2+0x4e6>
 8007828:	3408      	adds	r4, #8
 800782a:	ab4a      	add	r3, sp, #296	; 0x128
 800782c:	441c      	add	r4, r3
 800782e:	462e      	mov	r6, r5
 8007830:	2000      	movs	r0, #0
 8007832:	2100      	movs	r1, #0
 8007834:	2e00      	cmp	r6, #0
 8007836:	da36      	bge.n	80078a6 <__kernel_rem_pio2+0x5ce>
 8007838:	f1bb 0f00 	cmp.w	fp, #0
 800783c:	d039      	beq.n	80078b2 <__kernel_rem_pio2+0x5da>
 800783e:	4602      	mov	r2, r0
 8007840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007844:	9c01      	ldr	r4, [sp, #4]
 8007846:	e9c4 2300 	strd	r2, r3, [r4]
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007852:	f7f8 fcdd 	bl	8000210 <__aeabi_dsub>
 8007856:	ae4c      	add	r6, sp, #304	; 0x130
 8007858:	2401      	movs	r4, #1
 800785a:	42a5      	cmp	r5, r4
 800785c:	da2c      	bge.n	80078b8 <__kernel_rem_pio2+0x5e0>
 800785e:	f1bb 0f00 	cmp.w	fp, #0
 8007862:	d002      	beq.n	800786a <__kernel_rem_pio2+0x592>
 8007864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007868:	4619      	mov	r1, r3
 800786a:	9b01      	ldr	r3, [sp, #4]
 800786c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007870:	e7a5      	b.n	80077be <__kernel_rem_pio2+0x4e6>
 8007872:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007876:	eb0d 0403 	add.w	r4, sp, r3
 800787a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800787e:	2000      	movs	r0, #0
 8007880:	2100      	movs	r1, #0
 8007882:	2d00      	cmp	r5, #0
 8007884:	da09      	bge.n	800789a <__kernel_rem_pio2+0x5c2>
 8007886:	f1bb 0f00 	cmp.w	fp, #0
 800788a:	d002      	beq.n	8007892 <__kernel_rem_pio2+0x5ba>
 800788c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007890:	4619      	mov	r1, r3
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	e9c3 0100 	strd	r0, r1, [r3]
 8007898:	e791      	b.n	80077be <__kernel_rem_pio2+0x4e6>
 800789a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800789e:	f7f8 fcb9 	bl	8000214 <__adddf3>
 80078a2:	3d01      	subs	r5, #1
 80078a4:	e7ed      	b.n	8007882 <__kernel_rem_pio2+0x5aa>
 80078a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80078aa:	f7f8 fcb3 	bl	8000214 <__adddf3>
 80078ae:	3e01      	subs	r6, #1
 80078b0:	e7c0      	b.n	8007834 <__kernel_rem_pio2+0x55c>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e7c5      	b.n	8007844 <__kernel_rem_pio2+0x56c>
 80078b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80078bc:	f7f8 fcaa 	bl	8000214 <__adddf3>
 80078c0:	3401      	adds	r4, #1
 80078c2:	e7ca      	b.n	800785a <__kernel_rem_pio2+0x582>
 80078c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80078c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	4632      	mov	r2, r6
 80078d4:	463b      	mov	r3, r7
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f8 fc9b 	bl	8000214 <__adddf3>
 80078de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4640      	mov	r0, r8
 80078e8:	4649      	mov	r1, r9
 80078ea:	f7f8 fc91 	bl	8000210 <__aeabi_dsub>
 80078ee:	4632      	mov	r2, r6
 80078f0:	463b      	mov	r3, r7
 80078f2:	f7f8 fc8f 	bl	8000214 <__adddf3>
 80078f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80078fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078fe:	ed8a 7b00 	vstr	d7, [sl]
 8007902:	e76e      	b.n	80077e2 <__kernel_rem_pio2+0x50a>
 8007904:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007908:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800790c:	4640      	mov	r0, r8
 800790e:	4632      	mov	r2, r6
 8007910:	463b      	mov	r3, r7
 8007912:	4649      	mov	r1, r9
 8007914:	f7f8 fc7e 	bl	8000214 <__adddf3>
 8007918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f8 fc74 	bl	8000210 <__aeabi_dsub>
 8007928:	4632      	mov	r2, r6
 800792a:	463b      	mov	r3, r7
 800792c:	f7f8 fc72 	bl	8000214 <__adddf3>
 8007930:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007938:	ed84 7b00 	vstr	d7, [r4]
 800793c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007940:	e755      	b.n	80077ee <__kernel_rem_pio2+0x516>
 8007942:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007946:	f7f8 fc65 	bl	8000214 <__adddf3>
 800794a:	3d01      	subs	r5, #1
 800794c:	e759      	b.n	8007802 <__kernel_rem_pio2+0x52a>
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	9a01      	ldr	r2, [sp, #4]
 8007952:	601d      	str	r5, [r3, #0]
 8007954:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007958:	605c      	str	r4, [r3, #4]
 800795a:	609f      	str	r7, [r3, #8]
 800795c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007960:	60d3      	str	r3, [r2, #12]
 8007962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007966:	6110      	str	r0, [r2, #16]
 8007968:	6153      	str	r3, [r2, #20]
 800796a:	e728      	b.n	80077be <__kernel_rem_pio2+0x4e6>
 800796c:	41700000 	.word	0x41700000
 8007970:	3e700000 	.word	0x3e700000
 8007974:	00000000 	.word	0x00000000

08007978 <__kernel_sin>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	ed2d 8b04 	vpush	{d8-d9}
 8007980:	eeb0 8a41 	vmov.f32	s16, s2
 8007984:	eef0 8a61 	vmov.f32	s17, s3
 8007988:	ec55 4b10 	vmov	r4, r5, d0
 800798c:	b083      	sub	sp, #12
 800798e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007992:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007996:	9001      	str	r0, [sp, #4]
 8007998:	da06      	bge.n	80079a8 <__kernel_sin+0x30>
 800799a:	ee10 0a10 	vmov	r0, s0
 800799e:	4629      	mov	r1, r5
 80079a0:	f7f9 f89e 	bl	8000ae0 <__aeabi_d2iz>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d051      	beq.n	8007a4c <__kernel_sin+0xd4>
 80079a8:	4622      	mov	r2, r4
 80079aa:	462b      	mov	r3, r5
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fde6 	bl	8000580 <__aeabi_dmul>
 80079b4:	4682      	mov	sl, r0
 80079b6:	468b      	mov	fp, r1
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f8 fdde 	bl	8000580 <__aeabi_dmul>
 80079c4:	a341      	add	r3, pc, #260	; (adr r3, 8007acc <__kernel_sin+0x154>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	4680      	mov	r8, r0
 80079cc:	4689      	mov	r9, r1
 80079ce:	4650      	mov	r0, sl
 80079d0:	4659      	mov	r1, fp
 80079d2:	f7f8 fdd5 	bl	8000580 <__aeabi_dmul>
 80079d6:	a33f      	add	r3, pc, #252	; (adr r3, 8007ad4 <__kernel_sin+0x15c>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fc18 	bl	8000210 <__aeabi_dsub>
 80079e0:	4652      	mov	r2, sl
 80079e2:	465b      	mov	r3, fp
 80079e4:	f7f8 fdcc 	bl	8000580 <__aeabi_dmul>
 80079e8:	a33c      	add	r3, pc, #240	; (adr r3, 8007adc <__kernel_sin+0x164>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fc11 	bl	8000214 <__adddf3>
 80079f2:	4652      	mov	r2, sl
 80079f4:	465b      	mov	r3, fp
 80079f6:	f7f8 fdc3 	bl	8000580 <__aeabi_dmul>
 80079fa:	a33a      	add	r3, pc, #232	; (adr r3, 8007ae4 <__kernel_sin+0x16c>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc06 	bl	8000210 <__aeabi_dsub>
 8007a04:	4652      	mov	r2, sl
 8007a06:	465b      	mov	r3, fp
 8007a08:	f7f8 fdba 	bl	8000580 <__aeabi_dmul>
 8007a0c:	a337      	add	r3, pc, #220	; (adr r3, 8007aec <__kernel_sin+0x174>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fbff 	bl	8000214 <__adddf3>
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	4606      	mov	r6, r0
 8007a1a:	460f      	mov	r7, r1
 8007a1c:	b9eb      	cbnz	r3, 8007a5a <__kernel_sin+0xe2>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4650      	mov	r0, sl
 8007a24:	4659      	mov	r1, fp
 8007a26:	f7f8 fdab 	bl	8000580 <__aeabi_dmul>
 8007a2a:	a325      	add	r3, pc, #148	; (adr r3, 8007ac0 <__kernel_sin+0x148>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7f8 fbee 	bl	8000210 <__aeabi_dsub>
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	f7f8 fda2 	bl	8000580 <__aeabi_dmul>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4620      	mov	r0, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	f7f8 fbe6 	bl	8000214 <__adddf3>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	ec45 4b10 	vmov	d0, r4, r5
 8007a50:	b003      	add	sp, #12
 8007a52:	ecbd 8b04 	vpop	{d8-d9}
 8007a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <__kernel_sin+0x150>)
 8007a5c:	ec51 0b18 	vmov	r0, r1, d8
 8007a60:	2200      	movs	r2, #0
 8007a62:	f7f8 fd8d 	bl	8000580 <__aeabi_dmul>
 8007a66:	4632      	mov	r2, r6
 8007a68:	ec41 0b19 	vmov	d9, r0, r1
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 fd85 	bl	8000580 <__aeabi_dmul>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	ec51 0b19 	vmov	r0, r1, d9
 8007a7e:	f7f8 fbc7 	bl	8000210 <__aeabi_dsub>
 8007a82:	4652      	mov	r2, sl
 8007a84:	465b      	mov	r3, fp
 8007a86:	f7f8 fd7b 	bl	8000580 <__aeabi_dmul>
 8007a8a:	ec53 2b18 	vmov	r2, r3, d8
 8007a8e:	f7f8 fbbf 	bl	8000210 <__aeabi_dsub>
 8007a92:	a30b      	add	r3, pc, #44	; (adr r3, 8007ac0 <__kernel_sin+0x148>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7f8 fd6e 	bl	8000580 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f8 fbb2 	bl	8000214 <__adddf3>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f7f8 fbaa 	bl	8000210 <__aeabi_dsub>
 8007abc:	e7c4      	b.n	8007a48 <__kernel_sin+0xd0>
 8007abe:	bf00      	nop
 8007ac0:	55555549 	.word	0x55555549
 8007ac4:	3fc55555 	.word	0x3fc55555
 8007ac8:	3fe00000 	.word	0x3fe00000
 8007acc:	5acfd57c 	.word	0x5acfd57c
 8007ad0:	3de5d93a 	.word	0x3de5d93a
 8007ad4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ad8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007adc:	57b1fe7d 	.word	0x57b1fe7d
 8007ae0:	3ec71de3 	.word	0x3ec71de3
 8007ae4:	19c161d5 	.word	0x19c161d5
 8007ae8:	3f2a01a0 	.word	0x3f2a01a0
 8007aec:	1110f8a6 	.word	0x1110f8a6
 8007af0:	3f811111 	.word	0x3f811111

08007af4 <with_errno>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4604      	mov	r4, r0
 8007af8:	460d      	mov	r5, r1
 8007afa:	4616      	mov	r6, r2
 8007afc:	f7fd ffc6 	bl	8005a8c <__errno>
 8007b00:	4629      	mov	r1, r5
 8007b02:	6006      	str	r6, [r0, #0]
 8007b04:	4620      	mov	r0, r4
 8007b06:	bd70      	pop	{r4, r5, r6, pc}

08007b08 <xflow>:
 8007b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	b108      	cbz	r0, 8007b14 <xflow+0xc>
 8007b10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b14:	e9cd 2300 	strd	r2, r3, [sp]
 8007b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fd2e 	bl	8000580 <__aeabi_dmul>
 8007b24:	2222      	movs	r2, #34	; 0x22
 8007b26:	b003      	add	sp, #12
 8007b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b2c:	f7ff bfe2 	b.w	8007af4 <with_errno>

08007b30 <__math_uflow>:
 8007b30:	b508      	push	{r3, lr}
 8007b32:	2200      	movs	r2, #0
 8007b34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b38:	f7ff ffe6 	bl	8007b08 <xflow>
 8007b3c:	ec41 0b10 	vmov	d0, r0, r1
 8007b40:	bd08      	pop	{r3, pc}

08007b42 <__math_oflow>:
 8007b42:	b508      	push	{r3, lr}
 8007b44:	2200      	movs	r2, #0
 8007b46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b4a:	f7ff ffdd 	bl	8007b08 <xflow>
 8007b4e:	ec41 0b10 	vmov	d0, r0, r1
 8007b52:	bd08      	pop	{r3, pc}

08007b54 <fabs>:
 8007b54:	ec51 0b10 	vmov	r0, r1, d0
 8007b58:	ee10 2a10 	vmov	r2, s0
 8007b5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b60:	ec43 2b10 	vmov	d0, r2, r3
 8007b64:	4770      	bx	lr

08007b66 <finite>:
 8007b66:	b082      	sub	sp, #8
 8007b68:	ed8d 0b00 	vstr	d0, [sp]
 8007b6c:	9801      	ldr	r0, [sp, #4]
 8007b6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b76:	0fc0      	lsrs	r0, r0, #31
 8007b78:	b002      	add	sp, #8
 8007b7a:	4770      	bx	lr
 8007b7c:	0000      	movs	r0, r0
	...

08007b80 <floor>:
 8007b80:	ec51 0b10 	vmov	r0, r1, d0
 8007b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007b8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007b90:	2e13      	cmp	r6, #19
 8007b92:	ee10 5a10 	vmov	r5, s0
 8007b96:	ee10 8a10 	vmov	r8, s0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	dc32      	bgt.n	8007c04 <floor+0x84>
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	da14      	bge.n	8007bcc <floor+0x4c>
 8007ba2:	a333      	add	r3, pc, #204	; (adr r3, 8007c70 <floor+0xf0>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fb34 	bl	8000214 <__adddf3>
 8007bac:	2200      	movs	r2, #0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f7f8 ff76 	bl	8000aa0 <__aeabi_dcmpgt>
 8007bb4:	b138      	cbz	r0, 8007bc6 <floor+0x46>
 8007bb6:	2c00      	cmp	r4, #0
 8007bb8:	da57      	bge.n	8007c6a <floor+0xea>
 8007bba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007bbe:	431d      	orrs	r5, r3
 8007bc0:	d001      	beq.n	8007bc6 <floor+0x46>
 8007bc2:	4c2d      	ldr	r4, [pc, #180]	; (8007c78 <floor+0xf8>)
 8007bc4:	2500      	movs	r5, #0
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	e025      	b.n	8007c18 <floor+0x98>
 8007bcc:	4f2b      	ldr	r7, [pc, #172]	; (8007c7c <floor+0xfc>)
 8007bce:	4137      	asrs	r7, r6
 8007bd0:	ea01 0307 	and.w	r3, r1, r7
 8007bd4:	4303      	orrs	r3, r0
 8007bd6:	d01f      	beq.n	8007c18 <floor+0x98>
 8007bd8:	a325      	add	r3, pc, #148	; (adr r3, 8007c70 <floor+0xf0>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fb19 	bl	8000214 <__adddf3>
 8007be2:	2200      	movs	r2, #0
 8007be4:	2300      	movs	r3, #0
 8007be6:	f7f8 ff5b 	bl	8000aa0 <__aeabi_dcmpgt>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d0eb      	beq.n	8007bc6 <floor+0x46>
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	bfbe      	ittt	lt
 8007bf2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007bf6:	fa43 f606 	asrlt.w	r6, r3, r6
 8007bfa:	19a4      	addlt	r4, r4, r6
 8007bfc:	ea24 0407 	bic.w	r4, r4, r7
 8007c00:	2500      	movs	r5, #0
 8007c02:	e7e0      	b.n	8007bc6 <floor+0x46>
 8007c04:	2e33      	cmp	r6, #51	; 0x33
 8007c06:	dd0b      	ble.n	8007c20 <floor+0xa0>
 8007c08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c0c:	d104      	bne.n	8007c18 <floor+0x98>
 8007c0e:	ee10 2a10 	vmov	r2, s0
 8007c12:	460b      	mov	r3, r1
 8007c14:	f7f8 fafe 	bl	8000214 <__adddf3>
 8007c18:	ec41 0b10 	vmov	d0, r0, r1
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295
 8007c28:	fa23 f707 	lsr.w	r7, r3, r7
 8007c2c:	4207      	tst	r7, r0
 8007c2e:	d0f3      	beq.n	8007c18 <floor+0x98>
 8007c30:	a30f      	add	r3, pc, #60	; (adr r3, 8007c70 <floor+0xf0>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 faed 	bl	8000214 <__adddf3>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f7f8 ff2f 	bl	8000aa0 <__aeabi_dcmpgt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0bf      	beq.n	8007bc6 <floor+0x46>
 8007c46:	2c00      	cmp	r4, #0
 8007c48:	da02      	bge.n	8007c50 <floor+0xd0>
 8007c4a:	2e14      	cmp	r6, #20
 8007c4c:	d103      	bne.n	8007c56 <floor+0xd6>
 8007c4e:	3401      	adds	r4, #1
 8007c50:	ea25 0507 	bic.w	r5, r5, r7
 8007c54:	e7b7      	b.n	8007bc6 <floor+0x46>
 8007c56:	2301      	movs	r3, #1
 8007c58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007c5c:	fa03 f606 	lsl.w	r6, r3, r6
 8007c60:	4435      	add	r5, r6
 8007c62:	4545      	cmp	r5, r8
 8007c64:	bf38      	it	cc
 8007c66:	18e4      	addcc	r4, r4, r3
 8007c68:	e7f2      	b.n	8007c50 <floor+0xd0>
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	462c      	mov	r4, r5
 8007c6e:	e7aa      	b.n	8007bc6 <floor+0x46>
 8007c70:	8800759c 	.word	0x8800759c
 8007c74:	7e37e43c 	.word	0x7e37e43c
 8007c78:	bff00000 	.word	0xbff00000
 8007c7c:	000fffff 	.word	0x000fffff

08007c80 <nan>:
 8007c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c88 <nan+0x8>
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	7ff80000 	.word	0x7ff80000

08007c90 <scalbn>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	ec55 4b10 	vmov	r4, r5, d0
 8007c96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	b99a      	cbnz	r2, 8007cc8 <scalbn+0x38>
 8007ca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ca4:	4323      	orrs	r3, r4
 8007ca6:	d036      	beq.n	8007d16 <scalbn+0x86>
 8007ca8:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <scalbn+0x100>)
 8007caa:	4629      	mov	r1, r5
 8007cac:	ee10 0a10 	vmov	r0, s0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 fc65 	bl	8000580 <__aeabi_dmul>
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <scalbn+0x104>)
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	da10      	bge.n	8007ce2 <scalbn+0x52>
 8007cc0:	a32b      	add	r3, pc, #172	; (adr r3, 8007d70 <scalbn+0xe0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	e03a      	b.n	8007d3e <scalbn+0xae>
 8007cc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ccc:	428a      	cmp	r2, r1
 8007cce:	d10c      	bne.n	8007cea <scalbn+0x5a>
 8007cd0:	ee10 2a10 	vmov	r2, s0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fa9c 	bl	8000214 <__adddf3>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	460d      	mov	r5, r1
 8007ce0:	e019      	b.n	8007d16 <scalbn+0x86>
 8007ce2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	3a36      	subs	r2, #54	; 0x36
 8007cea:	4432      	add	r2, r6
 8007cec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	dd08      	ble.n	8007d06 <scalbn+0x76>
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	a120      	add	r1, pc, #128	; (adr r1, 8007d78 <scalbn+0xe8>)
 8007cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cfc:	da1c      	bge.n	8007d38 <scalbn+0xa8>
 8007cfe:	a120      	add	r1, pc, #128	; (adr r1, 8007d80 <scalbn+0xf0>)
 8007d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d04:	e018      	b.n	8007d38 <scalbn+0xa8>
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	dd08      	ble.n	8007d1c <scalbn+0x8c>
 8007d0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d16:	ec45 4b10 	vmov	d0, r4, r5
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d20:	da19      	bge.n	8007d56 <scalbn+0xc6>
 8007d22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d26:	429e      	cmp	r6, r3
 8007d28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d2c:	dd0a      	ble.n	8007d44 <scalbn+0xb4>
 8007d2e:	a112      	add	r1, pc, #72	; (adr r1, 8007d78 <scalbn+0xe8>)
 8007d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e2      	bne.n	8007cfe <scalbn+0x6e>
 8007d38:	a30f      	add	r3, pc, #60	; (adr r3, 8007d78 <scalbn+0xe8>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f7f8 fc1f 	bl	8000580 <__aeabi_dmul>
 8007d42:	e7cb      	b.n	8007cdc <scalbn+0x4c>
 8007d44:	a10a      	add	r1, pc, #40	; (adr r1, 8007d70 <scalbn+0xe0>)
 8007d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0b8      	beq.n	8007cc0 <scalbn+0x30>
 8007d4e:	a10e      	add	r1, pc, #56	; (adr r1, 8007d88 <scalbn+0xf8>)
 8007d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d54:	e7b4      	b.n	8007cc0 <scalbn+0x30>
 8007d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d5a:	3236      	adds	r2, #54	; 0x36
 8007d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d64:	4620      	mov	r0, r4
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <scalbn+0x108>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	e7e8      	b.n	8007d3e <scalbn+0xae>
 8007d6c:	f3af 8000 	nop.w
 8007d70:	c2f8f359 	.word	0xc2f8f359
 8007d74:	01a56e1f 	.word	0x01a56e1f
 8007d78:	8800759c 	.word	0x8800759c
 8007d7c:	7e37e43c 	.word	0x7e37e43c
 8007d80:	8800759c 	.word	0x8800759c
 8007d84:	fe37e43c 	.word	0xfe37e43c
 8007d88:	c2f8f359 	.word	0xc2f8f359
 8007d8c:	81a56e1f 	.word	0x81a56e1f
 8007d90:	43500000 	.word	0x43500000
 8007d94:	ffff3cb0 	.word	0xffff3cb0
 8007d98:	3c900000 	.word	0x3c900000

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
